/**
 * Copyright: 2021 iAppsBeats LTD, All rights reserved
 */
var requirejs, require, define;
(function(r) {
	function K(e) {
		return O.call(e) === "[object Function]"
	}

	function G(e) {
		return O.call(e) === "[object Array]"
	}

	function $(e, t, n) {
		for (var r in t) !(r in L) && (!(r in e) || n) && (e[r] = t[r]);
		return d
	}

	function P(e, t, n) {
		return e = Error(t + "\nhttp://requirejs.org/docs/errors.html#" + e), n && (e.originalError = n), e
	}

	function aa(e, t, n) {
		var r, i, s;
		for (r = 0; s = t[r]; r++) s = typeof s == "string" ? {
			name: s
		} : s, i = s.location, n && (!i || i.indexOf("/") !== 0 && i.indexOf(":") === -1) && (i = n + "/" + (i || s.name)), e[s.name] = {
			name: s.name,
			location: i || s.name,
			main: (s.main || "main").replace(fa, "").replace(ba, "")
		}
	}

	function V(e, t) {
		e.holdReady ? e.holdReady(t) : t ? e.readyWait += 1 : e.ready(!0)
	}

	function ga(e) {
		function t(e, t) {
			var n, r;
			if (e && e.charAt(0) === ".")
				if (t) {
					E.pkgs[t] ? t = [t] : (t = t.split("/"), t = t.slice(0, t.length - 1)), n = e = t.concat(e.split("/"));
					var i;
					for (r = 0; i = n[r]; r++)
						if (i === ".") n.splice(r, 1), r -= 1;
						else if (i === "..") {
						if (r === 1 && (n[2] === ".." || n[0] === "..")) break;
						r > 0 && (n.splice(r - 1, 2), r -= 2)
					}
					r = E.pkgs[n = e[0]], e = e.join("/"), r && e === n + "/" + r.main && (e = n)
				} else e.indexOf("./") === 0 && (e = e.substring(2));
			return e
		}

		function n(e, n) {
			var r = e ? e.indexOf("!") : -1,
				i = null,
				s = n ? n.name : null,
				o = e,
				u, a;
			return r !== -1 && (i = e.substring(0, r), e = e.substring(r + 1, e.length)), i && (i = t(i, s)), e && (i ? u = (r = N[i]) && r.normalize ? r.normalize(e, function(e) {
				return t(e, s)
			}) : t(e, s) : (u = t(e, s), a = T[u], a || (a = b.nameToUrl(e, null, n), T[u] = a))), {
				prefix: i,
				name: u,
				parentMap: n,
				url: a,
				originalName: o,
				fullName: i ? i + "!" + (u || "") : u
			}
		}

		function i() {
			var e = !0,
				t = E.priorityWait,
				n, r;
			if (t) {
				for (r = 0; n = t[r]; r++)
					if (!C[n]) {
						e = !1;
						break
					}
				e && delete E.priorityWait
			}
			return e
		}

		function s(e, t, n) {
			return function() {
				var r = ha.call(arguments, 0),
					i;
				return n && K(i = r[r.length - 1]) && (i.__requireJsBuild = !0), r.push(t), e.apply(null, r)
			}
		}

		function o(e, t, n) {
			return t = s(n || b.require, e, t), $(t, {
				nameToUrl: s(b.nameToUrl, e),
				toUrl: s(b.toUrl, e),
				defined: s(b.requireDefined, e),
				specified: s(b.requireSpecified, e),
				isBrowser: d.isBrowser
			}), t
		}

		function u(e) {
			var t, i, s, o = e.callback,
				u = e.map,
				a = u.fullName,
				f = e.deps;
			s = e.listeners;
			var l = E.requireExecCb || d.execCb;
			if (o && K(o)) {
				if (E.catchError.define) try {
					i = l(a, e.callback, f, N[a])
				} catch (c) {
					t = c
				} else i = l(a, e.callback, f, N[a]);
				a && ((o = e.cjsModule) && o.exports !== r && o.exports !== N[a] ? i = N[a] = e.cjsModule.exports : i === r && e.usingExports ? i = N[a] : (N[a] = i, H[a] && (B[a] = !0)))
			} else a && (i = N[a] = o, H[a] && (B[a] = !0));
			k[e.id] && (delete k[e.id], e.isDone = !0, b.waitCount -= 1, b.waitCount === 0 && (A = [])), delete _[a], d.onResourceLoad && !e.placeholder && d.onResourceLoad(b, u, e.depArray);
			if (t) return i = (a ? n(a).url : "") || t.fileName || t.sourceURL, s = t.moduleTree, t = P("defineerror", 'Error evaluating module "' + a + '" at location "' + i + '":\n' + t + "\nfileName:" + i + "\nlineNumber: " + (t.lineNumber || t.line), t), t.moduleName = a, t.moduleTree = s, d.onError(t);
			for (t = 0; o = s[t]; t++) o(i);
			return r
		}

		function a(e, t) {
			return function(n) {
				e.depDone[t] || (e.depDone[t] = !0, e.deps[t] = n, e.depCount -= 1, e.depCount || u(e))
			}
		}

		function f(e, t) {
			var r = t.map,
				i = r.fullName,
				s = r.name,
				a = D[e] || (D[e] = N[e]),
				f;
			t.loading || (t.loading = !0, f = function(e) {
				t.callback = function() {
					return e
				}, u(t), C[t.id] = !0, w()
			}, f.fromText = function(e, t) {
				var n = Q;
				C[e] = !1, b.scriptCount += 1, b.fake[e] = !0, n && (Q = !1), d.exec(t), n && (Q = !0), b.completeLoad(e)
			}, i in N ? f(N[i]) : a.load(s, o(r.parentMap, !0, function(e, i) {
				var s = [],
					o, u;
				for (o = 0; u = e[o]; o++) u = n(u, r.parentMap), e[o] = u.fullName, u.prefix || s.push(e[o]);
				return t.moduleDeps = (t.moduleDeps || []).concat(s), b.require(e, i)
			}), f, E))
		}

		function l(e) {
			k[e.id] || (k[e.id] = e, A.push(e), b.waitCount += 1)
		}

		function c(e) {
			this.listeners.push(e)
		}

		function h(e, t) {
			var r = e.fullName,
				i = e.prefix,
				s = i ? D[i] || (D[i] = N[i]) : null,
				o, a;
			return r && (o = _[r]), !o && (a = !0, o = {
				id: (i && !s ? M++ + "__p@:" : "") + (r || "__r@" + M++),
				map: e,
				depCount: 0,
				depDone: [],
				depCallbacks: [],
				deps: [],
				listeners: [],
				add: c
			}, x[o.id] = !0, r && (!i || D[i])) && (_[r] = o), i && !s ? (r = n(i), i in N && !N[i] && (delete N[i], delete O[r.url]), i = h(r, !0), i.add(function() {
				var t = n(e.originalName, e.parentMap),
					t = h(t, !0);
				o.placeholder = !0, t.add(function(e) {
					o.callback = function() {
						return e
					}, u(o)
				})
			})) : a && t && (C[o.id] = !1, b.paused.push(o), l(o)), o
		}

		function p(e, t, i, s) {
			var e = n(e, s),
				f = e.name,
				c = e.fullName,
				p = h(e),
				d = p.id,
				v = p.deps,
				m;
			if (c) {
				if (c in N || C[d] === !0 || c === "jquery" && E.jQuery && E.jQuery !== i().fn.jquery) return;
				x[d] = !0, C[d] = !0, c === "jquery" && i && W(i())
			}
			p.depArray = t, p.callback = i;
			for (i = 0; i < t.length; i++)
				if (d = t[i]) d = n(d, f ? e : s), m = d.fullName, t[i] = m, m === "require" ? v[i] = o(e) : m === "exports" ? (v[i] = N[c] = {}, p.usingExports = !0) : m === "module" ? p.cjsModule = v[i] = {
					id: f,
					uri: f ? b.nameToUrl(f, null, s) : r,
					exports: N[c]
				} : !(m in N) || m in k || c in H && !(c in H && B[m]) ? (c in H && (H[m] = !0, delete N[m], O[d.url] = !1), p.depCount += 1, p.depCallbacks[i] = a(p, i), h(d, !0).add(p.depCallbacks[i])) : v[i] = N[m];
			p.depCount ? l(p) : u(p)
		}

		function v(e) {
			p.apply(null, e)
		}

		function m(e, t) {
			var n = e.map.fullName,
				i = e.depArray,
				s = !0,
				o, u, a, f;
			if (e.isDone || !n || !C[n]) return f;
			if (t[n]) return e;
			t[n] = !0;
			if (i) {
				for (o = 0; o < i.length; o++) {
					u = i[o];
					if (!C[u] && !ia[u]) {
						s = !1;
						break
					}
					if ((a = k[u]) && !a.isDone && C[u])
						if (f = m(a, t)) break
				}
				s || (f = r, delete t[n])
			}
			return f
		}

		function g(e, t) {
			var i = e.map.fullName,
				s = e.depArray,
				o, u, a, f;
			if (e.isDone || !i || !C[i]) return r;
			if (i) {
				if (t[i]) return N[i];
				t[i] = !0
			}
			if (s)
				for (o = 0; o < s.length; o++)
					if (u = s[o])
						if ((a = n(u).prefix) && (f = k[a]) && g(f, t), (a = k[u]) && !a.isDone && C[u]) u = g(a, t), e.depCallbacks[o](u);
			return N[i]
		}

		function y() {
			var e = E.waitSeconds * 1e3,
				e = e && b.startTime + e < (new Date).getTime(),
				t = "",
				n = !1,
				s = !1,
				o = [],
				u, a;
			if (b.pausedCount > 0) return r;
			if (E.priorityWait) {
				if (!i()) return r;
				w()
			}
			for (u in C)
				if (!(u in L) && (n = !0, !C[u]))
					if (e) t += u + " ";
					else {
						if (s = !0, u.indexOf("!") === -1) {
							o = [];
							break
						}(a = _[u] && _[u].moduleDeps) && o.push.apply(o, a)
					}
			if (!n && !b.waitCount) return r;
			if (e && t) return e = P("timeout", "Load timeout for modules: " + t), e.requireType = "timeout", e.requireModules = t, e.contextName = b.contextName, d.onError(e);
			if (s && o.length)
				for (t = 0; u = k[o[t]]; t++)
					if (u = m(u, {})) {
						g(u, {});
						break
					}
			if (!e && (s || b.scriptCount)) return (I || da) && !X && (X = setTimeout(function() {
				X = 0, y()
			}, 50)), r;
			if (b.waitCount) {
				for (t = 0; u = A[t]; t++) g(u, {});
				b.paused.length && w(), Y < 5 && (Y += 1, y())
			}
			return Y = 0, d.checkReadyState(), r
		}
		var b, w, E = {
				waitSeconds: 7,
				baseUrl: "./",
				paths: {},
				pkgs: {},
				catchError: {}
			},
			S = [],
			x = {
				require: !0,
				exports: !0,
				module: !0
			},
			T = {},
			N = {},
			C = {},
			k = {},
			A = [],
			O = {},
			M = 0,
			_ = {},
			D = {},
			H = {},
			B = {},
			j = 0;
		return W = function(e) {
			!b.jQuery && (e = e || (typeof jQuery != "undefined" ? jQuery : null)) && (!E.jQuery || e.fn.jquery === E.jQuery) && ("holdReady" in e || "readyWait" in e) && (b.jQuery = e, v(["jquery", [], function() {
				return jQuery
			}]), b.scriptCount) && (V(e, !0), b.jQueryIncremented = !0)
		}, w = function() {
			var e, t, n, s, o, u;
			b.takeGlobalQueue(), j += 1, b.scriptCount <= 0 && (b.scriptCount = 0);
			for (; S.length;) {
				if (e = S.shift(), e[0] === null) return d.onError(P("mismatch", "Mismatched anonymous define() module: " + e[e.length - 1]));
				v(e)
			}
			if (!E.priorityWait || i())
				for (; b.paused.length;) {
					o = b.paused, b.pausedCount += o.length, b.paused = [];
					for (s = 0; e = o[s]; s++) t = e.map, n = t.url, u = t.fullName, t.prefix ? f(t.prefix, e) : !O[n] && !C[u] && ((E.requireLoad || d.load)(b, u, n), n.indexOf("empty:") !== 0 && (O[n] = !0));
					b.startTime = (new Date).getTime(), b.pausedCount -= o.length
				}
			return j === 1 && y(), j -= 1, r
		}, b = {
			contextName: e,
			config: E,
			defQueue: S,
			waiting: k,
			waitCount: 0,
			specified: x,
			loaded: C,
			urlMap: T,
			urlFetched: O,
			scriptCount: 0,
			defined: N,
			paused: [],
			pausedCount: 0,
			plugins: D,
			needFullExec: H,
			fake: {},
			fullExec: B,
			managerCallbacks: _,
			makeModuleMap: n,
			normalize: t,
			configure: function(e) {
				var t, n, r;
				e.baseUrl && e.baseUrl.charAt(e.baseUrl.length - 1) !== "/" && (e.baseUrl += "/"), t = E.paths, r = E.pkgs, $(E, e, !0);
				if (e.paths) {
					for (n in e.paths) n in L || (t[n] = e.paths[n]);
					E.paths = t
				}
				if ((t = e.packagePaths) || e.packages) {
					if (t)
						for (n in t) n in L || aa(r, t[n], n);
					e.packages && aa(r, e.packages), E.pkgs = r
				}
				e.priority && (n = b.requireWait, b.requireWait = !1, w(), b.require(e.priority), w(), b.requireWait = n, E.priorityWait = e.priority), (e.deps || e.callback) && b.require(e.deps || [], e.callback)
			},
			requireDefined: function(e, t) {
				return n(e, t).fullName in N
			},
			requireSpecified: function(e, t) {
				return n(e, t).fullName in x
			},
			require: function(t, r, i) {
				if (typeof t == "string") return K(r) ? d.onError(P("requireargs", "Invalid require call")) : d.get ? d.get(b, t, r) : (r = n(t, r), t = r.fullName, t in N ? N[t] : d.onError(P("notloaded", "Module name '" + r.fullName + "' has not been loaded yet for context: " + e)));
				(t && t.length || r) && p(null, t, r, i);
				if (!b.requireWait)
					for (; !b.scriptCount && b.paused.length;) w();
				return b.require
			},
			takeGlobalQueue: function() {
				U.length && (ja.apply(b.defQueue, [b.defQueue.length - 1, 0].concat(U)), U = [])
			},
			completeLoad: function(e) {
				var t;
				for (b.takeGlobalQueue(); S.length;) {
					if (t = S.shift(), t[0] === null) {
						t[0] = e;
						break
					}
					if (t[0] === e) break;
					v(t), t = null
				}
				t ? v(t) : v([e, [], e === "jquery" && typeof jQuery != "undefined" ? function() {
					return jQuery
				} : null]), d.isAsync && (b.scriptCount -= 1), w(), d.isAsync || (b.scriptCount -= 1)
			},
			toUrl: function(e, t) {
				var n = e.lastIndexOf("."),
					r = null;
				return n !== -1 && (r = e.substring(n, e.length), e = e.substring(0, n)), b.nameToUrl(e, r, t)
			},
			nameToUrl: function(e, n, r) {
				var i, s, o, u, a = b.config,
					e = t(e, r && r.fullName);
				if (d.jsExtRegExp.test(e)) n = e + (n ? n : "");
				else {
					i = a.paths, s = a.pkgs, r = e.split("/");
					for (u = r.length; u > 0; u--) {
						if (o = r.slice(0, u).join("/"), i[o]) {
							r.splice(0, u, i[o]);
							break
						}
						if (o = s[o]) {
							e = e === o.name ? o.location + "/" + o.main : o.location, r.splice(0, u, e);
							break
						}
					}
					n = r.join("/") + (n || ".js"), n = (n.charAt(0) === "/" || n.match(/^[\w\+\.\-]+:/) ? "" : a.baseUrl) + n
				}
				return a.urlArgs ? n + ((n.indexOf("?") === -1 ? "?" : "&") + a.urlArgs) : n
			}
		}, b.jQueryCheck = W, b.resume = w, b
	}

	function ka() {
		var e, t, n;
		if (C && C.readyState === "interactive") return C;
		e = document.getElementsByTagName("script");
		for (t = e.length - 1; t > -1 && (n = e[t]); t--)
			if (n.readyState === "interactive") return C = n;
		return null
	}
	var la = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
		ma = /require\(\s*["']([^'"\s]+)["']\s*\)/g,
		fa = /^\.\//,
		ba = /\.js$/,
		O = Object.prototype.toString,
		u = Array.prototype,
		ha = u.slice,
		ja = u.splice,
		I = typeof window != "undefined" && !!navigator && !!document,
		da = !I && typeof importScripts != "undefined",
		na = I && navigator.platform === "PLAYSTATION 3" ? /^complete$/ : /^(complete|loaded)$/,
		ea = typeof opera != "undefined" && opera.toString() === "[object Opera]",
		L = {},
		D = {},
		U = [],
		C = null,
		Y = 0,
		Q = !1,
		ia = {
			require: !0,
			module: !0,
			exports: !0
		},
		d, u = {},
		J, y, v, E, o, w, F, B, z, W, X;
	if (typeof define == "undefined") {
		if (typeof requirejs != "undefined") {
			if (K(requirejs)) return;
			u = requirejs, requirejs = r
		}
		typeof require != "undefined" && !K(require) && (u = require, require = r), d = requirejs = function(e, t, n) {
			var r = "_",
				i;
			return !G(e) && typeof e != "string" && (i = e, G(t) ? (e = t, t = n) : e = []), i && i.context && (r = i.context), n = D[r] || (D[r] = ga(r)), i && n.configure(i), n.require(e, t)
		}, d.config = function(e) {
			return d(e)
		}, require || (require = d), d.toUrl = function(e) {
			return D._.toUrl(e)
		}, d.version = "1.0.8", d.jsExtRegExp = /^\/|:|\?|\.js$/, y = d.s = {
			contexts: D,
			skipAsync: {}
		};
		if (d.isAsync = d.isBrowser = I)
			if (v = y.head = document.getElementsByTagName("head")[0], E = document.getElementsByTagName("base")[0]) v = y.head = E.parentNode;
		d.onError = function(e) {
			throw e
		}, d.load = function(e, t, n) {
			d.resourcesReady(!1), e.scriptCount += 1, d.attach(n, e, t), e.jQuery && !e.jQueryIncremented && (V(e.jQuery, !0), e.jQueryIncremented = !0)
		}, define = function(e, t, n) {
			var i, s;
			return typeof e != "string" && (n = t, t = e, e = null), G(t) || (n = t, t = []), !t.length && K(n) && n.length && (n.toString().replace(la, "").replace(ma, function(e, n) {
				t.push(n)
			}), t = (n.length === 1 ? ["require"] : ["require", "exports", "module"]).concat(t)), Q && (i = J || ka()) && (e || (e = i.getAttribute("data-requiremodule")), s = D[i.getAttribute("data-requirecontext")]), (s ? s.defQueue : U).push([e, t, n]), r
		}, define.amd = {
			multiversion: !0,
			plugins: !0,
			jQuery: !0
		}, d.exec = function(a) {
			return eval(a)
		}, d.execCb = function(e, t, n, r) {
			return t.apply(r, n)
		}, d.addScriptToDom = function(e) {
			J = e, E ? v.insertBefore(e, E) : v.appendChild(e), J = null
		}, d.onScriptLoad = function(e) {
			var t = e.currentTarget || e.srcElement,
				n;
			if (e.type === "load" || t && na.test(t.readyState)) C = null, e = t.getAttribute("data-requirecontext"), n = t.getAttribute("data-requiremodule"), D[e].completeLoad(n), t.detachEvent && !ea ? t.detachEvent("onreadystatechange", d.onScriptLoad) : t.removeEventListener("load", d.onScriptLoad, !1)
		}, d.attach = function(e, t, n, r, i, s) {
			var o;
			return I ? (r = r || d.onScriptLoad, o = t && t.config && t.config.xhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "html:script") : document.createElement("script"), o.type = i || t && t.config.scriptType || "text/javascript", o.charset = "utf-8", o.async = !y.skipAsync[e], t && o.setAttribute("data-requirecontext", t.contextName), o.setAttribute("data-requiremodule", n), o.attachEvent && !(o.attachEvent.toString && o.attachEvent.toString().indexOf("[native code]") < 0) && !ea ? (Q = !0, s ? o.onreadystatechange = function() {
				o.readyState === "loaded" && (o.onreadystatechange = null, o.attachEvent("onreadystatechange", r), s(o))
			} : o.attachEvent("onreadystatechange", r)) : o.addEventListener("load", r, !1), o.src = e, s || d.addScriptToDom(o), o) : (da && (importScripts(e), t.completeLoad(n)), null)
		};
		if (I) {
			o = document.getElementsByTagName("script");
			for (B = o.length - 1; B > -1 && (w = o[B]); B--) {
				v || (v = w.parentNode);
				if (F = w.getAttribute("data-main")) {
					u.baseUrl || (o = F.split("/"), w = o.pop(), o = o.length ? o.join("/") + "/" : "./", u.baseUrl = o, F = w.replace(ba, "")), u.deps = u.deps ? u.deps.concat(F) : [F];
					break
				}
			}
		}
		d.checkReadyState = function() {
			var e = y.contexts,
				t;
			for (t in e)
				if (!(t in L) && e[t].waitCount) return;
			d.resourcesReady(!0)
		}, d.resourcesReady = function(e) {
			var t, n;
			d.resourcesDone = e;
			if (d.resourcesDone)
				for (n in e = y.contexts, e) !(n in L) && (t = e[n], t.jQueryIncremented) && (V(t.jQuery, !1), t.jQueryIncremented = !1)
		}, d.pageLoaded = function() {
			document.readyState !== "complete" && (document.readyState = "complete")
		}, I && document.addEventListener && !document.readyState && (document.readyState = "loading", window.addEventListener("load", d.pageLoaded, !1)), d(u), d.isAsync && typeof setTimeout != "undefined" && (z = y.contexts[u.context || "_"], z.requireWait = !0, setTimeout(function() {
			z.requireWait = !1, z.scriptCount || z.resume(), d.checkReadyState()
		}, 0))
	}
})(), define("lib/require", function() {});
var initializing = !1,
	fnTest = /xyz/.test(function() {
		xyz
	}) ? /\b_super\b/ : /.*/;
Class = function() {}, Class.extend = function(e) {
	var t = this.prototype;
	initializing = !0;
	var n = new this;
	initializing = !1;
	for (var r in e) n[r] = typeof e[r] == "function" && typeof t[r] == "function" && fnTest.test(e[r]) ? function(e, n) {
		return function() {
			var r = this._super;
			this._super = t[e];
			var i = n.apply(this, arguments);
			return this._super = r, i
		}
	}(r, e[r]) : e[r];
	return Class = function() {
		!initializing && this.init && this.init.apply(this, arguments)
	}, Class.prototype = n, Class.constructor = Class, Class.extend = arguments.callee, Class
}, typeof exports != "undefined" && (exports.Class = Class), define("lib/class", function() {}), define("app", ["lib/class"], function() {
	var e = Class.extend({
		init: function() {
			this.language = window.navigator ? (window.navigator.userLanguage || window.navigator.language || "en").substring(0, 2) : null, this.ready = !1, gui.addClass("playbutton", "loading"), this.keyPressed = {}, this.keyScript = null
		},
		setGame: function(e) {
			this.game = e, this.isMobile = this.game.renderer.isMobile, this.isDesktop = !this.isMobile, this.isMobile ? (gui.show("weaponpad"), gui.show("movepad")) : gui.hide("movepad"), this.ready = !0, gui.removeClass("playbutton", "loading")
		},
		center: function() {
			window.scrollTo(0, 1)
		},
		tryStartGame: function() {
			this.startGame()
		},
		startGame: function() {
			if (!this.game) return;
			gui.setClick("playbutton", null), gui.addClass("playbutton", "loading"), this.start()
		},
		start: function() {
			if (this.game && this.game.started) return;
			var e = this.config;
			this.game.setServerOptions(e.serverurl), this.center(), this.game.run()
		},
		setMouseCoordinates: function(e) {
			var t = gui.getOffset("gamecontainer"),
				n = this.game.renderer.canvas.width,
				r = this.game.renderer.canvas.height,
				i = this.game.mouse,
				s = e.changedTouches ? e.changedTouches : e.originalEvent ? e.originalEvent.changedTouches : null;
			s && s.length > 0 ? (i.x = s[0].pageX, i.y = s[0].pageY) : (i.x = e.pageX, i.y = e.pageY), i.x -= t.left, i.y -= t.top, i.x <= 0 ? i.x = 0 : i.x >= n && (i.x = n - 1), i.y <= 0 ? i.y = 0 : i.y >= r && (i.y = r - 1)
		},
		showChat: function() {
			return this.game.shop.hasExternInterfaceVersion(1.1) && Config_Extern["platform"] == "iphone" ? (this.game.shop.sendOpenTextField("chat", "", ""), gui.blur("chatbutton"), this.game.client.sendIsTalking(!0), this.game.player && (this.game.player.talk = !0), !1) : this.game && this.game.started ? (gui.show("chatbox"), gui.focus("chatinput"), this.game.client.sendIsTalking(!0), this.game.player && (this.game.player.talk = !0), !0) : !1
		},
		hideChat: function() {
			this.game && this.game.started && (gui.isVisible("chatbox") && this.game.client.sendIsTalking(!1), this.game.player && (this.game.player.talk = !1), gui.hide("chatbox"), gui.blur("chatinput"))
		},
		hideWindows: function() {
			gui.isVisible("reconnectscreen") ? this.reconnect() : (gui.isVisible("deathscreen") || !this.game.player) && this.revive()
		},
		revive: function() {
			gui.fadeOut("deathscreen"), this.game.sounds && this.game.sounds.play("revive"), this.game.restart()
		},
		reconnect: function() {
			window.location.href = window.location.href
		}
	});
	return e
}), define("config", [], function() {
	return {
		serverurl: "wss://iappsbeats.com/corleonewss",
		gamename: "Corleone Online",
		aboutme: "<div style='float:right; margin-left:10px;margin-right:10px;'><img src='../files/gui/bbuilder_aboutpicture.jpg' align=right></div>Corleone Online has been made by iAppsBeats.<br><br clear=all>Facebook page: http://facebook.com/corleoneonline<br><br>Attribution: Some sounds are under attribution license.",
		facebookpage: "https://www.facebook.com/corleoneonline",
		forumurl: "https://discord.gg/qQjzZVa",
		docsurl: "https://docs.iappsbeats.com",
		adminfilesurl: "https://gitlab.iappsbeats.com/corleone/FilesX",
		adminconfigurl: "https://gitlab.iappsbeats.com/corleone/Config",
		adminscriptsurl: "https://gitlab.iappsbeats.com/corleone/Scripts",
		adminmapsurl: "https://gitlab.iappsbeats.com/corleone/Maps",
		primaryweapon: "gun",
		unlimitedammo: !1,
		defaultarmor: "clotharmor",
		defaultweapon: "9mm",
		defaulthead: "bbuilder_head1.png",
		defaulthat: null,
		enablearrowdisplay: !0,
		enablequestmenu: !1,
		enablesharebutton: !0,
		enablenewgui: !0,
		enablebackpackani: !0,
		allowblock: !0,
		movepadalpha: .6,
		fixedhousedoor: !1,
		uploadavailabletypes: ["HAT", "HEAD", "BODY"],
		uploadpricehat: 3e4,
		uploadpricehead: 15e3,
		uploadpricebody: 1e4,
		giftopprice: 5e3,
		clancreateprice: 2e3,
		clanrenameprice: 400,
		clanmemberlimit: 24,
		clandisbandbonus: 500,
		minimaparea: {
			x: 78,
			y: 70,
			w: 200,
			h: 180
		},
		noguimaps: ["ban"],
		invitemessage: "Check out Corleone Online, the new online game!",
		extendedemoticons: !0,
		emoticonoffset: {
			x: -8,
			y: -75
		},
		music: null,
		showcoinsarrow: !1,
		showfurnitureshops: !1,
		storyshareurl: "https://iappsbeats.com/corleone/facebook/storyvideo.php?storyid=",
		twitteraccount: "Corleone_Online",
		twitterhashtags: "iappsbeats,corleoneonline",
		tiledefsgrass: {
			"corleone_terrain.png": [0, 2, 3, 5, 7, 8, 10, 11, 16, 17, 18, 19, 20, 21, 26, 64, 65, 66, 67, 69, 70, 71, 72, 74, 80, 81, 82, 83, 85, 90, 91, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 156, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 218, 219, 220, 221, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 282, 283, 284, 285, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 346, 347, 348, 349, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 410, 411, 412, 413, 448, 449, 450, 451, 452, 453, 455, 456, 457, 474, 475, 476, 512, 513, 514, 515, 516, 517, 519, 520, 521, 539, 576, 577, 578, 579, 580, 581, 583, 585, 1055, 1056, 1057, 1058, 647, 648, 649, 1119, 1120, 1121, 1122]
		},
		inapp: [{
			productid: "https://iappsbeats.com/corleone/facebook/opengraph/coinspackage1.html",
			coins: 2500,
			price: 1.99,
			ios: "com.iappsbeats.corleone.CoinsPackage1"
		}, {
			productid: "https://iappsbeats.com/corleone/facebook/opengraph/coinspackage2.html",
			coins: 8250,
			price: 4.99,
			ios: "com.iappsbeats.corleone.CoinsPackage2"
		}, {
			productid: "https://iappsbeats.com/corleone/facebook/opengraph/coinspackage3.html",
			coins: 19e3,
			price: 9.99,
			ios: "com.iappsbeats.corleone.CoinsPackage3"
		}, {
			productid: "https://iappsbeats.com/corleone/facebook/opengraph/coinspackage4.html",
			coins: 58250,
			price: 24.99,
			ios: "com.iappsbeats.corleone.CoinsPackage4"
		}, {
			productid: "https://iappsbeats.com/corleone/facebook/opengraph/coinspackage5.html",
			coins: 125e3,
			price: 49.99,
			ios: "com.iappsbeats.corleone.CoinsPackage5"
		}],
		gameads: [{
			icon: "../files/gui/bbuilder_newbutton_avalonia.png",
			name: "Avalonia Online",
			shortname: "Avalonia",
			hint: "New game: Avalonia Online",
			description: "Become a legend in this new free online RPG!<br><br>Avalonia Online lets you directly participate in game actions without needing to play boring tutorials or learn instructions. Just login, grab your sword and fight with other players to become a medieval hero and build a new kingdom! Made by the same people as Corleone Online.",
			links: {
				iOS: "https://itunes.apple.com/app/id926109239?ls=1",
				Android: "https://play.google.com/store/apps/details?id=com.iappsbeats.bbuilder",
				Facebook: "https://apps.facebook.com/bbuilder",
				web: "https://avaloniaonline.com"
			},
			appstoreid: 926109239,
			showinmovementhelp: !1
		}],
		story: {
			youtubelink: "<iframe width=400 height=400 allow=autoplay src=https://www.youtube.com/embed/%s?rel=0&autoplay=1 frameborder=0 allowfullscreen=true></iframe>",
			instagramlink: '<iframe class="instagram-media instagram-media-rendered" id="instagram-embed-0" src="https://www.instagram.com/p/%s/embed" allowtransparency="true" frameborder="0" height="400" data-instgrm-payload-id="instagram-media-payload-0" scrolling="no" style="width: 400px;"></iframe>',
			twitchlink: "<iframe width=400 height=400 src=https://player.twitch.tv/?%s&parent=iappsbeats.com&parent=avaloniaonline.com&parent=corleoneonline.com frameborder=0 allowfullscreen=true></iframe>",
			facebooklink: '<iframe src="https://www.facebook.com/plugins/post.php?href=https://www.facebook.com/%s&show_text=true" width=400 height=400 style="background-color:white;border:none;overflow:hidden" scrolling=no frameborder=0 allowfullscreen=true allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share"></iframe>'
		}
	}
});
var clientstorageversion = 1;
define("storage", ["lib/class"], function() {
		var e = Class.extend({
			init: function() {
				this.ghostcookie = "xt:ghost", logincookie == this.ghostcookie ? (this.loadWithCookie(""), this.ghost = !0) : this.loadWithCookie(logincookie)
			},
			loadWithCookie: function(e) {
				this.ghost = !1;
				var t = e && e.length > 0 ? e.indexOf(":") >= 0 ? e : "fc:" + e : null,
					n = !1;
				if (!this.load()) this.resetData(t), n = !0;
				else if (!this.data || !this.data.version || this.data.version < clientstorageversion) window.console && console.log("Resetting local data because of outdated version."), this.resetData(t), n = !0;
				t && t.length > 0 ? (!n && this.data.cookie && this.data.cookie.indexOf(":") < 0 && (this.data.cookie2 = this.data.cookie), this.data.cookie = t) : this.data.cookie && this.data.cookie.indexOf(":") >= 0 && (this.data.cookie2 ? (this.data.cookie = this.data.cookie2, delete this.data.cookie2) : this.resetData()), this.save()
			},
			resetData: function(e) {
				var t = e ? e : Guid.newGuid();
				this.data = {
					version: clientstorageversion,
					cookie: t,
					player: {
						name: ""
					}
				}
			},
			hasLocalStorage: function() {
				return typeof e != "undefined"
			},
			load: function() {
				if (this.ghost) return;
				try {
					if (this.hasLocalStorage() && localStorage.data) return this.data = JSON.parse(localStorage.data), !0
				} catch (e) {}
				return !1
			},
			save: function() {
				if (this.ghost) return;
				try {
					this.hasLocalStorage() && (localStorage.data = JSON.stringify(this.data))
				} catch (e) {}
			},
			clear: function() {
				if (this.ghost) return;
				try {
					this.hasLocalStorage() && (localStorage.data = "", this.resetData())
				} catch (e) {}
			},
			getCookie: function() {
				return this.ghost ? this.ghostcookie : this.data.cookie
			},
			getCookie2: function() {
				return this.ghost ? this.data.cookie : this.data.cookie2
			},
			setPlayerName: function(e) {
				if (this.ghost) return;
				this.data.player.name = e, this.save()
			}
		});
		return e
	}), define("infomanager", [], function() {
		var e = Class.extend({
				init: function(e) {
					this.game = e, this.damageinfos = {}, this.destroyQueue = [], this.ingamedoms = {}, this.killerinfos = []
				},
				addInGameDom: function(e, t, n) {
					if (this.ingamedoms[e]) gui.setHTML(this.ingamedoms[e], t);
					else {
						var r = this.game.renderer,
							i = Math.floor((n.x - r.camera.x) * r.zoom),
							s = Math.floor((n.y - r.camera.y) * r.zoom),
							o = document.createElement("div");
						o.innerHTML = t, o.style.position = "absolute", i != NaN && s != NaN && (o.style.left = i + "px", o.style.top = s + "px"), gui.getDom("ingamedoms").appendChild(o), this.ingamedoms[e] = o
					}
				},
				updateInGamePos: function(e) {
					var t = this.ingamedoms[e];
					if (!t) return;
					var n = this.game.getEntityById(e);
					if (!n) return;
					var r = this.game.renderer,
						i = Math.floor((n.x - r.camera.x) * r.zoom),
						s = Math.floor((n.y - r.camera.y) * r.zoom);
					t.style.left = i + "px", t.style.top = s + "px"
				},
				updateAllInGamePos: function() {
					for (var e in this.ingamedoms) this.updateInGamePos(e)
				},
				updateInGameSize: function(e) {
					var t = this.ingamedoms[e];
					if (!t) return;
					var n = this.game.getEntityById(e);
					if (!n) return;
					var r = gui.find(t, "iframe");
					if (r && r.length > 0) {
						var i = this.game.renderer,
							s = Math.floor(n.tileWidth * i.tilesize * i.zoom),
							o = Math.floor(n.tileHeight * i.tilesize * i.zoom);
						r[0].parentNode.style.width = s + "px", r[0].parentNode.style.height = o + "px", r[0].width = s, r[0].height = o
					}
				},
				updateAllInGameSize: function() {
					for (var e in this.ingamedoms) this.updateInGameSize(e)
				},
				removeInGameDom: function(e) {
					this.ingamedoms[e] && (gui.remove(this.ingamedoms[e]), delete this.ingamedoms[e])
				},
				removeAllInGameDom: function() {
					for (var e in this.ingamedoms) this.removeInGameDom(e)
				},
				addDamageInfo: function(e, t, r, i) {
					var s = this.game.currentTime + "" + Math.abs(e) + "" + t + "" + r,
						o = new n(s, e, t, r, n.DURATION, i),
						u = this;
					return o.onDestroy(function(e) {
						u.destroyQueue.push(e)
					}), this.damageinfos[s] = o, o
				},
				hasDamageInfos: function() {
					return Object.keys(this.damageinfos).length > 0
				},
				forEachDamageInfo: function(e) {
					var t = this;
					_.each(this.damageinfos, function(t, n) {
						e(t)
					})
				},
				update: function(e) {
					var t = this;
					this.forEachDamageInfo(function(t) {
						t.update(e)
					}), _.each(this.destroyQueue, function(e) {
						delete t.damageinfos[e]
					}), this.destroyQueue = []
				},
				addKillerInfo: function(e, t) {
					this.killerinfos.push({
						time: this.game.currentTime,
						x: e.x,
						y: e.y,
						victim: {
							head: e.head,
							hat: e.hat,
							name: e.name
						},
						killer: t,
						isfriend: e.clanname && this.game.player && this.game.player.clanname == e.clanname
					})
				},
				clearKillerInfos: function() {
					this.killerinfos = []
				}
			}),
			t = {
				received: {
					fill: "rgb(255, 50, 50)",
					stroke: "rgb(255, 180, 180)"
				},
				inflicted: {
					fill: "white",
					stroke: "#373737"
				},
				healed: {
					fill: "rgb(80, 255, 80)",
					stroke: "rgb(50, 120, 50)"
				}
			},
			n = Class.extend({
				DURATION: 1e3,
				init: function(e, n, r, i, s, o) {
					this.id = e, this.value = n, this.duration = s, this.x = r, this.y = i, this.opacity = 1, this.lastTime = 0, this.speed = 100, t[o] ? (this.fillColor = t[o].fill, this.strokeColor = t[o].stroke) : (this.fillColor = o, this.strokeColor = "#373737")
				},
				isTimeToAnimate: function(e) {
					return e - this.lastTime > this.speed
				},
				update: function(e) {
					this.isTimeToAnimate(e) && (this.lastTime = e, this.tick())
				},
				tick: function() {
					this.y -= 1, this.opacity -= .07, this.opacity < 0 && this.destroy()
				},
				onDestroy: function(e) {
					this.destroy_callback = e
				},
				destroy: function() {
					this.destroy_callback && this.destroy_callback(this.id)
				}
			});
		return e
	}), define("camera", [], function() {
		var e = Class.extend({
			init: function(e) {
				this.game = e, this.x = 0, this.y = 0, this.gridX = 0, this.gridY = 0
			},
			setPosition: function(e, t) {
				if (this.x != e || this.y != t) this.x = this.rx = e, this.y = this.ry = t, this.gridX = Math.floor(e / this.game.renderer.tilesize), this.gridY = Math.floor(t / this.game.renderer.tilesize), this.game.infoManager && this.game.infoManager.updateAllInGamePos()
			},
			setGridPosition: function(e, t) {
				this.gridX = e, this.gridY = t, this.x = this.rx = this.gridX * this.game.renderer.tilesize, this.y = this.ry = this.gridY * this.game.renderer.tilesize
			},
			lookAt: function(e) {
				if (!e) return;
				var t = e.getFocus ? e.getFocus() : e,
					n = this.game.renderer,
					r = this.game.mapmanager.currentmap,
					i = Math.floor(t.x + .5 * n.tilesize) - Math.floor(this.gridW / 2 * n.tilesize),
					s = Math.floor(t.y) - Math.floor(this.gridH / 2 * n.tilesize);
				r && !r.isHouseInside() && (i = Math.max(r.offsetx * n.tilesize, Math.min(i, (r.offsetx + r.width - this.gridW) * n.tilesize)), s = Math.max(r.offsety * n.tilesize, Math.min(s, (r.offsety + r.height - this.gridH) * n.tilesize))), this.setPosition(i, s), this.rx = this.x, this.ry = this.y, this.game.player && this.game.player.screenshake && (this.rx += this.game.player.screenshake.dx, this.ry += this.game.player.screenshake.dy)
			},
			isVisible: function(e, t) {
				return t || (t = 0), e.gridY - e.z >= this.gridY - t && e.gridY - e.z < this.gridY + this.gridH + t && e.gridX >= this.gridX - t && e.gridX < this.gridX + this.gridW + t
			}
		});
		return e
	}), define("context2d", [], function() {
		var e = Class.extend({
			init: function(e, t, n) {
				this.renderer = e, this.context = t, this.backcontext = n, this.initContext()
			},
			initContext: function() {
				this.disableImageSmoothing(this.context), this.disableImageSmoothing(this.backcontext)
			},
			setupForRender: function() {
				this.context.clearRect(0, 0, this.renderer.canvas.width, this.renderer.canvas.height), this.context.save(), this.context.translate(-this.renderer.camera.rx, -this.renderer.camera.ry)
			},
			drawDrawOverTiles: function() {},
			cleanUpRender: function() {
				this.context.restore()
			},
			getWidth: function() {
				return this.renderer.canvas.width
			},
			getHeight: function() {
				return this.renderer.canvas.height
			},
			getTileWidth: function() {
				return this.renderer.backcanvas.width
			},
			getTileHeight: function() {
				return this.renderer.backcanvas.height
			},
			rescale: function() {
				this.disableImageSmoothing(this.context), this.disableImageSmoothing(this.backcontext), this.renderer.game.started && (this.renderer.drawTiles(), this.renderer.renderFrame())
			},
			updateCameraSize: function() {
				this.renderer.camera.gridW = this.renderer.canvas.width / this.renderer.tilesize, this.renderer.camera.gridH = this.renderer.canvas.height / this.renderer.tilesize
			},
			drawText: function(e, t, n, r, i, s) {
				if (!e || !t || !n) return;
				this.context.save(), r && (this.context.textAlign = "center"), this.context.fillStyle = "black", this.context.fillText(e, t + 2, n + 2), this.context.fillStyle = i || "white", this.context.fillText(e, t, n), this.context.restore()
			},
			drawCombatInfo: function() {
				if (!this.renderer.game.infoManager.hasDamageInfos()) return;
				var e = this;
				this.renderer.game.infoManager.forEachDamageInfo(function(t) {
					e.context.save(), e.context.font = "bold 32px Helvetica", e.context.globalAlpha = t.opacity, e.drawText(t.value, t.x + 8, t.y, !0, t.fillColor, t.strokeColor), e.context.restore()
				})
			},
			getTileBorder: function() {
				return Math.floor(this.renderer.mapmovegap / this.renderer.zoom)
			},
			updateTileOffset: function() {
				var e = this.renderer;
				if (!e.backcanvas.style) return;
				var t = e.game.mapmanager.currentmap,
					n = Math.floor((t.terrainrenderoffset.x - e.camera.x) * e.zoom) + "px",
					r = Math.floor((t.terrainrenderoffset.y - e.camera.y) * e.zoom) + "px";
				e.backcanvas.style.left != n && (e.backcanvas.style.left = n), e.backcanvas.style.top != r && (e.backcanvas.style.top = r)
			},
			setupCanvasForRender: function() {
				this.context.clearRect(0, 0, this.renderer.canvas.width, this.renderer.canvas.height), this.context.save(), this.context.translate(-this.renderer.camera.rx, -this.renderer.camera.ry)
			},
			disableImageSmoothing: function(e) {
				if (!e) return;
				e.mozImageSmoothingEnabled = !1, e.webkitImageSmoothingEnabled = !1, e.msImageSmoothingEnabled = !1, e.imageSmoothingEnabled = !1
			},
			deleteTexture: function(e) {},
			drawImage: function(e, t, n, r, i, s, o) {
				if (!e || !e.image) return;
				if (!r) r = [0, 0, e.image.width, e.image.height];
				else if (r[0] < 0 || r[1] < 0 || r[0] + r[2] > e.image.width || r[1] + r[3] > e.image.height) return;
				s ? (this.context.save(), this.context.translate(t + s[1], n + s[2]), i && this.context.scale(i[0], i[1]), this.context.rotate(-s[0]), t = -s[1], n = -s[2]) : i && (this.context.save(), this.context.translate(t + r[2] / 2, n + r[3] / 2), this.context.scale(i[0], i[1]), t = -r[2] / 2, n = -r[3] / 2), this.context.drawImage(e.image, r[0], r[1], r[2], r[3], Math.floor(t), Math.floor(n), r[2], r[3]), (s || i) && this.context.restore()
			},
			setupObjectZoom: function(e, t, n) {
				return n == 1 ? null : (this.context.save(), this.context.translate(e * (1 - n), t * (1 - n)), this.context.scale(n, n), !0)
			},
			restoreZoom: function(e) {
				if (!e) return;
				this.context.restore()
			},
			setAmbientColor: function(e, t, n) {
				this.ambientColor = [e, t, n, 1]
			},
			setColor: function(e) {
				if (!e) return null;
				if ("" + e == "" + this.currentColor) return this.currentColor;
				var t = this.currentColor ? this.currentColor : [1, 1, 1, 1];
				return this.currentColor = e, this.context.globalAlpha = e[3], t ? t : [1, 1, 1, 1]
			},
			drawDarkHole: function() {
				var e = this.renderer,
					t = {
						x: e.camera.rx,
						y: e.camera.ry,
						w: this.getWidth(),
						h: this.getHeight()
					};
				if (!e.game.player) {
					this.context.fillStyle = "#000000", this.context.fillRect(t.x, t.y, t.w, t.h);
					return
				}
				var n = {
						x: e.game.player.x + e.tilesize / 2,
						y: e.game.player.y
					},
					r = 128,
					i = {
						x: n.x - r,
						y: n.y - r,
						w: r * 2,
						h: r * 2
					};
				this.context.fillStyle = "#000000", i.y > t.y && this.context.fillRect(t.x, t.y, t.w, i.y - t.y + 1), i.x > t.x && this.context.fillRect(t.x, i.y - 16, i.x - t.x + 1, i.h + 32), i.x + i.w < t.x + t.w && this.context.fillRect(i.x + i.w - 1, i.y - 16, t.x + t.w - (i.x + i.w - 1), i.h + 32), i.y + i.h < t.y + t.h && this.context.fillRect(t.x, i.y + i.h - 1, t.w, t.y + t.h - (i.y + i.h - 1)), this.drawImage(e.getImage("../files/gui/hole_image.png"), i.x, i.y)
			},
			drawDarkEffect: function(e) {},
			setBlendMode: function(e, t) {}
		});
		return e
	}),
	function(e) {
		"use strict";
		var t = {};
		typeof exports == "undefined" ? typeof define == "function" && typeof define.amd == "object" && define.amd ? (t.exports = {}, define("lib/gl-matrix", [], function() {
				return t.exports
			})) : t.exports = typeof window != "undefined" ? window : e : t.exports = exports,
			function(e) {
				if (!t) var t = 1e-6;
				if (!n) var n = typeof Float32Array != "undefined" ? Float32Array : Array;
				if (!r) var r = Math.random;
				var i = {};
				i.setMatrixArrayType = function(e) {
					n = e
				}, typeof e != "undefined" && (e.glMatrix = i);
				var s = Math.PI / 180;
				i.toRadian = function(e) {
					return e * s
				};
				var o = {};
				o.create = function() {
					var e = new n(2);
					return e[0] = 0, e[1] = 0, e
				}, o.transformMat4 = function(e, t, n) {
					var r = t[0],
						i = t[1];
					return e[0] = n[0] * r + n[4] * i + n[12], e[1] = n[1] * r + n[5] * i + n[13], e
				}, o.forEach = function() {
					var e = o.create();
					return function(t, n, r, i, s, o) {
						var u, a;
						n || (n = 2), r || (r = 0), i ? a = Math.min(i * n + r, t.length) : a = t.length;
						for (u = r; u < a; u += n) e[0] = t[u], e[1] = t[u + 1], s(e, e, o), t[u] = e[0], t[u + 1] = e[1];
						return t
					}
				}(), typeof e != "undefined" && (e.vec2 = o);
				var u = {};
				u.fromValues = function(e, t, r) {
					var i = new n(3);
					return i[0] = e, i[1] = t, i[2] = r, i
				}, typeof e != "undefined" && (e.vec3 = u);
				var a = {};
				a.create = function() {
					var e = new n(16);
					return e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = 1, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 1, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, e
				}, a.clone = function(e) {
					var t = new n(16);
					return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4], t[5] = e[5], t[6] = e[6], t[7] = e[7], t[8] = e[8], t[9] = e[9], t[10] = e[10], t[11] = e[11], t[12] = e[12], t[13] = e[13], t[14] = e[14], t[15] = e[15], t
				}, a.multiply = function(e, t, n) {
					var r = t[0],
						i = t[1],
						s = t[2],
						o = t[3],
						u = t[4],
						a = t[5],
						f = t[6],
						l = t[7],
						c = t[8],
						h = t[9],
						p = t[10],
						d = t[11],
						v = t[12],
						m = t[13],
						g = t[14],
						y = t[15],
						b = n[0],
						w = n[1],
						E = n[2],
						S = n[3];
					return e[0] = b * r + w * u + E * c + S * v, e[1] = b * i + w * a + E * h + S * m, e[2] = b * s + w * f + E * p + S * g, e[3] = b * o + w * l + E * d + S * y, b = n[4], w = n[5], E = n[6], S = n[7], e[4] = b * r + w * u + E * c + S * v, e[5] = b * i + w * a + E * h + S * m, e[6] = b * s + w * f + E * p + S * g, e[7] = b * o + w * l + E * d + S * y, b = n[8], w = n[9], E = n[10], S = n[11], e[8] = b * r + w * u + E * c + S * v, e[9] = b * i + w * a + E * h + S * m, e[10] = b * s + w * f + E * p + S * g, e[11] = b * o + w * l + E * d + S * y, b = n[12], w = n[13], E = n[14], S = n[15], e[12] = b * r + w * u + E * c + S * v, e[13] = b * i + w * a + E * h + S * m, e[14] = b * s + w * f + E * p + S * g, e[15] = b * o + w * l + E * d + S * y, e
				}, a.mul = a.multiply, a.translate = function(e, t, n) {
					var r = n[0],
						i = n[1],
						s = n[2],
						o, u, a, f, l, c, h, p, d, v, m, g;
					return t === e ? (e[12] = t[0] * r + t[4] * i + t[8] * s + t[12], e[13] = t[1] * r + t[5] * i + t[9] * s + t[13], e[14] = t[2] * r + t[6] * i + t[10] * s + t[14], e[15] = t[3] * r + t[7] * i + t[11] * s + t[15]) : (o = t[0], u = t[1], a = t[2], f = t[3], l = t[4], c = t[5], h = t[6], p = t[7], d = t[8], v = t[9], m = t[10], g = t[11], e[0] = o, e[1] = u, e[2] = a, e[3] = f, e[4] = l, e[5] = c, e[6] = h, e[7] = p, e[8] = d, e[9] = v, e[10] = m, e[11] = g, e[12] = o * r + l * i + d * s + t[12], e[13] = u * r + c * i + v * s + t[13], e[14] = a * r + h * i + m * s + t[14], e[15] = f * r + p * i + g * s + t[15]), e
				}, a.scale = function(e, t, n) {
					var r = n[0],
						i = n[1],
						s = n[2];
					return e[0] = t[0] * r, e[1] = t[1] * r, e[2] = t[2] * r, e[3] = t[3] * r, e[4] = t[4] * i, e[5] = t[5] * i, e[6] = t[6] * i, e[7] = t[7] * i, e[8] = t[8] * s, e[9] = t[9] * s, e[10] = t[10] * s, e[11] = t[11] * s, e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15], e
				}, a.rotateZ = function(e, t, n) {
					var r = Math.sin(n),
						i = Math.cos(n),
						s = t[0],
						o = t[1],
						u = t[2],
						a = t[3],
						f = t[4],
						l = t[5],
						c = t[6],
						h = t[7];
					return t !== e && (e[8] = t[8], e[9] = t[9], e[10] = t[10], e[11] = t[11], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15]), e[0] = s * i + f * r, e[1] = o * i + l * r, e[2] = u * i + c * r, e[3] = a * i + h * r, e[4] = f * i - s * r, e[5] = l * i - o * r, e[6] = c * i - u * r, e[7] = h * i - a * r, e
				}, a.ortho = function(e, t, n, r, i, s, o) {
					var u = 1 / (t - n),
						a = 1 / (r - i),
						f = 1 / (s - o);
					return e[0] = -2 * u, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = -2 * a, e[6] = 0, e[7] = 0, e[8] = 0, e[9] = 0, e[10] = 2 * f, e[11] = 0, e[12] = (t + n) * u, e[13] = (i + r) * a, e[14] = (o + s) * f, e[15] = 1, e
				}, typeof e != "undefined" && (e.mat4 = a)
			}(t.exports)
	}(this), define("context3d", ["lib/gl-matrix"], function(e) {
		var t = Class.extend({
			init: function(e, t) {
				this.renderer = e, this.contextGL = t, this.setAmbientColor(1, 1, 1), this.initContext()
			},
			initContext: function() {
				this.contextGL.clearColor(0, 0, 0, 1), this.contextGL.enable(this.contextGL.BLEND), this.blendMode = null, this.setBlendMode("normal", !0), this.initDefaultBuffers(), this.initShader()
			},
			setupForRender: function() {
				this.imageStack = [], this.boundinfo = null, this.newBlendMode = this.newColor = this.newWorldTransform = null, this.contextGL.useProgram(this.shader), this.contextGL.viewport(0, 0, this.renderer.canvas.clientWidth, this.renderer.canvas.clientHeight), this.contextGL.disable(this.contextGL.SCISSOR_TEST), this.contextGL.clear(this.contextGL.COLOR_BUFFER_BIT), this.contextGL.enableVertexAttribArray(this.mShaderVertexPositionAttribute), this.contextGL.enableVertexAttribArray(this.mShaderTextureCoordAttribute), this.setColor(this.getCurrentAmbientColor(), !0), this.contextGL.uniformMatrix4fv(this.mWorldTransform, !1, this.mVPMatrix), this.setBlendMode("normal", !0), this.drawTilesBuffers(!1)
			},
			getCurrentAmbientColor: function() {
				if (!this.renderer.game.settings.nodaynight) {
					var e = this.renderer.game.mapmanager.currentmap;
					if (e && e.properties.ambient && typeof e.properties["ambient"] == "string" && e.properties.ambient.length >= 7) {
						var t = e.properties.ambient,
							n = [parseInt(t.substr(-6, 2), 16) / 255, parseInt(t.substr(-4, 2), 16) / 255, parseInt(t.substr(-2, 2), 16) / 255, 1];
						return n
					}
					if (e && e.mapname == this.renderer.game.mapmanager.getDefaultOutsideMap()) return this.ambientColor
				}
				return [1, 1, 1, 1]
			},
			drawDrawOverTiles: function() {
				this.drawTilesBuffers(!0)
			},
			cleanUpRender: function() {
				this.flushImageStack(), this.boundinfo = null, this.contextGL.bindTexture(this.contextGL.TEXTURE_2D, null)
			},
			getWidth: function() {
				return this.renderer.canvas.width / this.renderer.zoom
			},
			getHeight: function() {
				return this.renderer.canvas.height / this.renderer.zoom
			},
			getTileWidth: function() {
				return this.getWidth() + this.renderer.mapmovegap
			},
			getTileHeight: function() {
				return this.getHeight() + this.renderer.mapmovegap
			},
			rescale: function() {
				this.setupViewProjection()
			},
			updateCameraSize: function() {
				this.renderer.camera.gridW = this.getWidth() / this.renderer.tilesize, this.renderer.camera.gridH = this.getHeight() / this.renderer.tilesize
			},
			drawCombatInfo: function() {
				if (!this.renderer.game.infoManager.hasDamageInfos()) return;
				this.combattexts || (this.combattexts = {});
				var e, t = this;
				this.renderer.game.infoManager.forEachDamageInfo(function(n) {
					if (!n.value) return;
					var r = t.setColor([1, 1, 1, n.opacity]);
					r && !e && (e = r);
					var i = "" + n.value,
						s = i + "_" + n.fillColor + "_" + n.strokeColor;
					t.combattexts[s] = t.renderer.drawTextCached(t.combattexts[s], i, n.x + 8, n.y, {
						centered: !0,
						color: n.fillColor,
						strokeColor: n.strokeColor,
						fontSize: 32,
						bold: !0
					})
				}), e && this.setColor(e)
			},
			getTileBorder: function() {
				return this.renderer.mapmovegap
			},
			updateTileOffset: function() {},
			initDefaultBuffers: function() {
				this.gSquareVertexBuffer = this.contextGL.createBuffer(), this.mTextureCoordBuffer = this.contextGL.createBuffer()
			},
			initShader: function() {
				var e = this.loadAndCompileShader("precision mediump float;uniform mat4 uWorldTransform;attribute vec2 aSquareVertexPosition;attribute vec2 aTextureCoordinate;varying vec2 vTexCoord;void main(void) {    gl_Position = uWorldTransform * vec4(aSquareVertexPosition, 0.0, 1.0);    vTexCoord = aTextureCoordinate;}", this.contextGL.VERTEX_SHADER),
					t = this.loadAndCompileShader("precision mediump float;uniform vec4 uPixelColor;uniform sampler2D uSampler;varying vec2 vTexCoord;void main(void) {    gl_FragColor = uPixelColor * texture2D(uSampler, vTexCoord);}", this.contextGL.FRAGMENT_SHADER);
				this.shader = this.contextGL.createProgram(), this.contextGL.attachShader(this.shader, e), this.contextGL.attachShader(this.shader, t), this.contextGL.linkProgram(this.shader);
				if (!this.contextGL.getProgramParameter(this.shader, this.contextGL.LINK_STATUS)) {
					window.console && console.log("Error linking shader");
					return
				}
				this.mShaderVertexPositionAttribute = this.contextGL.getAttribLocation(this.shader, "aSquareVertexPosition"), this.mShaderTextureCoordAttribute = this.contextGL.getAttribLocation(this.shader, "aTextureCoordinate"), this.mPixelColor = this.contextGL.getUniformLocation(this.shader, "uPixelColor"), this.mWorldTransform = this.contextGL.getUniformLocation(this.shader, "uWorldTransform")
			},
			loadAndCompileShader: function(e, t) {
				var n = this.contextGL.createShader(t);
				return this.contextGL.shaderSource(n, e), this.contextGL.compileShader(n), this.contextGL.getShaderParameter(n, this.contextGL.COMPILE_STATUS) || window.console && console.log("A shader compiling error occurred: " + this.contextGL.getShaderInfoLog(n)), n
			},
			loadGLTexture: function(e) {
				var t = this.contextGL.createTexture();
				this.contextGL.bindTexture(this.contextGL.TEXTURE_2D, t), this.contextGL.texParameteri(this.contextGL.TEXTURE_2D, this.contextGL.TEXTURE_WRAP_S, this.contextGL.CLAMP_TO_EDGE), this.contextGL.texParameteri(this.contextGL.TEXTURE_2D, this.contextGL.TEXTURE_WRAP_T, this.contextGL.CLAMP_TO_EDGE), this.contextGL.texParameteri(this.contextGL.TEXTURE_2D, this.contextGL.TEXTURE_MIN_FILTER, this.contextGL.NEAREST), this.contextGL.texParameteri(this.contextGL.TEXTURE_2D, this.contextGL.TEXTURE_MAG_FILTER, this.contextGL.NEAREST);
				var n = !1;
				try {
					this.contextGL.texImage2D(this.contextGL.TEXTURE_2D, 0, this.contextGL.RGBA, this.contextGL.RGBA, this.contextGL.UNSIGNED_BYTE, e), this.contextGL.getError() != this.contextGL.NO_ERROR && (n = !0)
				} catch (r) {
					n = !0
				}
				return n && (window.console && console.log("Error loading texture"), this.deleteTexture(t), t = null), this.contextGL.bindTexture(this.contextGL.TEXTURE_2D, null), t
			},
			setupViewProjection: function() {
				if (!this.contextGL) return;
				this.mProjMatrix = e.mat4.create(), e.mat4.ortho(this.mProjMatrix, 0, this.getWidth(), this.getHeight(), 0, -1, 1), this.mVPMatrix = this.mProjMatrix
			},
			getXform: function(t, n, r, i, s, o) {
				var u = e.mat4.create();
				return o ? (e.mat4.translate(u, u, e.vec3.fromValues(t + o[1], n + o[2], 0)), s && e.mat4.scale(u, u, e.vec3.fromValues(s[0], s[1], 1)), e.mat4.rotateZ(u, u, -o[0]), e.mat4.translate(u, u, e.vec3.fromValues(-o[1], -o[2], 0)), (r != 1 || i != 1) && e.mat4.scale(u, u, e.vec3.fromValues(r, i, 1))) : s ? (e.mat4.translate(u, u, e.vec3.fromValues(t + r / 2 - r / 2 * s[0], n + i / 2 - i / 2 * s[1], 0)), e.mat4.scale(u, u, e.vec3.fromValues(r * s[0], i * s[1], 1))) : (e.mat4.translate(u, u, e.vec3.fromValues(t, n, 0)), (r != 1 || i != 1) && e.mat4.scale(u, u, e.vec3.fromValues(r, i, 1))), u
			},
			setupObjectZoom: function(t, n, r) {
				if (r == 1) return null;
				var i = this.mVPMatrix;
				t -= this.renderer.camera.rx, n -= this.renderer.camera.ry;
				var s = e.mat4.clone(this.mVPMatrix);
				return e.mat4.translate(s, s, e.vec3.fromValues(t, n, 0)), e.mat4.scale(s, s, e.vec3.fromValues(r, r, 1)), e.mat4.translate(s, s, e.vec3.fromValues(-t, -n, 0)), this.mVPMatrix = s, this.newWorldTransform = s, i
			},
			restoreZoom: function(e) {
				if (!e) return;
				this.mVPMatrix = e, this.newWorldTransform = e
			},
			bindBuffers: function(e, t) {
				this.contextGL.bindBuffer(this.contextGL.ARRAY_BUFFER, e), this.contextGL.vertexAttribPointer(this.mShaderVertexPositionAttribute, 2, this.contextGL.FLOAT, !1, 0, 0), this.contextGL.bindBuffer(this.contextGL.ARRAY_BUFFER, t), this.contextGL.vertexAttribPointer(this.mShaderTextureCoordAttribute, 2, this.contextGL.FLOAT, !1, 0, 0)
			},
			setAmbientColor: function(e, t, n) {
				this.ambientColor = [e, t, n, 1]
			},
			setColor: function(e, t) {
				if (!e) return null;
				if (!t && "" + e == "" + this.currentColor) return e;
				var n = this.currentColor;
				return this.currentColor = e, t ? this.contextGL.uniform4fv(this.mPixelColor, e) : this.newColor = e, n ? n : [1, 1, 1, 1]
			},
			setBlendMode: function(e, t) {
				if (e == this.blendMode && !t) return;
				if (t) switch (e) {
					case "add":
						this.contextGL.blendFunc(this.contextGL.SRC_ALPHA, this.contextGL.ONE);
						break;
					case "subtract":
						this.contextGL.blendFunc(this.contextGL.ZERO, this.contextGL.ONE_MINUS_SRC_ALPHA);
						break;
					default:
						this.contextGL.blendFunc(this.contextGL.SRC_ALPHA, this.contextGL.ONE_MINUS_SRC_ALPHA)
				} else this.newBlendMode = e;
				this.blendMode = e
			},
			deleteTexture: function(e) {
				this.contextGL.deleteTexture(e)
			},
			drawImage: function(e, t, n, r, i, s) {
				if (!e || !this.bindTexture(e)) return;
				if (!r) r = [0, 0, e.image.width, e.image.height];
				else if (r[0] < 0 || r[1] < 0 || r[0] + r[2] > e.image.width || r[1] + r[3] > e.image.height) return;
				this.addImageToStack(e, r, this.getXform(t - this.renderer.camera.rx, n - this.renderer.camera.ry, r[2], r[3], i, s))
			},
			drawImageAt: function(e, t, n) {
				if (!e || !this.bindTexture(e)) return;
				n || (n = [0, 0, e.image.width, e.image.height]), this.addImageToStack(e, n, this.getXform(t.x, t.y, t.w, t.h))
			},
			addImageToStack: function(e, t, n) {
				if (this.imageStack.length >= 1e4) return;
				this.imageStack.push({
					i: e,
					t: t,
					m: n,
					b: this.newBlendMode,
					c: this.newColor,
					w: this.newWorldTransform
				}), this.newBlendMode = this.newColor = this.newWorldTransform = null
			},
			flushImageStack: function() {
				if (this.imageStack.length <= 0) return;
				var t = new Float32Array(this.imageStack.length * 8),
					n = 0;
				for (var r = 0; r < this.imageStack.length; r++) {
					var i = this.imageStack[r];
					t[n++] = 0, t[n++] = 0, t[n++] = 1, t[n++] = 0, t[n++] = 0, t[n++] = 1, t[n++] = 1, t[n++] = 1, e.vec2.forEach(t, 2, n - 8, 4, e.vec2.transformMat4, i.m)
				}
				this.contextGL.bindBuffer(this.contextGL.ARRAY_BUFFER, this.gSquareVertexBuffer), this.contextGL.vertexAttribPointer(this.mShaderVertexPositionAttribute, 2, this.contextGL.FLOAT, !1, 0, 0), this.contextGL.bufferData(this.contextGL.ARRAY_BUFFER, t, this.contextGL.STATIC_DRAW);
				var s = new Float32Array(this.imageStack.length * 8);
				n = 0;
				for (var r = 0; r < this.imageStack.length; r++) {
					var i = this.imageStack[r],
						o = 1 / i.i.image.width,
						u = 1 / i.i.image.height;
					s[n++] = i.t[0] * o, s[n++] = i.t[1] * u, s[n++] = (i.t[0] + i.t[2]) * o, s[n++] = i.t[1] * u, s[n++] = i.t[0] * o, s[n++] = (i.t[1] + i.t[3]) * u, s[n++] = (i.t[0] + i.t[2]) * o, s[n++] = (i.t[1] + i.t[3]) * u
				}
				this.contextGL.bindBuffer(this.contextGL.ARRAY_BUFFER, this.mTextureCoordBuffer), this.contextGL.vertexAttribPointer(this.mShaderTextureCoordAttribute, 2, this.contextGL.FLOAT, !1, 0, 0), this.contextGL.bufferData(this.contextGL.ARRAY_BUFFER, s, this.contextGL.STATIC_DRAW);
				for (var r = 0; r < this.imageStack.length; r++) {
					var i = this.imageStack[r];
					if (i.b) switch (i.b) {
						case "add":
							this.contextGL.blendFunc(this.contextGL.SRC_ALPHA, this.contextGL.ONE);
							break;
						case "subtract":
							this.contextGL.blendFunc(this.contextGL.ZERO, this.contextGL.ONE_MINUS_SRC_ALPHA);
							break;
						default:
							this.contextGL.blendFunc(this.contextGL.SRC_ALPHA, this.contextGL.ONE_MINUS_SRC_ALPHA)
					}
					i.c && this.contextGL.uniform4fv(this.mPixelColor, i.c), i.w && this.contextGL.uniformMatrix4fv(this.mWorldTransform, !1, i.w);
					if (!this.bindTexture(i.i)) continue;
					this.contextGL.drawArrays(this.contextGL.TRIANGLE_STRIP, r * 4, 4)
				}
				this.imageStack = [], this.newBlendMode = null, this.newColor = null
			},
			drawTilesBuffers: function(t) {
				var n = this.renderer.game.mapmanager.currentmap;
				if (!n) return !1;
				if (!n.layervertices || n.layervertices.length <= 0) return !1;
				if (t && this.countDrawOverLayers <= 0) return !1;
				this.flushImageStack(), this.setBlendMode("normal", !0), this.setColor(this.getCurrentAmbientColor(), !0);
				var r = Math.floor((n.terrainrenderoffset.x - this.renderer.camera.rx) * 1),
					i = Math.floor((n.terrainrenderoffset.y - this.renderer.camera.ry) * 1);
				this.setupViewProjection(), e.mat4.translate(this.mVPMatrix, this.mVPMatrix, e.vec3.fromValues(r, i, 0)), this.contextGL.uniformMatrix4fv(this.mWorldTransform, !1, this.mVPMatrix), this.bindBuffers(n.tilebuffers.vertices, n.tilebuffers.texcoords);
				for (var s in n.layervertices) {
					var o = n.layervertices[s];
					if (o.drawover != t) continue;
					if (!this.bindTexture(n.getTilesetForLayer(o.layer))) continue;
					this.contextGL.drawArrays(this.contextGL.TRIANGLES, o.offset, o.count)
				}
				return this.setupViewProjection(), this.contextGL.uniformMatrix4fv(this.mWorldTransform, !1, this.mVPMatrix), !0
			},
			bindTexture: function(e) {
				if (e == this.boundinfo) return !0;
				if (!e || !e.image) return !1;
				if (!e.texture) {
					e.texture = this.loadGLTexture(e.image);
					if (!e.texture) return e.image = null, !1
				}
				return this.contextGL.bindTexture(this.contextGL.TEXTURE_2D, e.texture), this.boundinfo = e, !0
			},
			drawDarkHole: function() {
				var e = this.renderer,
					t = e.getBlackImage(),
					n = {
						x: -16,
						y: -16,
						w: this.getWidth() + 32,
						h: this.getHeight() + 32
					};
				if (!e.game.player) {
					this.drawImageAt(t, n);
					return
				}
				var r = {
						x: e.game.player.x - e.camera.rx + e.tilesize / 2,
						y: e.game.player.y - e.camera.ry
					},
					i = 128,
					s = {
						x: r.x - i,
						y: r.y - i,
						w: i * 2,
						h: i * 2
					};
				s.y > n.y && this.drawImageAt(t, {
					x: n.x,
					y: n.y,
					w: n.w,
					h: s.y - n.y
				}), s.x > n.x && this.drawImageAt(t, {
					x: n.x,
					y: s.y - 16,
					w: s.x - n.x,
					h: s.h + 32
				}), s.x + s.w < n.x + n.w && this.drawImageAt(t, {
					x: s.x + s.w,
					y: s.y - 16,
					w: n.x + n.w - (s.x + s.w),
					h: s.h + 32
				}), s.y + s.h < n.y + n.h && this.drawImageAt(t, {
					x: n.x,
					y: s.y + s.h,
					w: n.w,
					h: n.y + n.h - (s.y + s.h)
				}), this.drawImageAt(e.getImage("../files/gui/hole_image.png"), s)
			},
			drawDarkEffect: function(e) {
				var t = this.renderer,
					n = {
						x: -16,
						y: -16,
						w: this.getWidth() + 32,
						h: this.getHeight() + 32
					},
					r = this.setColor([1, 1, 1, e]);
				this.drawImageAt(t.getBlackImage(), n), this.setColor(r)
			}
		});
		return t
	}), define("renderer", ["camera", "context2d", "context3d"], function(e, t, n) {
		var r = Class.extend({
			init: function(e, t, n, r) {
				this.game = e, this.canvas = t, this.backcanvas = n, this.mapmovegap = 64, this.tilesize = 32, this.isMobile = window.navigator && window.navigator.userAgent.match(/(iPad|iPhone|iPod|Android|webOS|BlackBerry|Windows Phone)/g) ? !0 : !1, this.zoom = this.isMobile ? 2 : 1, this.images = {}, this.customtextures = {}, this.initContext(r), this.rescale(), this.setFontSize(16), this.lastTime = new Date, this.frameCount = 0
			},
			getWidth: function() {
				return this.context.getWidth()
			},
			getHeight: function() {
				return this.context.getHeight()
			},
			getTileWidth: function() {
				return this.context.getTileWidth()
			},
			getTileHeight: function() {
				return this.context.getTileHeight()
			},
			hideConnectingMessage: function() {
				this.backcanvas && (this.backcanvas.style.background = "none")
			},
			rescale: function() {
				this.createCamera(), this.context.rescale()
			},
			createCamera: function() {
				this.camera = new e(this.game), this.context.updateCameraSize(), this.game.mapmanager && this.game.mapmanager.currentmap && (this.game.mapmanager.currentmap.terrainrenderoffset = {
					x: 0,
					y: 0
				})
			},
			setFontSize: function(e) {
				this.fontSize = e, this.currentFont = "bold " + e + "px Coolvetica", this.emojiFont = "" + e + "px Coolvetica"
			},
			drawTextCached: function(e, t, n, r, i, s) {
				if (!t || t.length <= 0) return;
				t = this.unescapeHTMLChars(t);
				if (!e || !e.image || e.text != t) e = {
					text: t,
					image: this.createTextCanvas(t, i, s)
				};
				i.centered && (n -= e.image.width / 2);
				var o = e.image.height - (i.withArrow ? 10 : 0);
				r -= o, i.keepInScreen && (n = Math.max(0, Math.min(n - this.camera.rx, this.getWidth() - e.image.width)) + this.camera.rx, r = Math.max(0, Math.min(r - this.camera.ry, this.getHeight() - o)) + this.camera.ry);
				var u = this.context.setColor([1, 1, 1, 1]);
				return this.drawImage(e, Math.floor(n), Math.floor(r)), this.context.setColor(u), e
			},
			unescapeHTMLChars: function(e) {
				return e.replace(/&amp;/g, "&").replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&#34;/g, '"')
			},
			createCanvas: function(e, t) {
				var n = document.createElement("canvas");
				if (e != 1 || t != 1) n.width = e, n.height = t;
				return n
			},
			createTextCanvas: function(e, t, n) {
				var r = t.fontSize ? t.fontSize : this.fontSize,
					i = 5,
					s = 10,
					o = t.outlineWidth ? t.outlineWidth : 5;
				this.measureCanvas || (this.measureCanvas = this.createCanvas(1, 1), this.measureContext = this.measureCanvas.getContext("2d"));
				var u = e.split(/([\uD800-\uDBFF][\uDC00-\uDFFF])/).length > 1,
					a = t.fontSize ? (t.bold ? "bold " : "") + t.fontSize + "px Coolvetica" : u ? this.emojiFont : this.currentFont;
				this.measureContext.font = a;
				var f = (new Date).getTime(),
					l, c, h;
				t.maxWidth ? (h = this.wrapText(this.measureContext, e, t.maxWidth, Math.ceil(r * 1.1), t.maxLines), l = Math.ceil(h.width + o * 2), c = h.height + i) : (l = Math.ceil(this.measureContext.measureText(e).width + o * 2), c = r + i), t.fillColor && t.withArrow && (c += s);
				if (n && this.game.client) {
					var p = (new Date).getTime() - f;
					p > 50 && this.game.client.sendLagLog("chat", p, n, e)
				}
				var d = this.createCanvas(l, c),
					v = d.getContext("2d");
				v.mozImageSmoothingEnabled = !1, v.font = a, t.fillColor && (v.fillStyle = t.fillColor, this.roundRect(v, 0, 0, l, c, 8, !0, !1, t.withArrow ? {
					x: l / 2,
					w: s / 2,
					h: s
				} : null)), t.strokeColor && !h && (v.strokeStyle = t.strokeColor, v.lineWidth = o, v.strokeText(e, o, r + .5)), v.fillStyle = t.color;
				if (h)
					for (var m in h.lines) {
						var g = h.lines[m];
						r + g.y < c && v.fillText(g.text, o + (t.centered ? Math.floor((h.width - g.width) / 2) : 0), r + g.y)
					} else v.fillText(e, o, r);
				return d
			},
			roundRect: function(e, t, n, r, i, s, o, u, a) {
				var f = i - (a ? a.h : 0);
				e.beginPath(), e.moveTo(t + s, n), e.lineTo(t + r - s, n), e.quadraticCurveTo(t + r, n, t + r, n + s), e.lineTo(t + r, n + f - s), e.quadraticCurveTo(t + r, n + f, t + r - s, n + f), a && (e.lineTo(a.x + a.w, n + f), e.lineTo(a.x, n + i), e.lineTo(a.x - a.w, n + f)), e.lineTo(t + s, n + f), e.quadraticCurveTo(t, n + f, t, n + f - s), e.lineTo(t, n + s), e.quadraticCurveTo(t, n, t + s, n), e.closePath(), o && e.fill(), u && e.stroke()
			},
			wrapText: function(e, t, n, r, i) {
				var s = e.measureText(t);
				if (s.width <= n) return {
					lines: [{
						text: t,
						y: 0,
						width: s.width
					}],
					width: s.width,
					height: r
				};
				var o = [],
					u = "",
					a = 0,
					f = 0,
					l = 0,
					c = t.split(" ");
				for (var h = 0; h < c.length && h < 100; h++) {
					var p = c[h],
						d = e.measureText(p);
					if (d.width > n) {
						var v = 0,
							m = p.length;
						for (var g = 0; g < 1e3; g++) {
							var y = v + Math.floor((m - v) / 2),
								b = c[h].substring(0, y);
							if (y <= v) {
								p = b;
								break
							}
							d = e.measureText(b), d.width > n ? m = y : v = y
						}
					}
					c[h] != p && (c.splice(h + 1, 0, c[h].substr(p.length)), c[h] = p), p = u + c[h];
					var w = e.measureText(p);
					w.width > n && h > 0 ? (o.push({
						text: u.trim(),
						y: l,
						width: f
					}), a = Math.max(a, f), u = c[h] + " ", f = d.width, l += r) : (u = p + " ", f = w.width)
				}
				return o.push({
					text: u.trim(),
					y: l,
					width: f
				}), a = Math.max(a, f), i && o.length > i && (o = o.slice(0, i)), {
					lines: o,
					width: a,
					height: o.length * r
				}
			},
			drawEntities: function() {
				this.game.forEachVisibleEntityByDepth(this.camera, function(e) {
					e.drawEntity()
				})
			},
			drawProjectiles: function() {
				this.game.mapmanager.currentmap.projectiles.drawProjectiles()
			},
			isIntersecting: function(e, t) {
				return !(t.left > e.right || t.right < e.left || t.top > e.bottom || t.bottom < e.top)
			},
			drawTiles: function() {
				this.game.mapmanager && this.game.mapmanager.drawTiles()
			},
			drawKillerInfos: function() {
				if (this.game.infoManager.killerinfos.length <= 0) return;
				var e = this.game.animationmanager,
					t = this.game.infoManager.killerinfos,
					n = this.game.currentTime,
					r = this.getImage(e.getGraphic(null, "../gui/bbuilder_x_red.png")),
					i = this.getImage(e.getGraphic(null, "../gui/bbuilder_x_green.png"));
				for (var s = t.length - 1; s >= 0; s--) {
					var o = t[s];
					if (n >= o.time + 3e3) {
						t.splice(s, 1);
						continue
					}
					var u = Math.floor(o.x),
						a = Math.floor(o.y - 48 - (n - o.time) / 100);
					this.drawImage(this.getImage(e.getGraphic(o.killer, "HEAD")), u - 28, a, [96, 0, 48, 48], [.75, .75]), this.drawImage(this.getImage(e.getGraphic(o.killer, "HAT")), u - 28, a - 16, [96, 0, 48, 72], [.75, .75]), this.drawImage(this.getImage(e.getGraphic(o.victim, "HEAD")), u + 12, a, [96, 0, 48, 48], [-0.75, .75]), this.drawImage(this.getImage(e.getGraphic(o.victim, "HAT")), u + 12, a - 16, [96, 0, 48, 72], [-0.75, .75]), this.drawImage(o.isfriend ? r : i, u + 12, a, [0, 0, 48, 48], [.75, .75])
				}
			},
			drawCombatInfo: function() {
				this.context.drawCombatInfo()
			},
			updateTiles: function(e) {
				var t = this.game.mapmanager.currentmap;
				if (!t) return;
				t.checkTilesetsLoaded();
				if (!t.isLoaded || !this.game.player) return;
				this.camera.lookAt(this.game.player);
				var n = this.context.getTileBorder();
				if (e || !t.terrainrenderoffset || this.camera.x < t.terrainrenderoffset.x || this.camera.x >= t.terrainrenderoffset.x + n || this.camera.y < t.terrainrenderoffset.y || this.camera.y >= t.terrainrenderoffset.y + n) t.terrainrenderoffset = {
					x: Math.floor(this.camera.x / n) * n,
					y: Math.floor(this.camera.y / n) * n
				}, this.drawTiles();
				this.context.updateTileOffset()
			},
			initContext: function(e) {
				var r = null;
				if (e) {
					var i = {
						alpha: !1,
						antialias: !1,
						depth: !1,
						stencil: !1
					};
					r = this.canvas.getContext("webgl", i) || this.canvas.getContext("experimental-webgl", i)
				}
				r ? (this.backcanvas && (this.backcanvas.style.display = "none"), this.context = new n(this, r)) : (e && window.console && console.log("Cannot initialize WebGL"), this.backcanvas && this.backcanvas.style && (this.backcanvas.style.display = "block"), this.context = new t(this, this.canvas.getContext("2d"), this.backcanvas ? this.backcanvas.getContext("2d") : null))
			},
			renderFrame: function() {
				this.updateTiles(), this.context.setupForRender(), this.renderchats = [];
				var e = this.game.mapmanager.currentmap;
				e && this.game.app.config.noguimaps.indexOf(e.mapname) < 0 && (this.drawEntities(), this.drawKillerInfos(), this.drawCombatInfo(), this.drawProjectiles()), e && e.properties.darkeffect && this.context.drawDarkEffect(parseFloat(e.properties.darkeffect)), this.context.drawDrawOverTiles(), e && e.properties.cutouthole && this.context.drawDarkHole(), this.context.setColor([1, 1, 1, 1]), this.renderchats.length > 0 && this.drawChats(), this.game.animationmanager.drawWeather(), this.context.cleanUpRender(), this.cleanupTextures()
			},
			drawChats: function() {
				for (var e in this.renderchats) {
					var t = this.renderchats[e];
					t.drawChat()
				}
				this.renderchats = []
			},
			getImage: function(e, t) {
				if (!e) return null;
				var n = this.customtextures[e];
				if (n) return this.getCurrentAnimationFrame(n);
				var r = this.images[e];
				if (r) return r.lastaccess = this.game.currentTime, t && (r.istileset = !0), !r.image || r.loading ? null : this.getCurrentAnimationFrame(r);
				if (this.getFileNameFromPath(e).indexOf(".") < 0) return null;
				var r = {
					filename: e,
					image: new Image,
					loading: !0,
					lastaccess: this.game.currentTime,
					istileset: t
				};
				this.images[e] = r;
				var i = this;
				r.image.onload = function() {
					r.loading = !1
				}, r.image.onerror = function() {
					r.loading = !1, r.image = null
				};
				if (e.indexOf(".gif") >= 0) this.loadGif(r);
				else if (e.indexOf("?") < 0) {
					var s = this.game.mapmanager.getTimeHash();
					r.image.src = e + (s ? "?t=" + s : "")
				} else r.image.src = e;
				return r.loading ? null : this.getCurrentAnimationFrame(r)
			},
			getFileNameFromPath: function(e) {
				return e.replace(/^.*[\\\/]/, "")
			},
			cleanupTextures: function() {
				for (var e in this.images) {
					var t = this.images[e];
					if (t.istileset || t.lastaccess > this.game.currentTime - 5e3) continue;
					t.texture && (this.context.deleteTexture(t.texture), delete t.texture), t.image && (t.image.onload = null, t.image.onerror = null, delete t.image), delete this.images[e]
				}
			},
			drawImage: function(e, t, n, r, i, s, o) {
				this.context.drawImage(e, t, n, r, i, s, o)
			},
			loadGif: function(e) {
				var t = this;
				gui.ajax(e.filename, !1, function(n) {
					t.loadGifData(e, n)
				}, function(t, n, r) {
					window.console && console.log("Loading gif " + e.filename + " failed: " + r)
				}, "text/plain; charset=x-user-defined")
			},
			loadGifData: function(e, t) {
				var n = {
						frames: [],
						frame: null,
						header: null,
						lastImg: null,
						canvas: null,
						disposalRestoreFromIdx: null
					},
					r = this;
				try {
					parseGIF(new Stream(t), {
						hdr: function(e) {
							n.header = e, n.canvas = r.createCanvas(n.header.width, n.header.height)
						},
						gce: function(e) {
							n.frame = {
								width: n.header.width,
								height: n.header.height,
								transparentIndex: e.transparencyGiven ? e.transparencyIndex : null,
								delay: Math.max(50, e.delayTime * 10),
								disposalMethod: e.disposalMethod
							}
						},
						com: function() {},
						app: {
							NETSCAPE: function(e) {}
						},
						img: function(e) {
							if (!n.frame || !n.canvas) return;
							var t = n.canvas.getContext("2d"),
								r = e.lctFlag ? e.lct : n.header.gct,
								i = n.frames.length;
							if (i > 0) {
								var s = n.lastImg;
								n.frames[i - 1].disposalMethod === 3 ? n.disposalRestoreFromIdx !== null ? t.putImageData(n.frames[disposalRestoreFromIdx].image, 0, 0) : t.clearRect(s.leftPos, s.topPos, s.width, s.height) : n.disposalRestoreFromIdx = i - 1, n.frames[i - 1].disposalMethod === 2 && t.clearRect(s.leftPos, s.topPos, s.width, s.height)
							}
							var o = t.getImageData(e.leftPos, e.topPos, e.width, e.height),
								u = n.frame.transparentIndex;
							e.pixels.forEach(function(e, t) {
								e !== u && (o.data[t * 4 + 0] = r[e][0], o.data[t * 4 + 1] = r[e][1], o.data[t * 4 + 2] = r[e][2], o.data[t * 4 + 3] = 255)
							}), t.putImageData(o, e.leftPos, e.topPos), n.frame.image = t.getImageData(0, 0, n.header.width, n.header.height), n.frame.urldata = n.canvas.toDataURL(), n.frames.push(n.frame), n.lastImg = e
						},
						eof: function(t) {
							n.frames.length > 1 && r.setImageAnimationFrames(e, n.frames), e.loading = !1, n = null
						},
						error: function(t) {
							r.game.client && r.game.client.logError("Gif parse error of " + e.filename + ": " + t), e.loading = !1
						}
					})
				} catch (i) {}
			},
			getCurrentAnimationFrame: function(e) {
				if (!e || !e.frames || e.totalDelay <= 0) return e;
				var t = (this.game.currentTime - e.loadTime) % e.totalDelay,
					n = 0;
				for (var r = 0; r < e.frames.length; r++) {
					var i = e.frames[r];
					if (t < n + i.delay) return i;
					n += i.delay
				}
				return e.frames[0]
			},
			setImageAnimationFrames: function(e, t) {
				e.frames = t, e.loadTime = (new Date).getTime(), e.totalDelay = 0;
				for (var n = 0; n < e.frames.length; n++) {
					var r = e.frames[n];
					e.totalDelay += r.delay, r.urldata && (r.image = new Image, r.image.src = r.urldata, r.urldata = null)
				}
			},
			getBlackImage: function() {
				if (this.blackimage) return this.blackimage;
				var e = 16,
					t = this.createCanvas(e, e);
				if (!t) return;
				var n = t.getContext("2d");
				return n.fillStyle = "black", n.fillRect(0, 0, e, e), this.blackimage = {
					image: t
				}, this.blackimage
			}
		});
		return r
	}), define("entity", [], function() {
		var e = Class.extend({
			init: function(e, t) {
				var n = this;
				this.id = e, this.kind = t, this.initializeAnimationInfo(), this.tileWidth = 1, this.tileHeight = 1, this.arrow = "bbuilder_arrow1.png", this.argObjects = [], this.setGridPosition(0, 0), this.z = 0, this.zoom = 1, this.angle = 0, this.visible = !0
			},
			setExtendedData: function(e) {
				if (!e) return;
				var t = e.x || e.y,
					n = !1;
				for (var r in e) r != "ani" && (this[this._mapServerAttributeToClient(r)] = e[r]), r.startsWith && r.startsWith("arg") && (n = !0);
				"ani" in e && this.setAnimation(e.ani, !1, !0), "chat" in e && (this.chat = "" + this.chat, this.showChat("" + e.chat)), "stealth" in e && this.nameCache && delete this.nameCache, typeof e.name == "string" && this.onNameUpdated(), n && this.updateArgAnimations(), t && this.setGridPosition(this.gridX, this.gridY)
			},
			updateArgAnimations: function() {
				for (var e = 0; e <= 9; e++) {
					var t = "arg" + e;
					if (!this[t] || typeof this[t] != "string" || !this[t].endsWith(".bani")) {
						delete this.argObjects[e];
						continue
					}
					var n = this[t].substr(0, this[t].length - ".bani".length);
					if (this.argObjects[e]) {
						if (this.argObjects[e].animation == n) continue
					} else this.argObjects[e] = this.getEmptyAnimationInfo();
					this.setNewAnimationInfo(this.argObjects[e], n, null, !0, null, [])
				}
			},
			_mapServerAttributeToClient: function(e) {
				return e == "x" ? "gridX" : e == "y" ? "gridY" : e == "class" ? "npcclass" : e == "clanname" ? "shopclan" : e
			},
			prepareRemoveFromMap: function() {
				this.stopMoveInterpolation(), this.countdownTimer && (clearInterval(this.countdownTimer), this.countdownTimer = null), delete this.scriptObject, this.game && (this.game.mapmanager.removeFromActiveObjects(this), this.game.infoManager && this.game.infoManager.removeInGameDom(this.id))
			},
			setPosition: function(e, t) {
				this.x = e, this.y = t
			},
			setGridPosition: function(e, t) {
				this.gridX = e, this.gridY = t, this.setPosition(e * 32, t * 32), this.game && this.game.infoManager && this.game.infoManager.updateInGamePos(this.id)
			},
			getHead: function() {
				return this.head
			},
			setHead: function(e) {
				this.head = e
			},
			getHat: function() {
				return this.hat
			},
			setHat: function(e) {
				this.hat = e
			},
			getArmor: function() {
				return this.armor
			},
			setArmor: function(e) {
				this.armor = e
			},
			getWeapon: function() {
				return this.weapon
			},
			setWeapon: function(e) {
				this.weapon = e
			},
			hasWeapon: function() {
				return this.weapon != null
			},
			onNameUpdated: function() {
				this.clanname = this.game.getClanFromName(this.name), delete this.nameCache
			},
			initializeAnimationInfo: function() {
				this.animationInfo = this.getEmptyAnimationInfo()
			},
			getEmptyAnimationInfo: function() {
				return {
					animation: null,
					frame: 0,
					dontProceed: !1,
					lastAnimationTime: 0,
					direction: Types.Directions.DOWN,
					emitterTime: {},
					params: []
				}
			},
			getAnimation: function(e) {
				var t = this.animationInfo.animation;
				return e && (this.animationInfo.dontProceed && (t += "[" + this.animationInfo.frame + "]"), this.animationInfo.params.length > 0 && (t += "," + this.animationInfo.params)), t
			},
			setAnimation: function(e, t, n) {
				var r = null,
					i = [];
				if (typeof e == "number") e = this.game.animationmanager.decode(e);
				else if (e) {
					i = e.split(","), i.length >= 1 && (e = i.shift());
					var s = e.indexOf("[");
					s >= 0 && e.endsWith("]") && (r = parseInt(e.substring(s + 1, e.length - 1)), e = e.substring(0, s))
				}
				if (this.game && e == this.animationInfo.animation) {
					var o = this.game.animationmanager.loadAnimation(e);
					if (o && o.isLoaded && o.options.continuous) {
						this.animationInfo.isexternal = n;
						return
					}
				}
				if (!e && e !== "") return;
				if (e.indexOf("_idle") >= 0 && this.animationInfo.isexternal && !n) return;
				this.setNewAnimationInfo(this.animationInfo, e, this.currentAnimation, n, r, i), this.onAnimationChanged(t)
			},
			setNewAnimationInfo: function(e, t, n, r, i, s) {
				e.animation = t, e.animation.length <= 0 && delete e.animation, e.frame = i !== null ? i : 0, e.dontProceed = i !== null, e.params = s, e.frameDuration = null, e.lastAnimationTime = this.game ? this.game.currentTime : (new Date).getTime(), e.emitterTime = {}, e.playedSound = !1, n && n.options && n.options.particlescontinueafterdeath || (e.particles = null), e.isexternal = r
			},
			animateAsPlayer: function(e, t) {
				var n = e == "idle" || e == "walk" || e == "death" ? "player_" + e : e;
				n = this.makeSwimOrSit(n), this.setAnimation(n, t)
			},
			makeSwimOrSit: function(e) {
				if ((e == "player_idle" || e == "player_walk") && this.game) {
					if (this.isInWater() && (!this.mountData || !this.mountData.allowinwater)) return "player_swim";
					if (this.mountData) {
						var t;
						this.carHornTime && this.game.currentTime < this.carHornTime ? t = "horn" : (delete this.carHornTime, t = e == "player_idle" ? "idle" : "walk"), this.mountData["mounttype"] == "car" && this.carLightsOn && this.mountData[t + "_lights"] && (t += "_lights");
						if (this.mountData[t]) return this.mountData[t]
					} else {
						if (this.game.mapmanager.currentmap && this.game.mapmanager.currentmap.isChair(this.gridX + .5, this.gridY + .5)) return "player_sit";
						if (this.weapon && this.weaponMode) {
							var n = e == "player_idle" ? this.weaponMode.idle : this.weaponMode.walk;
							if (n) return n
						}
					}
				}
				return e
			},
			isInWater: function() {
				return this.getAttachedToObject() || !this.game.mapmanager.currentmap ? !1 : this.game.mapmanager.currentmap.isWater(this.gridX + .5, this.gridY + .5)
			},
			onAnimationChanged: function(e) {},
			onAnimate: function() {
				this.animationInfo.direction = Types.convertOrientationToDirection(this.dir);
				if (!this.animationInfo.animation) return;
				var e = this.game.animationmanager.loadAnimation(this.animationInfo.animation);
				if (!e || !e.isLoaded) return;
				this.currentAnimation = e, this.playAniSoundandProceed(e, this.animationInfo, !0)
			},
			playAniSoundandProceed: function(e, t, n) {
				if (!e || !t || !e.frames[t.frame]) return;
				var r = e.frames[t.frame];
				if (!t.playedSound) {
					if (this.game.sounds && r.sound) {
						var i = r.sound.constructor === Array ? r.sound[Math.floor(Math.random() * r.sound.length)] : r.sound;
						(!r.soundchance || Math.random() * 100 < r.soundchance) && this.game.sounds.play(this.replaceSoundArgs(t, i))
					}
					r.emit && e.emitParticlesByList(this, t, r.emit), r.screenshake && this.game.player && this.game.player.addScreenShake && this.game.player.addScreenShake(this, r.screenshake), t.playedSound = !0
				}
				if (!t.dontProceed) {
					var s = this;
					e.checkProceedAnimation(t, function(e) {
						return n ? (s.setAnimation(e, !0), s.currentAnimation = s.game.animationmanager.loadAnimation(s.animationInfo.animation), !0) : !1
					})
				}
			},
			replaceSoundArgs: function(e, t) {
				return t.startsWith("ARG") ? this[t.toLowerCase()] : t.startsWith("PARAM") ? e.params[parseInt(t.substring(5)) - 1] : t
			},
			prepareDrawAnimation: function() {
				var e = this.animationInfo;
				e.direction = Types.convertOrientationToDirection(this.dir);
				if (!this.game || !e.animation) return;
				var t = this.game.animationmanager.loadAnimation(e.animation);
				if (!t || !t.isLoaded) return;
				this.currentAnimation = t, t.options.zoom && (this.zoom = t.options.zoom), t.options.color && (this.color = t.options.color), t.processParticlesAndEmitters(this, e);
				if (!t.frames[e.frame]) return;
				var n = t.frames[e.frame];
				n.zoom && (this.zoom = n.zoom), n.color && (this.color = n.color)
			},
			drawAnimation: function() {
				if (!this.currentAnimation) return;
				this.currentAnimation.drawAnimation(this, this.animationInfo), this.onAnimate()
			},
			drawArgObjects: function() {
				for (var e in this.argObjects) {
					var t = this.argObjects[e],
						n = this.game.animationmanager.loadAnimation(t.animation);
					if (!n || !n.isLoaded) continue;
					n.processParticlesAndEmitters(this, t), n.drawAnimation(this, t), this.playAniSoundandProceed(n, t, !1)
				}
			},
			onActivate: function() {},
			showChat: function(e) {
				var t = this.game.mapmanager.currentmap;
				e && t && (t.isSpar() || t.isPvpEvent()) ? this.chathidetime = this.game.currentTime + 15e3 : delete this.chathidetime, delete this.chatCache;
				if (!this.game) return;
				!this.showEmoticon(e) && this == this.game.player && e && e.length > 0 && e.indexOf("/") != 0 && this.game.invokeScriptEvent("say")
			},
			showEmoticon: function(e) {
				this.emoticonfile = null;
				switch (e ? e.toUpperCase() : null) {
					case ">:(":
					case "X(":
					case "X-(":
						this.emoticonfile = "bbuilder_emoticon_angry.png";
						break;
					case "O-O":
					case "O.O":
						this.emoticonfile = "bbuilder_emoticon_bigeyes.png";
						break;
					case ":cool:":
					case "B)":
					case "B-)":
					case "8)":
					case "8-)":
					case "D)":
					case "D-)":
						this.emoticonfile = "bbuilder_emoticon_cool.png";
						break;
					case "X)":
					case "XD":
					case "X-)":
					case "X-D":
					case "X-X":
					case "X_X":
					case "X.X":
						this.emoticonfile = "bbuilder_emoticon_crosseyes.png";
						break;
					case "&LT;3":
					case "<3":
						this.emoticonfile = "bbuilder_emoticon_heart.png";
						break;
					case "(I)":
						this.emoticonfile = "bbuilder_emoticon_idea.png";
						break;
					case ":*":
					case ":-*":
						this.emoticonfile = "bbuilder_emoticon_kiss.png";
						break;
					case ":)]":
						this.emoticonfile = "bbuilder_emoticon_phone.png";
						break;
					case ":(":
					case ":-(":
						this.emoticonfile = "bbuilder_emoticon_sad.png";
						break;
					case "Z/":
					case "ZZ":
					case "ZZZ":
					case "Z_Z":
						this.emoticonfile = "bbuilder_emoticon_sleep.png";
						break;
					case ":)":
					case ":-)":
					case ":D":
					case ":-D":
						this.emoticonfile = "bbuilder_emoticon_smile.png";
						break;
					case "?(":
					case "?-(":
						this.emoticonfile = "bbuilder_emoticon_sorry.png";
						break;
					case ":_(":
					case ":'(":
						this.emoticonfile = "bbuilder_emoticon_tears.png";
						break;
					case ":P":
					case ":-P":
						this.emoticonfile = "bbuilder_emoticon_tongue.png";
						break;
					case ":|":
					case ":-|":
						this.emoticonfile = "bbuilder_emoticon_widemouth.png";
						break;
					case ";)":
					case ";-)":
						this.emoticonfile = "bbuilder_emoticon_wink.png"
				}
				if (this.game.app.config.extendedemoticons) switch (e ? e.toUpperCase() : null) {
					case ":BRB:":
						this.emoticonfile = "bbuilder_emoticon_brb.png";
						break;
					case ":HELP:":
						this.emoticonfile = "bbuilder_emoticon_help.png";
						break;
					case ":GO:":
						this.emoticonfile = "bbuilder_emoticon_go.png";
						break;
					case ":AFK:":
						this.emoticonfile = "bbuilder_emoticon_afk.png";
						break;
					case ":OK:":
						this.emoticonfile = "bbuilder_emoticon_ok.png"
				}
				return this.emoticonfile && (delete this.chathidetime, this.emoticontime = this.game.currentTime), this.emoticonfile ? !0 : !1
			},
			getControlModeAt: function(e, t) {
				return null
			},
			moveXX: function(e, t, n, r, i, s, o, u, a, f, l) {
				i || (i = this.animationInfo.animation), r || (r = 0), s || (s = 0), o || (o = 0), u || (u = 0), a || (a = 0), this.stopMoveInterpolation(), this.setOrientation(e), this.setAnimation(i, !1);
				if (o > 0) {
					this.moveInfo = {
						delay: o,
						dir: e,
						x: t,
						y: n,
						z: r,
						start: this.game.currentTime,
						defaultanis: (s & Types.AnimationFlags.DEFAULTANIS) != 0,
						angle: u
					}, this.attachTo(a), this.attachInfo && (this.moveInfo.x = this.attachInfo.object.gridX + f, this.moveInfo.y = this.attachInfo.object.gridY + l);
					var c = 1e3 / this.game.fps,
						h = this;
					this.moveinterval = setInterval(function() {
						h.updateMoveInterpolation()
					}, c);
					if (this.attachedObjects)
						for (var p in this.attachedObjects) {
							var d = this.attachedObjects[p];
							d.getAnimation() && d.getAnimation().indexOf("idle") >= 0 && d.predictFrames && d.attachInfo && this.game.client.sendMoveXX(d.dir, this.gridX + d.attachInfo.gridX, this.gridY + d.attachInfo.gridY, d.z, d.getAnimation(!0), Types.AnimationFlags.PREDICT, 0, d.angle)
						}
				} else this.z = r, this.setGridPosition(t, n), this.angle = u, this.attachTo(a), this.attachInfo && (this.attachInfo.gridX = f, this.attachInfo.gridY = l), this.onHasMoved()
			},
			onHasMoved: function() {},
			updateMoveInterpolation: function() {
				if (!this.moveInfo) return;
				var e = 1e3 / this.game.fps;
				if (this.moveInfo.delay <= e) {
					this.moveInfo.defaultanis && this.animateAsPlayer("idle", !1), this.moveXX(this.moveInfo.dir, this.moveInfo.x, this.moveInfo.y, this.moveInfo.z, this.getAnimation(!0), 0, 0, this.moveInfo.angle);
					return
				}
				var t = Math.ceil(this.moveInfo.delay / e),
					n = (this.moveInfo.x - this.gridX) / t,
					r = (this.moveInfo.y - this.gridY) / t,
					i = this.z + (this.moveInfo.z - this.z) / t,
					s = Math.abs(this.angle - this.moveInfo.angle) > Math.PI ? this.angle + 2 * Math.PI * (this.angle >= Math.PI ? -1 : 1) : this.angle,
					o = s + (this.moveInfo.angle - s) / t;
				for (var u = 0; u < this.attachedObjects.length; u++) {
					var a = this.attachedObjects[u];
					a.attachInfo && a.setNewAttachPosition(this.gridX + a.attachInfo.gridX, this.gridY + a.attachInfo.gridY), a.moveprediction && (a.moveprediction.x += n, a.moveprediction.y += r)
				}
				this.setOrientation(this.moveInfo.dir), this.setGridPosition(this.gridX + n, this.gridY + r), this.updateAttachPosition(), this.z = i, this.angle = o, this.moveInfo.defaultanis && this.animateAsPlayer("walk", !1), this.onHasMoved(), Math.abs(o - s) > .01 && this.getAnimation() && this.getAnimation().indexOf("car") == 0 && (this.carSkidTime = this.game.currentTime), this.moveInfo.delay -= e
			},
			stopMoveInterpolation: function() {
				this.moveinterval && (clearInterval(this.moveinterval), this.moveinterval = null), this.moveInfo = null
			},
			attachTo: function(e) {
				var t = this.getAttachID();
				if (e == t) return !1;
				var n = this.attachInfo ? this.attachInfo.object : null;
				if (n) {
					var r = n.attachedObjects.indexOf(this);
					r >= 0 && n.attachedObjects.splice(r, 1)
				}
				return this.attachInfo = null, e > 0 && (this.attachInfo = {
					id: e
				}, this.linkAttachedToObject()), !0
			},
			getAttachID: function() {
				return this.attachInfo ? this.attachInfo.id : 0
			},
			getAttachedToObject: function() {
				return this.attachInfo ? this.attachInfo.object : null
			},
			linkAttachedToObject: function() {
				if (!this.attachInfo || this.attachInfo.object) return;
				var e = this.game.getEntityById(this.attachInfo.id);
				if (!e) return;
				e.attachedObjects.indexOf(this) < 0 && e.attachedObjects.push(this), this.attachInfo.object = e, this.attachInfo.gridX = this.gridX - e.gridX, this.attachInfo.gridY = this.gridY - e.gridY
			},
			updateAttachPosition: function() {
				if (!this.attachInfo || !this.attachInfo.object) return;
				this.attachInfo.gridX = this.gridX - this.attachInfo.object.gridX, this.attachInfo.gridY = this.gridY - this.attachInfo.object.gridY
			},
			isInRectangle: function(e) {
				return this.gridX >= e.x && this.gridX < e.x + e.w && this.gridY >= e.y && this.gridY < e.y + e.h
			},
			setOrientation: function(e) {
				e && (this.dir = e)
			},
			isOnMount: function() {
				return this.mountData != null || this.getAnimation() && this.getAnimation().indexOf("mount_") == 0
			}
		});
		return e
	}), define("character", ["entity"], function(e) {
		var t = e.extend({
			init: function(t, n) {
				e.prototype.init.call(this, t, n), this.dir = Types.Orientations.DOWN, this.sidekickpositions = [], this.attachedObjects = [], this.tileType = null
			},
			setDefaultAnimation: function() {
				this.idle()
			},
			animate: function(e, t) {
				this.setAnimation(e, t)
			},
			turnTo: function(e) {
				e != this.dir && (this.dir = e, this.idle())
			},
			idle: function(e) {
				this.setOrientation(e), this.animate("idle", !0)
			},
			isHittingAnimation: function() {
				return this.animationInfo && this.animationInfo.animation && (this.animationInfo.animation.indexOf("_atk") >= 0 || this.animationInfo.animation.indexOf("attack") >= 0)
			},
			isFreezing: function() {
				return this.attackfreezetime && this.game.currentTime < this.attackfreezetime
			},
			isFiring: function() {
				return this.attackfiretime && this.game.currentTime < this.attackfiretime
			},
			isReloading: function() {
				return this.attackreloadtime && this.game.currentTime < this.attackreloadtime
			},
			getOrientationTo: function(e) {
				var t = e.gridX + (e.tileWidth ? e.tileWidth : 1) / 2,
					n = e.gridY + (e.tileHeight ? e.tileHeight : 1) / 2;
				return this.getOrientationToPos(t - .5, n - .5)
			},
			getOrientationToPos: function(e, t) {
				var n = e - this.gridX,
					r = t - this.gridY;
				return n > 0 ? Types.Orientations.RIGHT : r > 0 ? Types.Orientations.DOWN : n < 0 ? Types.Orientations.LEFT : r < 0 ? Types.Orientations.UP : Types.Orientations.DOWN
			},
			getOrientationToPos2: function(e, t) {
				var n = e - this.gridX,
					r = t - this.gridY;
				return Math.abs(n) > Math.abs(r) ? n >= 0 ? Types.Orientations.RIGHT : Types.Orientations.LEFT : r >= 0 ? Types.Orientations.DOWN : Types.Orientations.UP
			},
			getOrientationForAngle: function() {
				return this.angle < Math.PI * 1 / 4 || this.angle >= Math.PI * 7 / 4 ? Types.Orientations.RIGHT : this.angle < Math.PI * 3 / 4 ? Types.Orientations.UP : this.angle < Math.PI * 5 / 4 ? Types.Orientations.LEFT : Types.Orientations.DOWN
			},
			showCurrentHitPoints: function() {
				this.maxHitPoints && (this.showHitPoints = {
					points: this.hitPoints / this.maxHitPoints,
					time: this.game.currentTime,
					isRegen: !0
				})
			},
			updateDamage: function(e, t, n, r) {
				e != 0 && this.game.infoManager.addDamageInfo(e, this.x + (this.tileWidth - .5) * this.game.renderer.tilesize / 2 + Math.round((Math.random() - .5) * this.game.renderer.tilesize), this.y - (this.zoom > 1 ? 80 : 32), t), r && (!this.showHitPoints || t != "healed" || this.showHitPoints.isRegen) && (this.showHitPoints = {
					points: n / r,
					time: this.game.currentTime,
					isRegen: t == "healed"
				})
			},
			die: function(e) {
				if (this.isDead) return;
				this.isDead = !0, this.onDeath(e)
			},
			onDeath: function(e) {
				e && this.game.infoManager.addKillerInfo(this, e), this.kind == Types.Entities.NEWNPC && (this.npcclass == "bomb" && this.game.renderer.camera.isVisible(this) && this.game.sounds.play("death"), this.game.removeEntity(this))
			},
			drawName: function() {
				if (!this.name || this.name.length <= 0 || this.game.player && this.game.player.ghost) return;
				if (!this.game.isDrawingNames() && !this.isEventAdmin() && !this.stealth) return;
				var e, t;
				this.stealth ? (e = this.stealth >= 2 ? "#ffa080" : "#80a0ff", t = "#000000") : this.clanname == "Target" ? (e = "#8080ff", t = "#000000") : this.isEventAdmin() ? (e = "#ff0000", t = "#000000") : this == this.game.player ? (e = "#ffe060", t = "#e0c040") : this.game.player && this.clanname && this.clanname == this.game.player.clanname ? (e = "#00ff00", t = "#000000") : (e = "#ffffff", t = "#dfdfdf");
				var n = this.currentAnimation,
					r = n && n.options && "nameoffsety" in n.options ? n.options.nameoffsety : n && n.options && "chatoffsety" in n.options ? n.options.chatoffsety : 45,
					i = this.game.renderer;
				this.nameCache = i.drawTextCached(this.nameCache, this.name, this.x + Math.floor(i.tilesize / 2), this.y + Math.floor(r), {
					centered: !0,
					color: e,
					gradientColor: t,
					strokeColor: "#303030"
				})
			},
			drawEmoticon: function() {
				var e = this.game.animationmanager,
					t = this.game.renderer,
					n = this.game.app.config.emoticonoffset;
				t.drawImage(t.getImage(e.getPathForDefault("EMOTICON") + this.emoticonfile), this.x + n.x, this.y + n.y), this.game.currentTime >= this.emoticontime + 5e3 && (this.emoticonfile = null, this.chat = "")
			},
			drawSpeechBubble: function() {
				var e = this.game.animationmanager.loadAnimation("speechbubble");
				if (!e || !e.isLoaded) return;
				this.speechBubbleAnimationInfo ? e.checkProceedAnimation(this.speechBubbleAnimationInfo) : this.speechBubbleAnimationInfo = this.getEmptyAnimationInfo(), e.drawAnimation({
					x: this.x,
					y: this.y - (this.zoom > 1 ? 48 : this.isOnMount() ? 32 : 0),
					z: 0
				}, this.speechBubbleAnimationInfo)
			},
			drawHealthBar: function() {
				if (!this.showHitPoints) return;
				var e = this.game.renderer,
					t = e.getImage("../files/gui/player_healthbar.png"),
					n = Math.floor(this.x + (this.tileWidth - 1) * e.tilesize / 2),
					r = Math.floor(this.y - (this.zoom > 1 ? 80 : this.isOnMount() ? 74 : 32)),
					i = [0, this.showHitPoints.isRegen ? 16 : 8, 1 + Math.floor(30 * this.showHitPoints.points), 8];
				i[2] >= 2 && e.drawImage(t, n, r, i), e.drawImage(t, n, r, [0, 0, 32, 8]), this.game.currentTime >= this.showHitPoints.time + 5e3 && (this.showHitPoints = null)
			},
			drawEntity: function() {
				var e = this.game.renderer;
				this.prepareDrawAnimation();
				var t = null;
				this.stealth ? t = e.context.setColor([1, 1, 1, .5]) : this.color && (t = e.context.setColor(this.color));
				var n, r = this.sidekick && (!this.game.settings.hidesidekicks || this == this.game.player);
				r && (n = this.getSideKickPosition(), n.y <= this.y && this.drawSideKick(n)), this.mountData || this.drawName();
				var i;
				this.zoom != 1 && (i = e.context.setupObjectZoom(this.x + this.tileWidth * e.tilesize / 2, this.y + this.tileHeight * e.tilesize - 4, this.zoom)), this.drawAnimation(), this.drawArgObjects(), i && e.context.restoreZoom(i), this.mountData && this.drawName(), r && n.y > this.y && this.drawSideKick(n), this.drawTileType(), e.context.setColor(t), this.drawHealthBar(), this.emoticonfile ? this.drawEmoticon() : this.chat && this.chat.length > 0 && (e.renderchats ? e.renderchats.push(this) : this.drawChat()), this.talk && this.drawSpeechBubble()
			},
			drawChat: function() {
				if (this.game.hidechat || this.game.player && this.game.player.ghost) return;
				var e = this.game.renderer,
					t = e.tilesize,
					n = this.x + t / 2;
				this.tileWidth > 1 && (n += (this.tileWidth - 1.5) * t / 2);
				var r = this.y,
					i = this.currentAnimation;
				i && i.options && "chatoffsety" in i.options ? r -= i.options.chatoffsety : (i && (r -= t), this.isOnMount() ? r -= 32 : this.zoom > 1 && (r -= 48));
				var s = e.getWidth();
				this.chatCache = e.drawTextCached(this.chatCache, this.chat, n, r, {
					centered: !0,
					color: "#ffffff",
					gradientColor: "#000000",
					fillColor: "rgba(45,45,45,0.8)",
					fontSize: 18,
					keepInScreen: !0,
					outlineWidth: 12,
					maxWidth: Math.max(Math.min(240, s), Math.min(s / 3, 480)),
					withArrow: !0,
					maxLines: this.kind == Types.Entities.NEWNPC ? 30 : 6
				}, this.id)
			},
			onHasMoved: function() {
				e.prototype.onHasMoved.call(this);
				if (this.sidekick) {
					var t = 5,
						n = 100;
					while (this.sidekickpositions.length > 0) {
						var r = this.sidekickpositions.length - 1,
							i = this.sidekickpositions[r];
						if (!(r >= t || Math.abs(i.x - this.x) + Math.abs(i.y - this.y) >= n)) break;
						this.sidekickpositions.pop()
					}
					this.sidekickpositions.unshift({
						x: this.x,
						y: this.y,
						dir: this.dir
					})
				} else this.sidekickpositions.length > 0 && (this.sidekickpositions = []);
				var s = this.game.renderer.tilesize;
				for (var r = 0; r < this.attachedObjects.length; r++) {
					var o = this.attachedObjects[r];
					o.attachInfo && o.setNewAttachPosition(Math.floor(this.gridX * s) / s + o.attachInfo.gridX, Math.floor(this.gridY * s) / s + o.attachInfo.gridY)
				}
				this.game.mapmanager.currentmap && (this.tileType = this.game.mapmanager.currentmap.getTileType(this.gridX + .5, this.gridY + .5))
			},
			setNewAttachPosition: function(e, t) {
				var n = e - this.gridX,
					r = t - this.gridY;
				this.setGridPosition(e, t);
				var i = this.game.renderer.tilesize;
				for (var s in this.sidekickpositions) {
					var o = this.sidekickpositions[s];
					o.x += n * i, o.y += r * i
				}
			},
			getSideKickPosition: function() {
				return this.sidekickpositions && this.sidekickpositions.length > 0 ? this.sidekickpositions[this.sidekickpositions.length - 1] : {
					x: this.x + 32,
					y: this.y,
					dir: this.dir
				}
			},
			drawSideKick: function(e) {
				if (!this.sidekick) {
					delete this.sidekickAnimationInfo;
					return
				}
				var t = this.getAnimation();
				if (!t) return;
				var n, r;
				typeof this.sidekick == "object" ? (n = this.sidekick, r = this.isIdleAnimation() && this.sidekick.idle ? this.sidekick.idle : this.sidekick.walk ? this.sidekick.walk : this.sidekick.ani ? this.sidekick.ani : this.sidekick.itemid) : (n = {}, r = this.sidekick), n.x = e.x, n.y = e.y, n.z = 0;
				var i = this.game.animationmanager.loadAnimation(r);
				if (!i || !i.isLoaded) return;
				if (t.indexOf("_swim") >= 0 && !i.options.showonwater) return;
				if (!this.sidekickAnimationInfo || this.sidekickAnimationInfo.animation != r || this.isIdleAnimation() && !i.options.animateidle && !n.idle) this.sidekickAnimationInfo = this.getEmptyAnimationInfo(), this.sidekickAnimationInfo.animation = r;
				this.sidekickAnimationInfo.direction = Types.convertOrientationToDirection(e.dir), this.drawDynamicAni(n, r, this.sidekickAnimationInfo)
			},
			isIdleAnimation: function() {
				var e = this.getAnimation();
				return !e || e.indexOf("_idle") >= 0 || e.indexOf("_sit") >= 0 || this.isFreezing()
			},
			drawTileType: function() {
				if (!this.tileType || this.tileType <= Types.TileTypes.GRASS) {
					delete this.tileTypeAnimationInfo;
					return
				}
				var e = [null, null, null, "av_step_sand", null, null, null, "av_step_turf", "av_step_wood", null],
					t = e[this.tileType];
				if (!t) {
					delete this.tileTypeAnimationInfo;
					return
				}
				if (!this.tileTypeAnimationInfo || this.tileTypeAnimationInfo.animation != t) this.tileTypeAnimationInfo = this.getEmptyAnimationInfo(), this.tileTypeAnimationInfo.animation = t;
				this.drawDynamicAni(this, t, this.tileTypeAnimationInfo)
			},
			drawDynamicAni: function(e, t, n) {
				var r = this.game.animationmanager.loadAnimation(t);
				if (!r || !r.isLoaded) return;
				if (!r.frames[n.frame]) return;
				var i = r.frames[n.frame];
				if (!this.isIdleAnimation() && !n.playedSound) {
					if (this.game.sounds && i.sound) {
						var s = i.sound.constructor === Array ? i.sound[Math.floor(Math.random() * i.sound.length)] : i.sound;
						(!i.soundchance || Math.random() * 100 < i.soundchance) && this.game.sounds.play(s)
					}
					i.emit && r.emitParticlesByList(this, n, i.emit), n.playedSound = !0
				}
				var o = this.game.renderer,
					u;
				e.zoom && e.zoom != 1 && (u = o.context.setupObjectZoom(e.x + o.tilesize / 2, e.y + o.tilesize - 4, e.zoom)), r.drawAnimation(e, n), u && o.context.restoreZoom(u), r.checkProceedAnimation(n)
			},
			isEventAdmin: function() {
				return null;
			},
			isGameAdmin: function() {
				return null;
			}
		});
		return t
	}), define("newnpc", ["character"], function(e) {
		var t = e.extend({
			init: function(t, n) {
				e.prototype.init.call(this, t, Types.Entities.NEWNPC, 1), this.imageLoaded = !1, this.showmovearrows = !1, this.timeouts = [], this.scriptenv = {}
			},
			setExtendedData: function(t) {
				e.prototype.setExtendedData.call(this, t), this.loadImage(), this.name = translate(this.name);
				switch (this.npcclass) {
					case "easterbunny":
						this.moveSpeed = 200;
						break;
					case "explosion":
						this.dosound && this.game.sounds.play("death");
						break;
					case "shopitem":
						this.game.mapmanager.currentmap && this.game.mapmanager.currentmap.isHouseInside() && this.game.showCoinsArrow(!0)
				}
				"countdown" in t && this.startCountdown(), ("tileWidth" in t || "tileHeigth" in t) && this.updateInGameGuiSize(), "displayurl" in t && this.setDisplayURL(this.displayurl, !0), ("clientscript" in t || "scriptclasses" in t) && this.game.scriptmanager.onScriptChanged(this)
			},
			sendTrigger: function(e, t) {
				this.game && this.game.client && this.game.client.sendNPCTrigger(this.id, e, t), e == "activate" ? this.game.scriptmanager.runScript(this, this.game.player, t.type) : ["touch", "grab"].indexOf(e) >= 0 && this.game.scriptmanager.runScript(this, this.game.player, e)
			},
			handleTrigger: function(e, t) {
				e == "script" && t && this.game.scriptmanager.runScript(this, this.game.player, "server" + t.action, t.params)
			},
			loadImage: function() {
				if (!this.image || this.image.length <= 0) {
					(!this.animationInfo.animation || this.animationInfo.animation.length <= 0) && this.unloadImage();
					return
				}
				var e = "../files/npcs/" + this.image;
				if (this.imageLoaded && this.imageLoadedPath == e) return;
				this.imageLoaded = !1, this._afterChangeImageOrAnimation()
			},
			unloadImage: function() {
				this.imageLoaded = !1, this.initializeAnimationInfo(), this.setNonBlocking(!0), this.setNonBlockingTile(!1), this.showHitPoints = null
			},
			getImageSize: function() {
				if (this.imageLoaded && this.imageLoadedSize) return this.imageLoadedSize;
				if (this.currentAnimation && this.currentAnimation.options && this.currentAnimation.options.blockingbounds) return {
					width: this.currentAnimation.options.blockingbounds[2],
					height: this.currentAnimation.options.blockingbounds[3]
				};
				var e = this.game.renderer;
				return {
					width: this.tileWidth * e.tilesize,
					height: this.tileHeight * e.tilesize
				}
			},
			dontChangeTileSize: function() {
				return this.npcclass == "gate" || this.image && (this.image.indexOf("eastershop") >= 0 || this.image.indexOf("sandcastle") >= 0)
			},
			setNonBlocking: function(e) {
				this.isNonBlocking = e
			},
			setNonBlockingTile: function(e) {
				this.isNonBlockingTile = e
			},
			setDrawUnder: function(e) {
				this.isDrawUnder = e
			},
			isChair: function() {
				return this.currentAnimation && this.currentAnimation.options && this.currentAnimation.options.ischair ? !0 : this.image && (this.image.indexOf("_chair") >= 0 || this.image.indexOf("_bed") >= 0)
			},
			isBed: function() {
				return this.currentAnimation && this.currentAnimation.options && this.currentAnimation.options.isbed ? !0 : this.image && this.image.indexOf("_bed") >= 0
			},
			isPet: function() {
				return this.getAnimation() && this.getAnimation().indexOf("pet_") == 0
			},
			setAnimation: function(t, n) {
				e.prototype.setAnimation.call(this, t, n), this.animationLoaded = !1, this.currentAnimation = null;
				var r = this.game.animationmanager.loadAnimation(this.animationInfo.animation);
				this.checkAnimationLoaded(r, !1), this._afterChangeImageOrAnimation()
			},
			_afterChangeImageOrAnimation: function() {
				this.setNonBlocking(this.isChair() || this.npcclass == "buildmarker" || this.npcclass == "ladder" || this.npcclass == "gate" || this.npcclass == "explosion" || this.npcclass == "mob" || this.npcclass == "dropitem" || this.npcclass == "monsterspawn" || this.nonblocking), this.setNonBlockingTile(this.npcclass == "ladder" || this.nonblockingtile || this.npcclass == "gate" && this.animationInfo.animation.indexOf("closed") < 0), this.setDrawUnder(this.isBed() || this.npcclass == "buildmarker" || this.npcclass == "ladder" || this.drawunder || this.npcclass == "furniture" && this.image && this.image.indexOf("_chair") >= 0 && this.image.indexOf("_up") < 0)
			},
			animate: function(e, t) {
				this.npcclass == "easterbunny" && this.animateAsPlayer(e, t)
			},
			setDisplayURL: function(e, t) {
				if (this.displayurl == e && !t) return;
				this.displayurl = e;
				if (!this.game || !this.game.infoManager) return;
				if (this.game.settings && this.game.settings.noingametv) return;
				if (e.indexOf("youtu") >= 0) {
					var n = this.game.storymanager.getYoutubeIDFromURL(e);
					if (n) {
						this.imageLoaded = !1, this.image = null, this.loadImage(), this.tileWidth <= 1 && this.tileHeight <= 1 && (this.setTileWidth(8), this.setTileHeight(5));
						var r = this.game.renderer,
							i = this.tileWidth * r.tilesize * r.zoom,
							s = this.tileHeight * r.tilesize * r.zoom,
							o = this.game.storymanager.getYoutubeStoryHTML("youtube", n);
						o = o.replace("width=400 height=400", "width=" + i + " height=" + s).replace("&autoplay=1", ""), this.game.infoManager.addInGameDom(this.id, o, this);
						return
					}
				}
				this.game.infoManager.removeInGameDom(this.id)
			},
			isHouse: function() {
				return this.npcclass == "house"
			},
			startCountdown: function() {
				this.countdownTimer && clearInterval(this.countdownTimer);
				if (!this.countdown || !this.countdown.time || this.countdown.time <= 0) return;
				var e = parseInt(this.countdown.time);
				this.countdown.time = e;
				var t = this.countdown.text ? this.countdown.text + ": " : "";
				this.chat = t + this.printTimer(e, this.countdown.time), this.showChat(this.chat);
				var n = this;
				this.countdownTimer = setInterval(function() {
					n.countdown.time--, n.countdown.time <= 0 ? (n.chat = "", n.showChat(""), clearInterval(n.countdownTimer)) : (n.chat = t + n.printTimer(e, n.countdown.time), n.showChat(n.chat))
				}, 1e3)
			},
			printTimer: function(e, t) {
				return (e >= 60 ? Math.floor(t / 60) + ":" + Math.floor(t % 60 / 10) + Math.floor(t % 10) : Math.floor(t)) + "s"
			},
			onTouch: function(e) {
				if (this.touchtime && this.game.currentTime < this.touchtime + 500) return;
				this.touchtime = this.game.currentTime;
				if (!e) {
					this.game.scriptmanager.runScript(this, this.game.player, "npctouch");
					return
				}
				this.isBall() && this.isInWater() ? this.sendTrigger("kick", {
					angle: this.getKickAngle()
				}) : this.sendTrigger("touch", {}), this.isBall() && !this.hasBeenKicked && !this.isInWater() && (!this.shownKickMessage || this.game.currentTime >= this.shownKickMessage + 5e3) && (this.shownKickMessage = this.game.currentTime, this.game.showShortMessage(this.game.renderer.isMobile ? translate("Press the fire button to kick!") : translate("Press Space or S to kick!")))
			},
			isBall: function() {
				return this.npcclass == "ball" || this.npcclass == "furniture" && ["ball_idle", "ball_walk"].indexOf(this.getAnimation()) >= 0
			},
			getKickAngle: function() {
				var e, t = this.game.player.getOrientationToPos(this.gridX, this.gridY);
				return t == Types.oppositeOrientation(this.game.player.dir) ? e = Types.orientationToAngle(this.game.player.dir) : e = -Math.atan2(this.gridY - this.game.player.gridY, this.gridX - this.game.player.gridX), e
			},
			onActivate: function(e) {
				if (this.npcclass == "peg") {
					var t = this;
					setTimeout(function() {
						t.sendTrigger("activate", {
							type: e
						})
					}, 400)
				} else this.npcclass && this.sendTrigger("activate", {
					type: e
				});
				["mouse", "sword"].indexOf(e) >= 0 && (e != "sword" || this.getAnimation() != "snowhill") && (["furniture", "ship"].indexOf(this.npcclass) >= 0 || this.game.player.isGameAdmin() && ["shopitem", "itemdisplay", "scriptnpc"].indexOf(this.npcclass) >= 0) && (this.showmovearrows = !0)
			},
			onHasMoved: function() {
				e.prototype.onHasMoved.call(this), this.game.infoManager && this.game.infoManager.updateInGamePos(this.id), !this.isNonBlockingTile && !this.isNonBlocking && !this.isRemoved && !this.isBall() && this.game.player && this.game.player.isInRectangle({
					x: this.gridX,
					y: this.gridY,
					w: this.tileWidth,
					h: this.tileHeight
				}) && this.onTouch(!1)
			},
			drawEntity: function() {
				this.prepareDrawAnimation();
				var e = this.game.renderer,
					t = e.context.setColor(this.color),
					n;
				this.zoom != 1 && (n = e.context.setupObjectZoom(this.x + this.tileWidth * e.tilesize / 2, this.y + this.tileHeight * e.tilesize - 4, this.zoom)), this.image && this.image.length > 0 ? this.drawImage() : this.animationInfo.animation && (this.drawAnimation(), this.checkAnimationLoaded(this.currentAnimation, !0)), this.drawArgObjects(), n && e.context.restoreZoom(n), e.context.setColor(t), this.drawName(), this.drawPrice(), this.drawHealthBar(), this.emoticonfile ? this.drawEmoticon() : this.chat && this.chat.length > 0 && (e.renderchats ? e.renderchats.push(this) : this.drawChat()), this.showmovearrows && this.drawMoveArrows()
			},
			checkAnimationLoaded: function(e, t) {
				if (this.animationLoaded || !e || !e.isLoaded || !e.options.blockingbounds) return;
				var n = this.game.renderer;
				if (!this.dontChangeTileSize()) {
					var r = this.game.mapmanager.isHalfTile() ? 2 : 1;
					this.setTileWidth(Math.ceil(e.options.blockingbounds[2] / n.tilesize * r) / r), this.setTileHeight(Math.ceil(e.options.blockingbounds[3] / n.tilesize * r) / r)
				}
				this.animationLoaded = !0
			},
			drawImage: function() {
				var e = this.game.renderer,
					t = "../files/npcs/" + this.image,
					n = e.getImage(t);
				e.drawImage(n, this.x, this.y), !this.imageLoaded && n && n.image && (this.imageLoaded = !0, this.imageLoadedPath = t, this.imageLoadedSize = {
					width: n.image.width,
					height: n.image.height
				}, this.dontChangeTileSize() || ((!this.tileWidth || this.tileWidth < 15) && this.setTileWidth(Math.ceil(n.image.width / e.tilesize)), (!this.tileHeight || this.tileHeight < 15) && this.setTileHeight(Math.ceil(n.image.height / e.tilesize))))
			},
			setTileWidth: function(e) {
				this.tileWidth = e, this.updateInGameGuiSize()
			},
			setTileHeight: function(e) {
				this.tileHeight = e, this.updateInGameGuiSize()
			},
			updateInGameGuiSize: function() {
				if (this.game.infoManager) {
					var e = this.game.renderer;
					this.game.infoManager.updateInGameSize(this.id)
				}
			},
			drawName: function() {
				if (!this.name || this.name.length <= 0 || this.game.player && this.game.player.ghost) return;
				var e = this.game.renderer,
					t = (this.tileWidth - (this.isPet() ? 0 : .5)) * e.tilesize / 2,
					n = this.currentAnimation && this.currentAnimation.options && this.currentAnimation.options.nameoffsety ? this.currentAnimation.options.nameoffsety : this.imageLoaded ? (this.tileHeight - 2) * e.tilesize : 4;
				this.nameCache = e.drawTextCached(this.nameCache, this.name, this.x + Math.floor(t), this.y + Math.floor(n), {
					centered: !0,
					color: "#ffffff",
					gradientColor: "#e0e0e0",
					strokeColor: "#303030"
				})
			},
			drawPrice: function() {
				if (this.npcclass != "shopitem" && (this.npcclass != "scriptnpc" || !this.price)) return;
				var e;
				this.price && typeof this.price == "object" ? "coins" in this.price ? e = (this.price.coins | 0) + "ðŸ’° + " + translate("Items") : "cookie" in this.price ? e = (this.price.cookie | 0) + "ðŸª" : "eventcoin" in this.price ? e = (this.price.eventcoin | 0) + " EC" : "eventgem" in this.price ? e = (this.price.eventgem | 0) + " EG" : e = translate("Items") : e = !this.price || this.price <= 0 ? this.shopclan ? this.shopclan : "Free" : (this.price | 0) + "ðŸ’°";
				var t = this.game.renderer,
					n = (this.tileWidth - .75) * t.tilesize / 2,
					r = this.currentAnimation && this.currentAnimation.options && this.currentAnimation.options.priceoffsety ? this.currentAnimation.options.priceoffsety : (this.tileHeight - .5) * t.tilesize;
				this.priceCache = t.drawTextCached(this.priceCache, e, this.x + Math.floor(n), this.y + Math.floor(r), {
					centered: !0,
					color: "#00ff00",
					gradientColor: "#00df00",
					strokeColor: "#303030"
				})
			},
			drawMoveArrows: function() {
				var e = this.getImageSize(),
					t = 32;
				this.movearrowsprites = [{
					x: e.width / 2 - t / 2,
					y: -t,
					w: t,
					h: t,
					mode: "moveup",
					srcx: 0,
					srcy: 0
				}, {
					x: e.width / 2 - t / 2,
					y: e.height,
					w: t,
					h: t,
					mode: "movedown",
					srcx: t,
					srcy: 0
				}, {
					x: -t,
					y: e.height / 2 - t / 2,
					w: t,
					h: t,
					mode: "moveleft",
					srcx: t * 2,
					srcy: 0
				}, {
					x: e.width,
					y: e.height / 2 - t / 2,
					w: t,
					h: t,
					mode: "moveright",
					srcx: t * 3,
					srcy: 0
				}, {
					x: -t,
					y: -t,
					w: t,
					h: t,
					mode: "turn",
					srcx: 0,
					srcy: t * 2
				}, {
					x: e.width,
					y: -t,
					w: t,
					h: t,
					mode: "edit",
					srcx: t,
					srcy: t * 2
				}];
				var n = this.game.renderer,
					r = n.context.setColor([1, 1, 1, this.isMouseDragging ? .75 : 1]);
				this.isMouseDragging && this.movearrowsprites.splice(4, 100);
				for (var i in this.movearrowsprites) {
					var s = this.movearrowsprites[i];
					s.active = this._checkControlModeActive(s.mode);
					if (!s.active) continue;
					this.isMouseDragging && this.isMouseOnWall && (s.srcy += t), n.drawImage(n.getImage("../files/gui/bbuilder_movearrows.png"), this.x + s.x, this.y + s.y, [s.srcx, s.srcy, s.w, s.h])
				}
				n.context.setColor(r)
			},
			getControlModeAt: function(e, t) {
				if (!this.showmovearrows || !this.movearrowsprites) return null;
				for (var n in this.movearrowsprites) {
					var r = this.movearrowsprites[n];
					if (!r.active || r.mode.indexOf("move") == 0) continue;
					if (e >= this.x + r.x && e < this.x + r.x + r.w && t >= this.y + r.y && t < this.y + r.y + r.h) return r.mode
				}
				var i = 32,
					s = this.getImageSize();
				return !this.isMouseDragging && e >= this.x - i && e < this.x + s.width + i && t >= this.y - i && t < this.y + s.height + i ? (this._handleFullMouseDragging(e, t), "move") : (this.showmovearrows = !1, null)
			},
			_handleFullMouseDragging: function(e, t) {
				var n = e - this.x,
					r = t - this.y,
					i = this;
				i.isMouseDragging = !0, i.isMouseOnWall = !1, this.bound = {
					touchmove: gui.bind("body", "touchmove", function(e) {
						i._onFurnitureMouseMove(i._getPositionFromEvent(e), n, r)
					}),
					touchend: gui.bind("body", "touchend", function(e) {
						i._onFurnitureMouseMove(i._getPositionFromEvent(e), n, r), i._onFurnitureMouseUp()
					}),
					mousemove: gui.bind("body", "mousemove", function(e) {
						i._onFurnitureMouseMove(i._getPositionFromEvent(e), n, r)
					}),
					mouseup: gui.bind("body", "mouseup", function(e) {
						i._onFurnitureMouseMove(i._getPositionFromEvent(e), n, r), i._onFurnitureMouseUp()
					})
				}
			},
			_getPositionFromEvent: function(e) {
				if (!e) return {
					x: 0,
					y: 0
				};
				e.stopPropagation(), e.preventDefault();
				var t = e.changedTouches ? e.changedTouches : e.originalEvent ? e.originalEvent.changedTouches : null;
				return t && t.length > 0 ? {
					x: t[0].pageX,
					y: t[0].pageY
				} : {
					x: e.pageX,
					y: e.pageY
				}
			},
			_onFurnitureMouseMove: function(e, t, n) {
				if (!this.isMouseDragging) return;
				e.x = e.x / this.game.renderer.zoom + this.game.renderer.camera.x, e.y = e.y / this.game.renderer.zoom + this.game.renderer.camera.y;
				var r = this.game.renderer.tilesize,
					i = this.game.mapmanager.isHalfTile(),
					s, o;
				i ? (s = Math.floor((e.x - t) / r * 2) / 2, o = Math.floor((e.y - n) / r * 2) / 2) : (s = Math.floor((e.x - t) / r), o = Math.floor((e.y - n) / r)), this.x = s * r, this.y = o * r, this.isRemoved = !0;
				var u = 2,
					a = this.game.mapmanager.isRectangleOutOfBounds(s - u, o - u, this.tileWidth + 2 * u, this.tileHeight + 2 * u);
				this.isRemoved = !1, this.isMouseOnWall = a
			},
			_onFurnitureMouseUp: function() {
				if (!this.isMouseDragging) return;
				this.bound && (gui.unbind("body", "mousemove", this.bound.mousemove), gui.unbind("body", "mouseup", this.bound.mouseup), gui.unbind("body", "touchmove", this.bound.touchmove), gui.unbind("body", "touchend", this.bound.touchend)), this.isMouseDragging = !1, this.showmovearrows = !1;
				var e = this.game.renderer.tilesize,
					t = this.game.mapmanager.isHalfTile();
				if (!this.isMouseOnWall) {
					var n, r;
					t ? (n = Math.floor(this.x / e * 2) / 2, r = Math.floor(this.y / e * 2) / 2) : (n = Math.floor(this.x / e), r = Math.floor(this.y / e)), this.sendTrigger("dragmove", {
						x: n,
						y: r
					})
				}
				this.x = this.gridX * e, this.y = this.gridY * e, this.isMouseOnWall = !1
			},
			_checkControlModeActive: function(e) {
				switch (e) {
					case "turn":
						return ["shopitem", "itemdisplay"].indexOf(this.npcclass) >= 0 ? !1 : this.currentAnimation && this.currentAnimation.options && this.currentAnimation.options.canrotate ? !0 : (this.getAnimation() && this.getAnimation().indexOf("_idle")) >= 0 || this.getAnimation() == "ship" ? !0 : this.image && (this.image.indexOf("bbuilder_chair") == 0 || this.image.indexOf("fence") >= 0 || this.image.indexOf("table") >= 0);
					case "edit":
						return ["shopitem", "itemdisplay"].indexOf(this.npcclass) < 0
				}
				return !0
			},
			onControlMode: function(e) {
				e == "turn" ? this.sendTrigger("turn", {}) : e == "edit" && this.sendTrigger("edit", {})
			},
			scheduleTimeout: function(e, t, n, r) {
				this.game.mapmanager.addToActiveObjects(this), n && (this.timeouts = []), this.timeouts.length < 1e3 && this.timeouts.push({
					name: e,
					firetime: (new Date).getTime() + t,
					options: r
				})
			},
			removeScheduledTimeout: function(e) {
				for (var t in this.timeouts) {
					var n = this.timeouts[t];
					n.name == e && this.timeouts.splice(t, 1)
				}
			},
			onUpdateInterval: function() {
				for (var e in this.timeouts) {
					var t = this.timeouts[e];
					this.game.currentTime >= t.firetime && (this.timeouts.splice(e, 1), this.runTimeoutFunction(t.name, t.options))
				}
				this.timeouts.length <= 0 && this.game.mapmanager.removeFromActiveObjects(this)
			},
			runTimeoutFunction: function(e, t) {
				e && (e == "sleep" ? this.game.scriptmanager.wakeUpFromSleep(t ? t.iter : null, this) : e.startsWith("script:") && this.game.scriptmanager.runScript(this, null, e.substr("script:".length), t ? t.params : null))
			},
			getScriptObject: function() {
				if (!this.scriptObject) {
					var e = this;
					this.scriptObject = {get type() {
							return "npc"
						},
						get itemid() {
							return e.itemid
						},
						get map() {
							return e.game.mapmanager.currentmap.getScriptObject()
						},
						get hp() {
							return e.hitPoints
						},
						get maxhp() {
							return e.maxHitPoints
						},
						get name() {
							return e.name
						},
						set name(e) {
							this.setname(e)
						},
						setname: function(t) {
							e.name = translate(t)
						},
						get color() {
							return e.color && e.color instanceof Array ? e.color.slice(0) : [1, 1, 1, 1]
						},
						set color(t) {
							t instanceof Array && t.length == 4 && (e.color = t)
						},
						get chat() {
							return e.chat
						},
						set chat(e) {
							this.setchat(e)
						},
						setchat: function(t) {
							e.chat = "" + t, e.showChat("" + t)
						},
						say: function(t) {
							e.chat = "" + t, e.showChat("" + t)
						},
						get weapon() {
							return e.weapon
						},
						get body() {
							return e.armor
						},
						set body(e) {
							this.setbody(e)
						},
						setbody: function(t) {
							e.armor = t
						},
						get head() {
							return e.head
						},
						set head(e) {
							this.sethead(e)
						},
						sethead: function(t) {
							e.head = t
						},
						get hat() {
							return e.hat
						},
						set hat(e) {
							this.sethat(e)
						},
						sethat: function(t) {
							e.hat = t
						},
						get bow() {
							return e.bow
						},
						get mount() {
							return e.mount
						},
						get image() {
							return e.image
						},
						set image(e) {
							this.setimg(e)
						},
						setimg: function(t) {
							e.image = t, e.loadImage()
						},
						get ani() {
							return e.getAnimation(!0)
						},
						set ani(e) {
							this.setani(e)
						},
						setani: function(t) {
							e.setAnimation(t)
						},
						get aniarg1() {
							return e.arg1
						},
						set aniarg1(e) {
							this.setaniarg(1, e)
						},
						get aniarg2() {
							return e.arg2
						},
						set aniarg2(e) {
							this.setaniarg(2, e)
						},
						get aniarg3() {
							return e.arg3
						},
						set aniarg3(e) {
							this.setaniarg(3, e)
						},
						get aniarg4() {
							return e.arg4
						},
						set aniarg4(e) {
							this.setaniarg(4, e)
						},
						get aniarg5() {
							return e.arg5
						},
						set aniarg5(e) {
							this.setaniarg(5, e)
						},
						get aniarg6() {
							return e.arg6
						},
						set aniarg6(e) {
							this.setaniarg(6, e)
						},
						get aniarg7() {
							return e.arg7
						},
						set aniarg7(e) {
							this.setaniarg(7, e)
						},
						get aniarg8() {
							return e.arg8
						},
						set aniarg8(e) {
							this.setaniarg(8, e)
						},
						get aniarg9() {
							return e.arg9
						},
						set aniarg9(e) {
							this.setaniarg(9, e)
						},
						setaniarg: function(t, n) {
							if (isInt(t) && t >= 1 && t <= 9) {
								var r = {};
								e["arg" + t] = r["arg" + t] = n
							}
						},
						get emitters() {
							return e.emitters
						},
						set emitters(t) {
							e.emitters = t
						},
						get x() {
							return e.gridX
						},
						set x(t) {
							e.moveXX(e.dir, t, e.gridY, e.z, null, null, 0)
						},
						get y() {
							return e.gridY
						},
						set y(t) {
							e.moveXX(e.dir, e.gridX, t, e.z, null, null, 0)
						},
						get z() {
							return e.z
						},
						get dir() {
							return Types.convertOrientationToDirection(e.dir)
						},
						set dir(e) {
							this.setdir(e)
						},
						setdir: function(t) {
							isInt(t) && t >= Types.Directions.UP && t <= Types.Directions.RIGHT && t != Types.convertOrientationToDirection(e.dir) && (e.dir = Types.convertDirectionToOrientation(t))
						},
						offsetx: function(t) {
							return Types.addOffsetInOrientation(e.gridX, e.gridY, e.dir, t).x
						},
						offsety: function(t) {
							return Types.addOffsetInOrientation(e.gridX, e.gridY, e.dir, t).y
						},
						get storyid() {
							return e.storyid
						},
						move: function(t, n, r) {
							e.moveXX(e.getOrientationToPos(n, r), n, r, e.z, null, null, t * 1e3)
						},
						get width() {
							return e.tileWidth
						},
						set width(t) {
							e.setTileWidth(Math.max(0, t))
						},
						get height() {
							return e.tileHeight
						},
						set height(t) {
							e.setTileHeight(Math.max(0, t))
						},
						get nonblocking() {
							return e.isNonBlocking
						},
						set nonblocking(t) {
							e.isNonBlocking = t
						},
						get drawunder() {
							return e.isDrawUnder
						},
						set drawunder(t) {
							e.isDrawUnder = t
						},
						play: function(t) {
							t && e.game.sounds.play((t.indexOf(":/") < 0 ? "../../files/sounds/" : "") + t)
						},
						setmusic: function(t) {
							e.game.sounds.setScriptMusic(t)
						},
						stopmusic: function() {
							e.game.sounds.setScriptMusic()
						},
						get displayurl() {
							return e.displayurl
						},
						set displayurl(t) {
							e.setDisplayURL(t, !1)
						},
						triggerserver: function(t) {
							if (e.game.client) {
								var n = e.npcType == "menu" ? {
									type: "menu",
									id: e.buttonid
								} : e.npcType == "weapon" ? {
									type: "weapon"
								} : {
									type: "npc",
									id: e.id
								};
								e.game.client.sendNPCTrigger(n, "script", {
									action: t,
									params: Array.prototype.slice.call(arguments, 1)
								})
							}
						},
						scheduleevent: function(t, n) {
							e.scheduleTimeout("script:" + n, t * 1e3, !1, {
								params: Array.prototype.slice.call(arguments, 2)
							})
						},
						cancelevents: function(t) {
							e.removeScheduledTimeout("script:" + t)
						},
						settimeout: function(t) {
							e.scheduleTimeout("script:timeout", t * 1e3)
						},
						sleep: function(t) {
							e.game.scriptmanager.nextSleep = {
								npc: e,
								delay: t * 1e3
							}
						}
					}
				}
				return this.scriptObject
			}
		});
		return t
	}), define("player", ["character", "config"], function(e, t) {
		var n = e.extend({
			init: function(n, r) {
				e.prototype.init.call(this, n, r), this.name = "", this.isNonBlocking = !0, this.armor = t.defaultarmor, this.weapon = t.defaultweapon, this.head = t.defaulthead, this.coins = 0, this.setAnimation("player_idle", !1)
			},
			animate: function(e, t) {
				this.animateAsPlayer(e, t)
			}
		});
		return n
	}), Types = {
		Messages: {
			SYSTEM: 0,
			HELLO: 0,
			WELCOME: 1,
			SPAWN: 2,
			DESPAWN: 3,
			HURTPROJECTILE: 4,
			PROJECTILE: 5,
			MAPSTREAM: 6,
			ATTACK: 7,
			MOVEXX: 8,
			HURT: 9,
			HEALTH: 10,
			CHAT: 11,
			ANI: 12,
			WEATHER: 13,
			SCORES: 14,
			TELEPORT: 15,
			DAMAGE: 16,
			MODALMESSAGE: 17,
			HOTKEY: 18,
			LIST: 19,
			WHO: 20,
			USERPMS: 21,
			EVENTINFO: 22,
			HP: 23,
			SHOWURL: 24,
			NOTIFICATION: 25,
			FOCUS: 26,
			SHOWVS: 27,
			SHOWVSCLANS: 28,
			MAPMOVE: 29,
			BUILDOBJECT: 30,
			GENERALMESSAGE: 31,
			STORYACTION: 32,
			OBJECTDATA: 33,
			NPCTRIGGER: 34,
			MAPINFO: 35,
			AUDIO: 36,
			GETPROFILE: 37,
			PROFILE: 38,
			TRADEACTION: 39,
			ASKBUYITEM: 40,
			BUYITEM: 41,
			REVIVE: 42,
			SHARED: 43,
			PLACEOBJECT: 44,
			PUSHTOKEN: 45,
			GETINVENTORY: 46,
			INVENTORY: 47,
			USEINVENTORY: 48,
			CLANACTION: 49,
			SHOWVSWINNER: 50,
			SHOWVSCLANWINNER: 51,
			FEEDBACK: 52,
			SHORTMESSAGE: 53,
			GOTOHOUSE: 54,
			GETPROFILEDB: 55,
			PM: 56,
			BUILDINFO: 57,
			GETMYHOUSES: 58,
			MYHOUSES: 58,
			PMACTION: 59,
			FURNITUREINFO: 60,
			SELLITEMS: 61,
			SELLITEM: 62,
			CLIENTCLASS: 63,
			GETMAPMARKERS: 64,
			MAPMARKERS: 64,
			PAYMENT2: 65,
			PING: 66,
			PONG: 67,
			FRIENDS: 68,
			SETSETTINGS: 69,
			WINNER: 70,
			CONSOLECHAT: 71,
			REMOVESIDEKICKS: 72,
			KICKVISITORS: 73,
			ISTALKING: 74,
			HOUSEINFO: 75,
			SAVESTATUS: 76,
			UNLOCKSTATUS: 77,
			UPLOADACTION: 78,
			ADMININVENTORY: 79,
			BUYCOINS: 80,
			GETOFFERS: 81,
			OFFERS: 82,
			TRACKACTION: 83,
			ITEMDATA: 84,
			PROJECTILEINFO: 85,
			LIKE: 86,
			LISTMESSAGES: 87,
			PLAYERANIS: 88,
			MENUBUTTONS: 89,
			ADDNPC: 90,
			LAGLOG: 91,
			AMBIENTCOLOR: 92,
			MAILINGACTION: 93,
			ACHIEVEMENTS: 94,
			IDENTIFY: 99
		},
		Entities: {
			WARRIOR: 1,
			GENERAL: 34,
			NEWNPC: 70
		},
		Orientations: {
			UP: 1,
			DOWN: 2,
			LEFT: 3,
			RIGHT: 4
		},
		Directions: {
			UP: 0,
			LEFT: 1,
			DOWN: 2,
			RIGHT: 3
		},
		AnimationFlags: {
			DEFAULTANIS: 1,
			PREDICT: 2
		},
		TileTypes: {
			NONE: null,
			GRASS: 0,
			TALLGRASS: 1,
			BLOCK: 2,
			STONEPATH: 3,
			BED: 4,
			DEEPWATER: 5,
			SHALLOWWATER: 6,
			TURFPATH: 7,
			WOODPATH: 8,
			CHAIR: 9
		}
	}, Types.getOrientationAsString = function(e) {
		switch (e) {
			case Types.Orientations.LEFT:
				return "left";
			case Types.Orientations.RIGHT:
				return "right";
			case Types.Orientations.UP:
				return "up";
			case Types.Orientations.DOWN:
				return "down"
		}
	}, Types.convertOrientationToDirection = function(e) {
		switch (e) {
			case Types.Orientations.UP:
				return Types.Directions.UP;
			case Types.Orientations.LEFT:
				return Types.Directions.LEFT;
			case Types.Orientations.DOWN:
				return Types.Directions.DOWN;
			case Types.Orientations.RIGHT:
				return Types.Directions.RIGHT
		}
	}, Types.convertDirectionToOrientation = function(e) {
		switch (e) {
			case Types.Directions.UP:
				return Types.Orientations.UP;
			case Types.Directions.LEFT:
				return Types.Orientations.LEFT;
			case Types.Directions.DOWN:
				return Types.Orientations.DOWN;
			case Types.Directions.RIGHT:
				return Types.Orientations.RIGHT
		}
	}, Types.convertKeyToOrientation = function(e) {
		switch (e) {
			case 37:
				return Types.Orientations.LEFT;
			case 38:
				return Types.Orientations.UP;
			case 39:
				return Types.Orientations.RIGHT;
			case 40:
				return Types.Orientations.DOWN
		}
	}, Types.addOffsetInOrientation = function(e, t, n, r) {
		switch (n) {
			case Types.Orientations.UP:
				t -= r;
				break;
			case Types.Orientations.LEFT:
				e -= r;
				break;
			case Types.Orientations.DOWN:
				t += r;
				break;
			case Types.Orientations.RIGHT:
				e += r
		}
		return {
			x: e,
			y: t,
			gridX: Math.floor(e),
			gridY: Math.floor(t)
		}
	}, Types.orientationLeft = function(e) {
		switch (e) {
			case Types.Orientations.UP:
				return Types.Orientations.LEFT;
			case Types.Orientations.LEFT:
				return Types.Orientations.DOWN;
			case Types.Orientations.DOWN:
				return Types.Orientations.RIGHT;
			case Types.Orientations.RIGHT:
				return Types.Orientations.UP
		}
	}, Types.orientationRight = function(e) {
		switch (e) {
			case Types.Orientations.UP:
				return Types.Orientations.RIGHT;
			case Types.Orientations.LEFT:
				return Types.Orientations.UP;
			case Types.Orientations.DOWN:
				return Types.Orientations.LEFT;
			case Types.Orientations.RIGHT:
				return Types.Orientations.DOWN
		}
	}, Types.oppositeOrientation = function(e) {
		switch (e) {
			case Types.Orientations.UP:
				return Types.Orientations.DOWN;
			case Types.Orientations.LEFT:
				return Types.Orientations.RIGHT;
			case Types.Orientations.DOWN:
				return Types.Orientations.UP;
			case Types.Orientations.RIGHT:
				return Types.Orientations.LEFT
		}
	}, Types.orientationIsHorizontal = function(e) {
		return e == Types.Orientations.LEFT || e == Types.Orientations.RIGHT
	}, Types.orientationIsVertical = function(e) {
		return e == Types.Orientations.UP || e == Types.Orientations.DOWN
	}, Types.orientationToAngle = function(e) {
		switch (e) {
			case Types.Orientations.UP:
				return Math.PI / 2;
			case Types.Orientations.LEFT:
				return Math.PI;
			case Types.Orientations.DOWN:
				return Math.PI * 3 / 2;
			case Types.Orientations.RIGHT:
				return 0
		}
		return 0
	}, Types.getMessageTypeAsString = function(e) {
		for (var t in Types.Messages)
			if (Types.Messages[t] == e) return t;
		return "UNKNOWN"
	}, typeof exports != "undefined" && (module.exports = Types), define("gametypes", function() {}), define("projectiles", ["character", "newnpc", "gametypes"], function(e, t) {
		var n = Class.extend({
			init: function(e) {
				this.map = e, this.projectiles = []
			},
			createProjectile: function(t, n, r, i, s, o, u) {
				var a = this.getTypeInfo(n);
				if (!a) return null;
				var f = new e(this.map.game.getTemporaryEntityID(), Types.Entities.GENERAL);
				return f.game = this.map.game, f.created = (new Date).getTime(), f.owner = t, f.type = n, f.setGridPosition(r, i), f.z = s, f.angle = o, f.info = a, f.arrow = a.arrow, f.zangle = a.zangle, f.dx = a.speed * Math.cos(o), f.dy = -a.speed * Math.sin(o), this.checkLoadAnimationForProjectile(f), this.projectiles.push(f), u && this.sendProjectile(f), this.checkAssignOwner(f), f
			},
			sendProjectile: function(e) {
				this.map.game.client.sendProjectile(e.type, e.gridX, e.gridY, e.z, e.angle)
			},
			checkAssignOwner: function(e) {
				if (this.map.game.player && e.owner == this.map.game.player.id) {
					e.clanname = this.map.game.player.clanname;
					return
				}
				if (!e.arrow) return;
				for (var t in this.map.game.players) {
					var n = this.map.game.players[t];
					if (n && n.id == e.owner) {
						n.arrow = e.arrow, e.clanname = n.clanname;
						return
					}
				}
			},
			getProjectileSound: function(e) {
				var t = this.getTypeInfo(e);
				if (!t || !t.image) return null;
				var n = t.image.indexOf(".bani");
				if (n < 0) return null;
				var r = this.map.game.animationmanager.loadAnimation(t.image.substring(0, n));
				if (!r || !r.frames || r.frames.length <= 0) return null;
				var i = r.frames[0];
				return i.sound ? i.sound.constructor === Array ? i.sound[Math.floor(Math.random() * i.sound.length)] : i.sound : null
			},
			checkLoadAnimationForProjectile: function(e) {
				var t = e.info.image,
					n = t.indexOf(".bani");
				n >= 0 && e.setAnimation(t.substring(0, n) + t.substring(n + ".bani".length), !1)
			},
			drawProjectiles: function() {
				var e = this.map.game.renderer,
					t = this.map.game.animationmanager;
				for (var n in this.projectiles) {
					var r = this.projectiles[n],
						i = r.animationInfo && r.animationInfo.particles && r.animationInfo.particles.length > 0;
					if (!e.camera.isVisible(r, i ? 4 : 0)) continue;
					if (r.animationInfo.animation) r.prepareDrawAnimation(), r.drawAnimation();
					else {
						var s = e.getImage("../files/npcs/" + r.info.image);
						if (!s) continue;
						var o = r.gridX * e.tilesize - s.image.width / 2,
							u = (r.gridY - r.z) * e.tilesize - s.image.height / 2;
						e.drawImage(s, o, u)
					}
				}
			},
			processProjectiles: function() {
				for (var e in this.projectiles) {
					var t = this.projectiles[e];
					t.setGridPosition(t.gridX + t.dx, t.gridY + t.dy), t.z += t.zangle, t.zangle -= t.info.gravity;
					if (this.checkHurtPlayer(t) || this.checkHurtOthers(t)) {
						this.projectiles.splice(e, 1);
						continue
					}
					if (t.z < 0 || t.info.collidetiles && this.map.isColliding(t.gridX, t.gridY, !0)) {
						this.projectiles.splice(e, 1);
						continue
					}
					if (this.isOutOfSync(t)) {
						this.projectiles.splice(e, 1);
						continue
					}
				}
			},
			isOutOfSync: function(e) {
				var t = 20,
					n = this.map.game.renderer.camera;
				return !(e.gridX >= n.gridX - t && e.gridX < n.gridX + n.gridW + t && e.gridY >= n.gridY - t && e.gridY < n.gridY + n.gridH + t)
			},
			checkHurtPlayer: function(e) {
				if (!e.info.hittype) return !1;
				var t = this.map.game.player;
				if (!t || t.isInWater()) return !1;
				if (e.owner == t.id) return !1;
				if (!this.map.isSpar() && !this.map.isPvpEvent() && e.clanname && e.clanname == t.clanname) return !1;
				var n = {
						x: e.gridX - (t.gridX + .5),
						y: e.gridY - (t.gridY + .5)
					},
					r = Math.sqrt(n.x * n.x + n.y * n.y);
				return r >= 1 ? !1 : e.z > t.z + 3 ? !1 : (this.map.game.client.sendHurtProjectile(e.owner, e.type), this.map.game.sounds.play("arrow_impact"), e.info["hittype"] == "snow" && t.setSnowFrozen(), !0)
			},
			checkHurtOthers: function(e) {
				if (!e.info.hittype) return !1;
				var n;
				this.map.isInWater(e.gridX, e.gridY) || (n = this.map.game.findNearestPlayer(e.gridX - .5, e.gridY - .5, 1));
				if (!n) {
					var r = this.map.getEntitiesAt(e.gridX, e.gridY, .5, .5);
					for (var i in r) {
						var s = r[i];
						if (s instanceof t && !s.isNonBlocking && ["mob", "destructable", "sparcontrol", "movingcar"].indexOf(s.npcclass) >= 0) {
							n = s;
							break
						}
					}
					if (!n) return !1
				}
				return n.id == e.owner ? !1 : !this.map.isSpar() && e.clanname && e.clanname == n.clanname ? !1 : e.z > n.z + 3 ? !1 : (this.map.game.sounds.play("arrow_impact"), !0)
			},
			getTypeInfo: function(e) {
				if (!this.map.game.projectileInfo) return null;
				var t = this.map.game.projectileInfo[e];
				return t && !t.valuesbyframe && (t.valuesbyframe = !0, t.speed /= this.map.game.fps, t.gravity /= this.map.game.fps, t.zangle /= this.map.game.fps), t
			}
		});
		return n
	}), define("newmap", ["newnpc", "player", "projectiles", "character", "gametypes"], function(e, t, n, r) {
		var i = Class.extend({
			init: function(e, t, r) {
				this.game = e, this.mapname = t, this.templatename = r, this.isLoaded = !1, this.loadTime = e.currentTime, this.properties = {}, this.projectiles = new n(this), this.hasTileTypes = !1
			},
			_initTilesets: function() {
				for (var e in this.layers) this.getTilesetForLayer(this.layers[e])
			},
			getTilesetForLayer: function(e) {
				return this.game.renderer.getImage("../files/maps/tiles/" + e.tileset, !0)
			},
			addStreamData: function(e) {
				var t = !1;
				if (e.header && !this.layers) {
					"properties" in e.header && (this.properties = e.header.properties);
					var n = this.game.renderer.tilesize;
					this.width = Math.floor(e.header.width / n), this.height = Math.floor(e.header.height / n), this.offsetx = (e.header.offsetx ? e.header.offsetx : 0) / n, this.offsety = (e.header.offsety ? e.header.offsety : 0) / n;
					var r = !1;
					this.layers = [];
					for (var i in e.header.layers) {
						var s = e.header.layers[i],
							o = {
								layer: s.layer,
								offsetx: s.offsetx,
								offsety: s.offsety,
								width: s.width,
								height: s.height,
								tilewidth: s.tilewidth,
								tileheight: s.tileheight,
								tilesinrow: s.tilesinrow,
								tileset: s.tileset,
								tilesetwidth: s.tilesetwidth,
								collision: s.collision,
								drawover: s.drawover && !r,
								water: s.water,
								tiletypes: s.tiletypes
							},
							u = o.tileset.indexOf("?");
						o.tilesetbase = u >= 0 ? o.tileset.substring(0, u) : o.tileset, o.tiles = new Array(o.width * o.height), this._initLayerTilesLookup(o), this.layers.push(o), o.tiletypes && (this.hasTileTypes = !0)
					}
					this._initTilesets(), t = !0
				}
				var a = this.game.renderer,
					f = a.getTileWidth(),
					l = a.getTileHeight(),
					c = {};
				for (var i in this.layers) c[this.layers[i].layer] = this.layers[i];
				for (var i in e.zones) {
					var h = e.zones[i],
						o = c[h.layer];
					if (!o) continue;
					var p = h.x,
						d = h.y,
						v = h.w,
						m = h.h;
					for (var g = 0; g < m; g++)
						for (var y = 0; y < v; y++) o.tiles[p + y + (d + g) * o.width] = h.tiles[y + g * v];
					this._markLayerUsedForLookup(o, h);
					if (!this.terrainrenderoffset) t = !0;
					else {
						var b = (this.terrainrenderoffset.x - o.offsetx) / o.tilewidth,
							w = Math.floor(b),
							E = Math.min(Math.ceil(b + f / o.tilewidth), o.width),
							S = (this.terrainrenderoffset.y - o.offsety) / o.tileheight,
							x = Math.floor(S),
							T = Math.min(Math.ceil(S + l / o.tileheight), o.height);
						p < E && p + v > w && d < T && d + m > x && (t = !0)
					}
				}
				t && this.isLoaded && this.game.started && this.game.renderer && this.game.renderer.updateTiles(!0)
			},
			checkTilesetsLoaded: function() {
				this.game.currentTime >= this.loadTime + 15e3 && this.hideStartScreen();
				if (this.isLoaded || !this.layers) return;
				for (var e in this.layers) {
					var t = this.getTilesetForLayer(this.layers[e]);
					if (!t) return
				}
				this.isLoaded = !0, this.hideStartScreen(), this.game.started && this.game.renderer && this.game.renderer.updateTiles(!0)
			},
			hideStartScreen: function() {
				!this.game.tilesFinishedLoading && this.game.checkHideStartScreen && (this.game.tilesFinishedLoading = !0, this.game.checkHideStartScreen())
			},
			_initLayerTilesLookup: function(e) {
				e.tilesLookupSize = Math.ceil(256 / e.tilewidth), e.tilesLookupWidth = Math.floor(e.width / e.tilesLookupSize), e.tilesLookupHeight = Math.floor(e.height / e.tilesLookupSize), e.tilesLookup = new Array(e.tilesLookupWidth * e.tilesLookupHeight)
			},
			_markLayerUsedForLookup: function(e, t) {
				var n = Math.floor(t.x / e.tilesLookupSize),
					r = Math.floor((t.x + t.w - 1) / e.tilesLookupSize),
					i = Math.floor(t.y / e.tilesLookupSize),
					s = Math.floor((t.y + t.h - 1) / e.tilesLookupSize);
				for (var o = i; o <= s; o++)
					for (var u = n; u <= r; u++) e.tilesLookup[o * e.tilesLookupWidth + u] = !0
			},
			_getUsedLayers: function(e) {
				var t = this.game.renderer;
				e || (e = {
					x: this.terrainrenderoffset.x,
					y: this.terrainrenderoffset.y,
					w: t.getTileWidth(),
					h: t.getTileHeight()
				});
				var n = [];
				for (var r = 0; r < this.layers.length; r++) {
					var i = this.layers[r];
					if (i.tiletypes) continue;
					var s = (e.x - i.offsetx) / i.tilewidth;
					i.minx = Math.floor(s), i.maxx = Math.min(Math.ceil(s + e.w / i.tilewidth), i.width);
					var o = Math.floor(i.minx / i.tilesLookupSize),
						u = Math.floor((i.maxx - 1) / i.tilesLookupSize),
						a = (e.y - i.offsety) / i.tileheight;
					i.miny = Math.floor(a), i.maxy = Math.min(Math.ceil(a + e.h / i.tileheight), i.height);
					var f = Math.floor(i.miny / i.tilesLookupSize),
						l = Math.floor((i.maxy - 1) / i.tilesLookupSize),
						c = !1,
						h = null,
						p = null,
						d = null,
						v = null;
					for (var m = f; m <= l; m++)
						for (var g = o; g <= u; g++) i.tilesLookup[m * i.tilesLookupWidth + g] && (c = !0, h == null ? (h = p = g, d = v = m) : (h = Math.min(g, h), d = Math.min(m, d), p = Math.max(g, p), v = Math.max(m, v)));
					c && (i.minx = Math.max(i.minx, h * i.tilesLookupSize), i.miny = Math.max(i.miny, d * i.tilesLookupSize), i.maxx = Math.min(i.maxx, (p + 1) * i.tilesLookupSize), i.maxy = Math.min(i.maxy, (v + 1) * i.tilesLookupSize), n.push(i))
				}
				return n
			},
			drawTiles: function() {
				this.layervertices = [];
				if (!this.layers || !this.isLoaded) return;
				this.terrainrenderoffset || (this.terrainrenderoffset = {
					x: 0,
					y: 0
				}), this.countDrawOverLayers = 0;
				var e = this.game.renderer;
				this._checkClearBack();
				var t = [],
					n = [],
					r = 0,
					i = this._getUsedLayers();
				for (var s in i) {
					var o = i[s],
						u = null,
						a, f, l = {
							layer: o,
							offset: r,
							count: 0,
							drawover: o.drawover != undefined && o.drawover
						};
					for (var c = o.miny; c < o.maxy; c++) {
						var h = -1,
							p = -1;
						for (var d = o.minx; d < o.maxx; d++) {
							var v = c * o.width + d,
								m = o.tiles[v];
							if (m == undefined || m < 0) {
								p = -1;
								continue
							}
							var g = m % o.tilesinrow * o.tilewidth,
								y = Math.floor(m / o.tilesinrow) * o.tileheight,
								b = v % o.width * o.tilewidth + o.offsetx - this.terrainrenderoffset.x,
								w = Math.floor(v / o.width) * o.tileheight + o.offsety - this.terrainrenderoffset.y;
							if (!u || !u.image) {
								u = this.getTilesetForLayer(o);
								if (!u || !u.image) {
									c = o.maxy;
									break
								}
								a = 1 / u.image.width, f = 1 / u.image.height
							}
							if (e.context.backcontext) e.context.backcontext.drawImage(u.image, g, y, o.tilewidth, o.tileheight, b, w, o.tilewidth, o.tileheight);
							else if (e.context.contextGL)
								if (y == p && g == h + o.tilewidth) {
									var E = t.length - 12;
									t[E + 2] += o.tilewidth, t[E + 6] += o.tilewidth, t[E + 8] += o.tilewidth, n[E + 2] += o.tilewidth * a, n[E + 6] += o.tilewidth * a, n[E + 8] += o.tilewidth * a
								} else t.push(b, w, b + o.tilewidth, w, b, w + o.tileheight, b + o.tilewidth, w, b + o.tilewidth, w + o.tileheight, b, w + o.tileheight), n.push(g * a, y * f, (g + o.tilewidth) * a, y * f, g * a, (y + o.tileheight) * f, (g + o.tilewidth) * a, y * f, (g + o.tilewidth) * a, (y + o.tileheight) * f, g * a, (y + o.tileheight) * f), l.count += 6;
							h = g, p = y
						}
					}
					e.context.contextGL && l.count > 0 && (this.layervertices.push(l), r += l.count, l.drawover && this.countDrawOverLayers++)
				}
				e.context.contextGL && this._updateTileBuffers(r, t, n)
			},
			_updateTileBuffers: function(e, t, n) {
				var r = this.game.renderer;
				e > 0 ? (this.tilebuffers || (this.tilebuffers = {}), this.tilebuffers.vertices || (this.tilebuffers.vertices = r.context.contextGL.createBuffer()), r.context.contextGL.bindBuffer(r.context.contextGL.ARRAY_BUFFER, this.tilebuffers.vertices), r.context.contextGL.bufferData(r.context.contextGL.ARRAY_BUFFER, new Float32Array(t), r.context.contextGL.STATIC_DRAW), this.tilebuffers.texcoords || (this.tilebuffers.texcoords = r.context.contextGL.createBuffer()), r.context.contextGL.bindBuffer(r.context.contextGL.ARRAY_BUFFER, this.tilebuffers.texcoords), r.context.contextGL.bufferData(r.context.contextGL.ARRAY_BUFFER, new Float32Array(n), r.context.contextGL.STATIC_DRAW)) : this.tilebuffers && (this.tilebuffers.vertices && r.context.contextGL.deleteBuffer(this.tilebuffers.vertices), this.tilebuffers.texcoords && r.context.contextGL.deleteBuffer(this.tilebuffers.texcoords), this.tilebuffers = null)
			},
			_checkClearBack: function() {
				var e = this.game.renderer;
				if (!e.context.backcontext) return;
				var t = e.getTileWidth(),
					n = e.getTileHeight(),
					r = e.tilesize;
				if (this.isHouseInside() || this.terrainrenderoffset.x < 0 || this.terrainrenderoffset.y < 0 || this.terrainrenderoffset.x + t > this.width * r || this.terrainrenderoffset.y + n > this.height * r) e.context.backcontext.fillStyle = "black", e.context.backcontext.fillRect(0, 0, e.context.backcontext.canvas.width, e.context.backcontext.canvas.height)
			},
			getFirstLayerTileSize: function() {
				return this.layers && this.layers.length > 0 ? this.layers[0].tilewidth : this.game.renderer.tilesize
			},
			_getTile: function(e, t, n) {
				if (!e.tiles || e.tiles.length <= 0) return -1;
				var r = this.game.renderer.tilesize,
					i = Math.floor((t * r - e.offsetx) / e.tilewidth),
					s = Math.floor((n * r - e.offsety) / e.tileheight);
				if (i < 0 || i >= e.width || s < 0 || s >= e.height) return -1;
				var o = s * e.width + i;
				return o >= e.tiles.length ? e.tiles[e.tiles.length - 1] : e.tiles[o]
			},
			isOutOfBounds: function(e, t) {
				return e < this.offsetx || e >= this.offsetx + this.width || t < this.offsety || t >= this.offsety + this.height
			},
			isWater: function(e, t) {
				if (this.isOutOfBounds(e, t)) return !1;
				for (var n in this.layers) {
					var r = this.layers[n];
					if (r.water && this._getTile(r, e, t) >= 0 || r.tilesetbase.indexOf("water") >= 0 && this._getTile(r, e, t) == 6) return !0
				}
				return !1
			},
			isChair: function(t, n) {
				if (this.isOutOfBounds(t, n)) return !1;
				if (this.hasTileTypes)
					for (var r in this.layers) {
						var i = this.layers[r];
						if (i.tiletypes && this._getTile(i, t, n) == Types.TileTypes.CHAIR) return !0
					}
				var s = this.getEntitiesAt(t, n, 0, 0);
				return s.length > 0 && _.any(s, function(t) {
					return t instanceof e && t.isChair()
				})
			},
			getTileType: function(e, t) {
				if (!this.hasTileTypes || this.isOutOfBounds(e, t)) return null;
				for (var n in this.layers) {
					var r = this.layers[n];
					if (r.tiletypes) {
						var i = this._getTile(r, e, t);
						if (i > Types.TileTypes.GRASS) return i
					}
				}
				return null
			},
			matchesTileDefinitions: function(e, t, n) {
				if (this.isOutOfBounds(e, t)) return !1;
				for (var r in this.layers) {
					var i = this.layers[r],
						s = n[i.tilesetbase];
					if (s && s.indexOf(this._getTile(i, e, t)) >= 0) return !0
				}
				return !1
			},
			isSpar: function() {
				return this.templatename.indexOf("spar") >= 0
			},
			isMeleeSpar: function() {
				return this.isSpar() && this.templatename.indexOf("melee") >= 0
			},
			isBowSpar: function() {
				return this.isSpar() && this.templatename.indexOf("bow") >= 0
			},
			isEvent: function() {
				return this.templatename.indexOf("event") >= 0
			},
			isPvpEvent: function() {
				return this.isEvent() || this.properties.pvpevent
			},
			getCollisionX: function(e, t) {
				if (this.isOutOfBounds(e, t)) return {
					collision: !0,
					type: "border"
				};
				var n = this.getEntitiesAt(e, t, 0, 0),
					r;
				if (n.length > 0) {
					this._sortEntitiesForPickup(n, e, t, !1), r = n[0];
					if (r.npcclass == "link" || !_.all(n, function(e) {
							return !e.isNonBlockingTile
						})) return {
						collision: !1,
						entity: r
					}
				}
				for (var i in this.layers) {
					var s = this.layers[i];
					if (s.collision && this._getTile(s, e, t) >= 0) return {
						collision: !0,
						type: "tile",
						entity: r
					};
					if (s.tiletypes && this._getTile(s, e, t) == Types.TileTypes.BLOCK) return {
						collision: !0,
						type: "tile",
						entity: r
					}
				}
				if (n.length > 0) {
					var o = _.find(n, function(e) {
						return !e.isRemoved && !e.isNonBlocking
					});
					if (o) return {
						collision: !0,
						type: "entity",
						entity: o
					}
				}
				return {
					collision: !1,
					entity: r
				}
			},
			isColliding: function(e, t, n) {
				if (this.isOutOfBounds(e, t)) return !0;
				for (var r in this.layers) {
					var i = this.layers[r];
					if (i.collision && this._getTile(i, e, t) >= 0) return !0;
					if (i.tiletypes && this._getTile(i, e, t) == Types.TileTypes.BLOCK) return !0
				}
				if (n) return !1;
				var s = this.getEntitiesAt(e, t, 0, 0);
				return s.length > 0 && !_.all(s, function(e) {
					return e.isNonBlocking || e.isRemoved
				})
			},
			isCollidingRectangle: function(e, t, n, r, i) {
				for (var s = 0; s < n; s++)
					for (var o = 0; o < r; o++)
						if (this.isColliding(e + s, t + o, i)) return !0;
				return !1
			},
			isHouseInside: function() {
				return this.templatename.indexOf("inside") >= 0
			},
			getDoorDestination: function(e, t) {
				return this.game.app.config.fixedhousedoor && this.isHouseInside() && !this.isSpar() && e >= 13 && e <= 16 && t >= 14 && t <= 16 && this.templatename != "inside_caveshop" && !this.properties.nodefaultdoor ? {
					x: 64,
					y: 64,
					dir: Types.Orientations.DOWN,
					portal: !0,
					mapname: "outside"
				} : null
			},
			getEntityAt: function(e, t, n, r) {
				if (this.isOutOfBounds(e, t)) return null;
				var i = this.getEntitiesAt(e, t, 0, 0),
					s = !1;
				return i.length <= 0 && (n > 0 || r > 0) && (i = this.getEntitiesAt(e, t, n, r), s = !0), i.length <= 0 ? null : (this._sortEntitiesForPickup(i, e, t, s), i[0])
			},
			_sortEntitiesForPickup: function(t, n, r, i) {
				var s = ["dropitem", "furniture", "link", "buildmarker"];
				t.sort(function(t, o) {
					if (i) {
						var u = Math.abs(t.gridX - n) + Math.abs(t.gridY - r),
							a = Math.abs(o.gridX - n) + Math.abs(o.gridY - r);
						if (u != a) return u - a
					}
					return t instanceof e && s.indexOf(t.npcclass) >= 0 ? -1 : o instanceof e && s.indexOf(o.npcclass) >= 0 ? 1 : o instanceof e && o.isDrawUnder ? -1 : t instanceof e && t.isDrawUnder ? 1 : 0
				})
			},
			getEntitiesAt: function(e, t, n, r) {
				var i = [];
				return this.game.forEachEntity(function(s) {
					var o = s.tileWidth,
						u = s.tileHeight;
					if (e + n < s.gridX || e - n >= s.gridX + o || t + r < s.gridY || t - r >= s.gridY + u) return;
					i.push(s)
				}), i
			},
			getControlEntityAt: function(e, t) {
				var n = null;
				return this.game.forEachEntity(function(r) {
					var i = r.getControlModeAt(e, t);
					i && (n = {
						entity: r,
						mode: i
					})
				}), n
			},
			getScriptObject: function() {
				if (!this.scriptObject) {
					var e = this;
					this.scriptObject = {get type() {
							return "map"
						},
						name: e.mapname,
						template: e.templatename,
						width: e.width,
						height: e.height,
						toString: function() {
							return e.mapname
						},
						iswater: function(t, n) {
							return e.isWater(t, n)
						},
						iswall: function(t, n, r) {
							return e.isColliding(t, n, r)
						},
						matchestiles: function(t, n, r) {
							return r ? e.matchesTileDefinitions(t, n, r) : !1
						}
					}
				}
				return this.scriptObject
			}
		});
		return i
	}), define("mapmanager", ["newnpc", "newmap"], function(e, t) {
		var n = Class.extend({
			init: function(e) {
				this.game = e, this.game.mapmanager = this, this.templates = {}, this.maps = {}, this.activeObjects = [], this.isLoaded = !0, this._preloadMaps()
			},
			_preloadMaps: function() {
				this.loadMap(this.getDefaultOutsideMap(), this.getDefaultOutsideMap())
			},
			getDefaultOutsideMap: function() {
				return "main"
			},
			getDefaultInsideMap: function() {
				return "inside"
			},
			getTimeHash: function() {
				var e = Math.floor((new Date).getTime() / 1e3);
				return e - e % 86400
			},
			loadMap: function(e, n) {
				var r = this.maps[e];
				if (r && r == this.currentmap) return;
				this.clearActiveObjects();
				if (r) {
					this.currentmap = r;
					return
				}
				this.currentmap = new t(this.game, e, n), this.maps[e] = this.currentmap
			},
			drawTiles: function() {
				this.currentmap.drawTiles()
			},
			isOutOfBounds: function(e, t) {
				return !this.currentmap || !isInt(e) || !isInt(t) ? !0 : e < 0 || e >= this.currentmap.width || t < 0 || t >= this.currentmap.height
			},
			isRectangleOutOfBounds: function(e, t, n, r) {
				return this.currentmap ? e < 0 || e + n >= this.currentmap.width || t < 0 || t + r >= this.currentmap.height : !0
			},
			isColliding: function(e, t, n) {
				return this.currentmap.isColliding(e, t, n)
			},
			isCollidingRectangle: function(e, t, n, r, i) {
				return this.currentmap.isCollidingRectangle(e, t, n, r, i)
			},
			isHouseInside: function() {
				return this.currentmap.isHouseInside()
			},
			getDoorDestination: function(e, t) {
				return this.currentmap.getDoorDestination(e, t)
			},
			getEntityAt: function(e, t, n, r) {
				return this.currentmap.getEntityAt(e, t, n, r)
			},
			getControlEntityAt: function(e, t) {
				return this.currentmap.getControlEntityAt(e, t)
			},
			isHalfTile: function() {
				return this.currentmap && this.currentmap.getFirstLayerTileSize() * 2 == this.game.renderer.tilesize
			},
			addToActiveObjects: function(e) {
				if (e.isActiveObject) return;
				this.activeObjects.push(e), e.isActiveObject = !0
			},
			removeFromActiveObjects: function(e) {
				if (!e.isActiveObject) return;
				var t = this.activeObjects.indexOf(e);
				t >= 0 && this.activeObjects.splice(t, 1), e.isActiveObject = !1
			},
			clearActiveObjects: function() {
				if (this.activeObjects.length <= 0) return;
				for (var e in this.activeObjects) {
					var t = this.activeObjects[e];
					t && (t.isActiveObject = !1)
				}
				this.activeObjects = []
			}
		});
		return n
	}), define("newanimation", [], function() {
		var e = Class.extend({
			init: function(e, t) {
				this.game = e, this.animationname = t, this.isLoaded = !1;
				var n = this,
					r = this.game.mapmanager.getTimeHash();
				gui.ajax("../files/animations/" + this.animationname + ".bani" + (r ? "?t=" + r : ""), !0, function(e) {
					n._initAnimation(e)
				}, function(e, n, r) {
					window.console && console.log("Loading animation " + t + " failed: " + r)
				})
			},
			_initAnimation: function(e) {
				if (e["filetype"] != "bbuilderani" || e["aniversion"] != 1) return;
				this.options = e.options, this.defaults = e.defaults, this.sprites = e.sprites, this.frames = e.frames, this.emitters = e.emitters, this.animationOffset = {
					x: this.options.center ? this.options.center[0] - 16 : 0,
					y: this.options.center ? this.options.center[1] - 16 : 0
				}, this.game.animationmanager.loadAnimationImages(this), this.checkCorrect()
			},
			checkCorrect: function() {
				if (!this.defaults || !this.options || !this.sprites || !this.frames) return;
				this.isLoaded = !0
			},
			drawAnimation: function(e, t) {
				if (!this.isLoaded || !t || !e) return;
				t.particles && t.particles.length > 0 && this.options["particleslayer"] == "drawunder" && this.drawParticles(e, t), this.drawSprites(e, t), t.particles && t.particles.length > 0 && this.options["particleslayer"] != "drawunder" && this.drawParticles(e, t)
			},
			drawSprites: function(e, t) {
				if (t.frame == undefined || !this.frames[t.frame]) return;
				var n = this.frames[t.frame].directions;
				if (!n || n.length != 1 && n.length != 4) return;
				var r = n[n.length == 1 ? 0 : t.direction],
					i = this.game.renderer,
					s = this.game.animationmanager,
					o;
				for (var u in r) {
					var a = r[u],
						f = this.sprites[a[0]];
					if (!f) continue;
					if (f.ambient && f.ambient.length >= 2) {
						var l = i.context.ambientColor,
							c = (l[0] + l[1] + l[2]) / 3;
						if (c < f.ambient[0] || c > f.ambient[1]) continue
					}
					var h = s.getGraphic(e, f.gfx, this, t),
						p = Math.floor(e.x) - this.animationOffset.x + a[1],
						d = Math.floor(e.y) - this.animationOffset.y + a[2],
						v = f.scale;
					e.z > 0 && (a[0] > 0 ? d -= e.z * i.tilesize : (p += e.z * i.tilesize * .25, this.options.scaleshadow && (v = [1 / (1 + e.z * .25), 1 / (1 + e.z * .25)])));
					var m = null;
					f.rotation && (m = f.rotation.slice(0), m[0] == "OBJECT" ? m[0] = e.angle : m[0] *= Math.PI / 180);
					if (f.color) {
						var g = i.context.setColor(f.color);
						g && !o && (o = g)
					} else o && (i.context.setColor(o), o = null);
					f.mode ? (i.context.setBlendMode(f.mode), i.drawImage(i.getImage(h), Math.floor(p), Math.floor(d), f.bounds, v, m, !1), i.context.setBlendMode("normal")) : i.drawImage(i.getImage(h), Math.floor(p), Math.floor(d), f.bounds, v, m, !1)
				}
				o && i.context.setColor(o)
			},
			checkProceedAnimation: function(e, t) {
				if (!e.frameDuration && this.frames.length > 0) {
					var n = this.frames[e.frame].duration;
					e.frameDuration = n && n.constructor === Array ? n[Math.floor(Math.random() * n.length)] : n
				}
				if (e.frameDuration && (e.frameDuration <= 1e3 / this.game.fps || this.game.currentTime >= e.lastAnimationTime + e.frameDuration)) {
					e.frame++, e.frameDuration = null;
					if (e.frame >= this.frames.length) {
						e.frame = this.options.looping ? 0 : this.frames.length - 1;
						if (this.options.atend && t && t(this.options.atend)) return
					}
					e.lastAnimationTime = this.game.currentTime, e.playedSound = !1
				}
			},
			processParticlesAndEmitters: function(e, t) {
				var n = this.game.renderer;
				if (!n.context.contextGL) return;
				if (t.particles) {
					var r = this.game.currentTime,
						i = 1 / this.game.fps;
					for (var s = t.particles.length - 1; s >= 0; s--) {
						var o = t.particles[s],
							u = r - o.born;
						if (u >= o.lifetime * 1e3) {
							t.particles.splice(s, 1), o.template.emitatend && this.emitParticlesByList(null, t, o.template.emitatend, o.position);
							continue
						}
						o.speed && (o.position[0] += Math.cos(o.angle) * o.speed * i, o.position[1] -= Math.sin(o.angle) * o.speed * i), o.zangle != undefined && (o.position[2] += o.zangle * i, o.zangle -= o.template.gravity * i), !o.relative && o.screenwrap && (o.position[0] < n.camera.gridX * n.tilesize ? o.position[0] += n.camera.gridW * n.tilesize : o.position[0] >= (n.camera.gridX + n.camera.gridW) * n.tilesize && (o.position[0] -= n.camera.gridW * n.tilesize), o.position[1] < n.camera.gridY * n.tilesize ? o.position[1] += n.camera.gridH * n.tilesize : o.position[1] >= (n.camera.gridY + n.camera.gridH) * n.tilesize && (o.position[1] -= n.camera.gridH * n.tilesize)), o.spin && (o.rotation += o.spin);
						for (var a in o.template.effects) {
							var f = o.template.effects[a];
							if (f.type == "range" && f.time && f.time.length == 2 && f.value && f.value.length == 2) {
								var l = u - f.time[0] * 1e3;
								if (l >= 0) {
									var c = (f.time[1] - f.time[0]) * 1e3,
										h = l >= c ? 1 : l / c;
									o[f.attr] = f.value[0] + (f.value[1] - f.value[0]) * h
								}
							}
						}
					}
				}
				this.emitters && this.processEmitters(e, t, this.emitters), e.emitters && this.processEmitters(e, t, e.emitters)
			},
			processEmitters: function(e, t, n) {
				for (var r in n) {
					var i = n[r];
					if (i.interval && (i.quantity > 0 || i.quantity.constructor === Array) && i.particles && i.particles.length > 0) {
						var s = this.game.currentTime;
						(!t.emitterTime[r] || s >= t.emitterTime[r]) && (!i.isskidmark || !(!e.carSkidTime || s >= e.carSkidTime + 500)) && (this.emitParticles(e, t, i, i.position), t.emitterTime[r] = s + i.interval * 1e3)
					}
				}
			},
			emitParticlesByList: function(e, t, n, r) {
				if (!this.game.renderer.context.contextGL) return;
				if (!n) return;
				if (n.constructor === Array) {
					if (n.length <= 0) return;
					var i;
					n.length == 4 && n[0].constructor === Array ? i = n[t.direction] : i = n;
					for (var s in i) this.emitParticles(e, t, this.emitters[i[s].emitter], i[s].position)
				} else this.emitParticles(e, t, this.emitters[n], r)
			},
			emitParticles: function(e, t, n, r) {
				if (!n) return;
				if (!r) {
					r = n.position;
					if (!r) return
				}
				t.particles || (t.particles = []);
				var i = ["lifetime", "alpha", "red", "green", "blue", "angle", "zangle", "gravity", "zoom", "speed", "spin", "rotation"],
					s = this.game.renderer,
					o = n.quantity && n.quantity.constructor === Array ? n.quantity[0] + Math.floor(Math.random() * (n.quantity[1] - n.quantity[0] + 1)) : n.quantity;
				o = Math.min(o, n.limit - t.particles.length);
				var u = n.reduceonmobile ? Math.min(s.camera.gridW * s.tilesize / 1024, 1) * Math.min(s.camera.gridH * s.tilesize / 768, 1) : 1;
				for (var a = 0; a < o; a++) {
					if (u < 1 && Math.random() > u) continue;
					var f = n.particles[Math.floor(Math.random() * n.particles.length)],
						l = {
							template: f,
							born: this.game.currentTime,
							position: r.slice(0),
							relative: n.relative,
							screenwrap: n.screenwrap
						};
					!l.relative && e && (l.position[0] == "RANDOMSCREENX" ? l.position[0] = (s.camera.gridX + Math.random() * s.camera.gridW) * s.tilesize : l.position[0] += Math.floor(e.x) - this.animationOffset.x, l.position[1] == "RANDOMSCREENY" ? l.position[1] = (s.camera.gridY + Math.random() * s.camera.gridH) * s.tilesize : l.position[1] += Math.floor(e.y) - this.animationOffset.y);
					for (var c in i) {
						var h = i[c],
							p = f[h];
						l[h] = p && p.constructor === Array ? p[0] + Math.random() * (p[1] - p[0]) : p
					}
					l.rotation == undefined ? l.rotation = l.angle : l.rotation == "OBJECT" && (l.rotation = e.angle), t.particles.push(l)
				}
				if (n.sound && (!n.soundchance || Math.random() * 100 < n.soundchance)) {
					var d = n.sound.constructor === Array ? n.sound[Math.floor(Math.random() * n.sound.length)] : n.sound;
					this.game.sounds.play(d)
				}
				t.draworder = n.draworder
			},
			drawParticles: function(e, t) {
				var n = this.game.renderer,
					r = this.game.animationmanager,
					i = Math.floor(e.x) - this.animationOffset.x,
					s = Math.floor(e.y) - this.animationOffset.y,
					o, u = 0,
					a = 1,
					f = t.particles.length - 1;
				t.draworder != "down" && (u = f, f = 0, a = -1);
				for (var l = u; a > 0 ? l <= f : l >= f; l += a) {
					var c = t.particles[l],
						h = n.getImage(r.getGraphic(e, c.template.image, this, t));
					if (!h) continue;
					var p = (c.relative ? i : 0) + c.position[0] - h.image.width / 2,
						d = (c.relative ? s : 0) + c.position[1] - c.position[2] - h.image.height / 2,
						v = c.zoom != undefined ? [c.zoom, c.zoom] : [1, 1],
						m = [c.rotation, h.image.width / 2, h.image.height / 2],
						g = n.context.setColor([c.red, c.green, c.blue, c.alpha]);
					g && !o && (o = g), c.template.mode && n.context.setBlendMode(c.template.mode), n.context.drawImage(h, p, d, null, v, m)
				}
				o && n.context.setColor(o), n.context.setBlendMode("normal")
			}
		});
		return e
	}), define("animationmanager", ["./newanimation"], function(e) {
		var t = Class.extend({
			init: function(e) {
				this.game = e, this.game.animationmanager = this, this.animations = {}, this.weather = null, this.weatherAnimation = null, this.weatherAnimationInfo = {}, this.defaultAnimation = "player_idle", this.codedAnimations = null, this._preloadAnimations()
			},
			_preloadAnimations: function() {
				this.loadAnimation(this.defaultAnimation), this.game.app && this.game.app.config.primaryweapon == "gun" ? (this.loadAnimation("gun_idle"), this.loadAnimation("gun_walk"), this.loadAnimation("gun_atk")) : (this.loadAnimation("player_walk"), this.loadAnimation("player_atk"), this.loadAnimation("player_atk2"))
			},
			loadAnimation: function(t) {
				if (t === undefined) return null;
				var n = this.animations[t];
				return n || (n = new e(this.game, t), this.animations[t] = n), n
			},
			loadAnimationImages: function(e) {
				for (var t in e.defaults) {
					var n = this.getPathForDefault(t);
					this.game.renderer.getImage(n + e.defaults[t])
				}
				for (var r in e.sprites) {
					var n = this.getPathForDefault("");
					this.game.renderer.getImage(n + e.sprites[r].gfx)
				}
			},
			setPlayerAnis: function(e) {
				this.codedAnimations = e
			},
			decode: function(e) {
				return e >= 1 && this.codedAnimations && e < this.codedAnimations.length ? this.codedAnimations[e] : this.defaultAnimation
			},
			getGraphic: function(e, t, n, r) {
				if (!t) return "";
				var i;
				switch (t) {
					case "ARMOR":
						i = e.armor + ".png";
						break;
					case "BODY":
						i = this.expandGameFilename("body", e.armor);
						break;
					case "SWORD":
					case "HAMMER":
					case "SHOVEL":
					case "WEAPON":
						i = this.expandGameFilename("sword", e.weaponimage ? e.weaponimage : e.weapon);
						break;
					case "BOW":
						i = this.expandGameFilename("bow", e.bowimage ? e.bowimage : e.bow);
						break;
					case "ARG1":
					case "ARG2":
					case "ARG3":
					case "ARG4":
					case "ARG5":
					case "ARG6":
					case "ARG7":
					case "ARG8":
					case "ARG9":
					case "ARROW":
					case "BALLOON":
					case "BEACHBALL":
					case "HAT":
					case "HEAD":
					case "HOUSE":
					case "MOUNT":
					case "ICON":
					case "SHIELD":
						i = this.expandGameFilename(t.toLowerCase(), e[t.toLowerCase()]);
						break;
					default:
						r && t.startsWith("PARAM") ? i = this.expandGameFilename("param", r.params[parseInt(t.substring(5)) - 1]) : i = t.indexOf(".") >= 0 ? t : n ? n.defaults[t] : ""
				}
				return this.getPathForDefault(t) + i
			},
			expandGameFilename: function(e, t) {
				return t ? !isNaN(t) && isInt(t) ? "bbuilder_" + e + t + ".png" : (t.indexOf(".") < 0 && (t += ".png"), t.indexOf("_") < 0 && (t = "bbuilder_" + t), t) : ""
			},
			getPathForDefault: function(e) {
				var t = "../files/";
				switch (e) {
					case "BODY":
						return t + "bodies/";
					case "WEAPON":
						return t + "swords/";
					case "ARMOR":
					case "ARROW":
					case "BALLOON":
					case "BEACHBALL":
					case "BOW":
					case "EMOTICON":
					case "HAT":
					case "HEAD":
					case "HOUSE":
					case "MOUNT":
					case "ICON":
					case "SHIELD":
					case "SWORD":
						return t + e.toLowerCase() + "s/";
					default:
						return t + "images/"
				}
			},
			setWeather: function(e) {
				if (e == this.weather) return;
				this.weatherMap = this.game.mapmanager.currentmap, this.weather = e, this.weatherAnimation = null, this.weatherAnimationInfo = {
					emitterTime: {}
				}
			},
			stopWeather: function() {
				if (!this.weather || this.game.mapmanager.currentmap == this.weatherMap) return;
				this.weather = null, this.weatherMap = null, this.weatherAnimation = null, this.weatherAnimationInfo = {
					emitterTime: {}
				}
			},
			processWeather: function() {
				if (!this.weather || this.game.settings.noweather) return;
				var e = this.game.animationmanager.loadAnimation(this.weather);
				if (!e || !e.isLoaded) return;
				this.weatherAnimation = e, e.processParticlesAndEmitters(this.game.player, this.weatherAnimationInfo)
			},
			drawWeather: function() {
				if (!this.weatherAnimation) return;
				this.weatherAnimation.drawAnimation(this.game.player, this.weatherAnimationInfo);
				if (!this.weather && this.weatherAnimationInfo.particles.length <= 0 || this.game.settings.noweather) this.weatherAnimation = null, this.weatherAnimationInfo = {}
			}
		});
		return t
	}), define("localplayer", ["player", "newnpc", "config"], function(e, t, n) {
		var r = e.extend({
			init: function(t, n) {
				e.prototype.init.call(this, t, n), this.predictFrames = 5, this.accelerateCounter = 0, this.currentSpeed = 7
			},
			setExtendedData: function(t) {
				e.prototype.setExtendedData.call(this, t), "coins" in t && this.game.onPlayerCoinsUpdated(this.coins), "bow" in t && this.game.updateBombButton(), t.settings && typeof t.settings == "object" && !(t.settings instanceof Array) && (this.game.settings = this.settings, this.game.onSettingsChanged(!1)), "attachid" in t && this.attachTo(this.attachid), "hotkeys" in t && this.game.updateHotkeys(), "ghost" in t && this.game.checkHideFullGui()
			},
			onNameUpdated: function() {
				e.prototype.onNameUpdated.call(this), this.game.shop && this.game.shop.sendNameUpdated && this.game.shop.sendNameUpdated(this.name), this.game.showClanChatButton(this.clanname && this.clanname.length > 0), this.game.forEachEntity(function(e) {
					e.clanname && !(e instanceof t) && delete e.nameCache
				})
			},
			setItemData: function(e, t) {
				switch (e) {
					case "bow":
						this.bowData = t, this.game.updateBombButton();
						break;
					case "weapon":
						this.weaponData = t, this.weaponMode = this.weaponData, this.lastIdleTime && (this.lastIdleTime = this.game.currentTime), this.currentAttack && delete this.currentAttack, this.isDead || (this.animationInfo.isexternal = !1, this.weaponMode.reload && !this.isInWater() ? this._stopAndAnimate(this.weaponMode.reload) : this.animateAsPlayer("idle", !1)), this.game.updateHotkeys(), this.game.updateBombButton(), this.game.scriptmanager.updateWeaponScript(this, t);
						break;
					case "mount":
						this.mountData = t, this.animationInfo.isexternal = !1, this.animateAsPlayer("idle", !1), this.mountData || delete this.carLightsOn, this.game.updateCarButtons()
				}
			},
			usePrimaryWeapon: function(e) {
				if (this.focus && this.focusType == "freeze") return;
				if (this.isCar()) {
					this.game.app.weaponpadDown || this.useHornButton();
					return
				}
				if (this.mountData) return;
				var t = this.game.mapmanager.currentmap;
				if (t.isBowSpar()) {
					this.useSecondaryWeapon(!0);
					return
				}
				if (this.checkKickBall()) return;
				if (!this.weaponMode) return;
				switch (this.weaponMode.weapontype) {
					case "hammer":
						this.useHammer();
						break;
					case "shovel":
						this.useShovel();
						break;
					case "gun":
						this.useGun(e);
						break;
					case "script":
						this.weaponnpc && this.game.scriptmanager.runScript(this.weaponnpc, this, "activated", [Types.convertOrientationToDirection(e)]);
						break;
					case "sword":
					default:
						this.useSword(e)
				}
			},
			checkKickBall: function() {
				var e = Types.addOffsetInOrientation(this.gridX + .5, this.gridY + .5, this.dir, .75),
					n = _.select(this.game.mapmanager.currentmap.getEntitiesAt(e.gridX, e.gridY, 1, 1), function(e) {
						return e instanceof t && e.isBall()
					});
				if (n.length <= 0) return !1;
				for (var r in n) {
					var i = n[r];
					i.hasBeenKicked = !0, i.sendTrigger("kick", {
						angle: -Math.atan2(i.gridY - this.gridY, i.gridX - this.gridX)
					})
				}
				return this._stopAndAnimate("player_punch"), !0
			},
			useSword: function(e) {
				e != this.dir && (this.dir = e, this.moveprediction || this._resyncMoveXX()), this._stopAndAnimate(this.weaponMode.atk), this.attackfreezetime = this.game.currentTime + this.weaponMode.freezetime, this.attackfiretime = this.attackfreezetime, this.game.client.sendAttack()
			},
			useHammer: function() {
				this._stopAndAnimate(this.weaponMode.atk), this.attackfreezetime = this.game.currentTime + this.weaponMode.freezetime, this.attackfiretime = this.attackfreezetime;
				var e = this;
				setTimeout(function() {
					e && e.game && e.game.client && e.game.client.sendAttack()
				}, 300)
			},
			useShovel: function() {
				var e = Types.addOffsetInOrientation(this.gridX + .5, this.gridY + .5, this.dir, 1.5),
					t = this.game.mapmanager,
					n = this,
					r = _.reject(t.getEntitiesAt(e.gridX, e.gridY, 1, 1), function(e) {
						return e == n.game.player
					});
				r.length <= 0 && !t.isColliding(e.gridX, e.gridY, !0) && t.currentmap.matchesTileDefinitions(e.gridX, e.gridY, this.game.app.config.tiledefsgrass) ? (this._stopAndAnimate(this.weaponMode.atk), this.attackfreezetime = this.game.currentTime + this.weaponMode.freezetime, setTimeout(function() {
					n && n.game && n.game.client && n.game.client.sendAttack()
				}, 450)) : (this._stopAndAnimate(this.weaponMode.fail), this.attackfreezetime = this.game.currentTime + this.weaponMode.failtime), this.attackfiretime = this.attackfreezetime
			},
			useSecondaryWeapon: function(e) {
				if (this.focus && this.focusType == "freeze") return;
				if (this.canGrab() && !this.isFiring()) {
					this.useGrab();
					return
				}
				if (this.isCar()) {
					e || this.useLightsButton();
					return
				}
				if (this.weaponMode && this.weaponMode["weapontype"] == "gun" && (!this.bow || !this.bowData || this.bowData["weapontype"] != "snowball")) {
					this.reloadGun();
					return
				}
				if (this.isInWater()) {
					this.game.showShortMessage(translate("Better use this weapon on land!"));
					return
				}
				var t = this.game.mapmanager.currentmap;
				if (t.isMeleeSpar()) {
					this.game.showShortMessage(translate("You can only use swords here!"));
					return
				}
				var n = this.bow && this.bowData ? this.bowData.weapontype : "bomb";
				if (t.isBowSpar() && n != "bow") {
					this.game.showShortMessage(translate("You can only use bows here!"));
					return
				}
				switch (n) {
					case "bow":
						this.useBow();
						break;
					case "snowball":
						this.throwSnowBall();
						break;
					case "bomb":
						this.game.client && this.game.client.sendPlaceObject("bomb")
				}
			},
			useGrab: function() {
				if (this.getAnimation() == "player_grab") return;
				this._stopAndAnimate("player_grab");
				if (this.game.mapmanager.currentmap) {
					var e = Types.addOffsetInOrientation(this.gridX, this.gridY, this.dir, .5),
						n = this.game.mapmanager.currentmap.getEntitiesAt(e.x, e.y, .5, .5);
					for (var r in n) {
						var i = n[r];
						i instanceof t && i.sendTrigger("grab", {})
					}
				}
			},
			useGun: function(e) {
				if (this.isFiring() || !this.weaponMode || !this.weaponMode.projectile || this.weaponMode["projectile"] == "none") return;
				var t = !1,
					n = this.game.mapmanager.currentmap;
				if (!this.game.app.config.unlimitedammo && !n.isBowSpar() && !this.ammoend && !this.weaponMode.usecount) {
					if (!this.arrows || this.arrows <= 0) {
						this.game.showShortMessage(translate("You are out of bullets!<br>Get some ammo at shops!"));
						return
					}
					t = !0
				}
				var r = this.weaponMode.projectilenr ? this.weaponMode.projectilenr : 1;
				t && r > this.arrows && (r = this.arrows);
				if (this.weaponMode.clip) {
					this.weaponMode.currentClip === undefined && (this.weaponMode.currentClip = this.weaponMode.clip), this.weaponMode.currentClip -= r;
					if (this.weaponMode.currentClip < 0) {
						this.reloadGun();
						return
					}
					this.showCurrentClip(), this.game.updateBombButton()
				}
				t && (this.arrows -= r), e != this.dir && (this.dir = e, this.moveprediction || this._resyncMoveXX());
				var i = this.getActiveAttack();
				this._stopAndAnimate(i.atk), this.attackfreezetime = this.game.currentTime + i.freezetime, this.attackfiretime = i.firetime ? this.game.currentTime + i.firetime : this.attackfreezetime, this.game.storymanager.addRecordAction("shoot", i.projectile);
				if (i.burstmode && i.burstmode.length >= 1)
					for (var s = 0; s < i.burstmode.length; s++) this.shootBurstProjectiles(i.burstmode[s], e, i);
				else if (i.firedelay && i.firedelay > 0) {
					var o = i,
						u = this;
					setTimeout(function() {
						u.shootGunProjectiles(r, e, i)
					}, i.firedelay)
				} else this.shootGunProjectiles(r, e, i)
			},
			getActiveAttack: function() {
				if (!this.weaponMode) return null;
				var e = this.weaponMode.attacks;
				if (!e || e.length <= 0) return this.weaponMode;
				this.currentAttack = this.currentAttack ? this.currentAttack + 1 : 1;
				var t = e[(this.currentAttack - 1) % e.length],
					n = {};
				for (var r in this.weaponMode) n[r] = this.weaponMode[r];
				for (var r in t) n[r] = t[r];
				return n
			},
			shootBurstProjectiles: function(e, t, n) {
				if (!e.delay || parseInt(e.delay) <= 0) {
					this.shootGunProjectiles(parseInt(e.projectilenr), t, n);
					return
				}
				var r = this;
				setTimeout(function() {
					e && n && r.shootGunProjectiles(parseInt(e.projectilenr), t, n)
				}, parseInt(e.delay))
			},
			shootGunProjectiles: function(e, t, n) {
				var r = Types.convertOrientationToDirection(t);
				for (var i = 0; i < e; i++) {
					var s = Types.orientationToAngle(t) + (Math.random() - .5) * n.spread;
					this.game.mapmanager.currentmap.projectiles.createProjectile(this.id, n.projectile, this.gridX + .5 + n.offset[r][0], this.gridY + .5 + n.offset[r][1], .3, s, !0)
				}
			},
			canGrab: function() {
				if (this.game.app && this.game.app.config.primaryweapon != "gun") return;
				return this.mountData ? !1 : this.isInWater() ? !1 : this.weaponMode && this.weaponMode.clip ? !1 : !0
			},
			reloadGun: function() {
				if (this.mountData) return;
				if (this.isFiring()) return;
				if (!this.weaponMode || !this.weaponMode.clip || this.weaponMode.currentClip === undefined) return;
				if (this.weaponMode.currentClip >= this.weaponMode.clip) {
					this.showCurrentClip();
					return
				}
				this.weaponMode.reload && this._stopAndAnimate(this.weaponMode.reload), this.attackfreezetime = this.game.currentTime + this.weaponMode.reloadtime, this.attackreloadtime = this.attackfreezetime, this.attackfiretime = this.attackfreezetime, this.weaponMode.currentClip = this.weaponMode.clip, this.showCurrentClip(), this.game.storymanager.addRecordAction("reload"), this.game.updateBombButton()
			},
			showCurrentClip: function() {
				if (!this.weaponMode || !this.weaponMode.clip || this.weaponMode.currentClip === undefined) return;
				this.damageInfoClip && this.damageInfoClip.destroy(), this.damageInfoClip = this.game.infoManager.addDamageInfo(this.weaponMode.currentClip + "/" + this.weaponMode.clip, this.x + 8, this.y - 32 - (this.isOnMount() ? 32 : 0), this.weaponMode.currentClip >= this.weaponMode.clip ? "healed" : "#ffe080")
			},
			useBow: function() {
				if (this.isFreezing()) return;
				if (this.mountData && this.mountData.mounttype && this.mountData["mounttype"] == "sled") return;
				var e = this.game.mapmanager.currentmap;
				if (!e.isBowSpar() && !this.ammoend) {
					if (!this.arrows || this.arrows <= 0) {
						this.game.showShortMessage(translate("You are out of arrows!<br>Pick some up or buy them in shop!"));
						return
					}
					this.arrows--, this.game.infoManager.addDamageInfo(this.arrows, this.x + 8, this.y - 32 - (this.isOnMount() ? 32 : 0), "#ffe080")
				}
				var t = this.bowData && this.bowData.projectile ? this.bowData.projectile : "arrow",
					n = e.projectiles.getTypeInfo(t);
				n && (this.arrow = n.arrow), this.shoot(t);
				var r = this;
				setTimeout(function() {
					e.projectiles.createProjectile(r.id, t, r.gridX + .5, r.gridY + .5, .3 + (r.isOnMount() ? 1 : 0), Types.orientationToAngle(r.dir), !0)
				}, 450)
			},
			shoot: function(e) {
				var t = this.mountData && this.mountData.bow ? this.mountData.bow : this.bowData && this.bowData.atk ? this.bowData.atk : "bow_atk";
				this._stopAndAnimate(t), this.attackfreezetime = this.game.currentTime + 500, this.attackfiretime = this.attackfreezetime, this.game.storymanager.addRecordAction("shoot", e)
			},
			throwSnowBall: function() {
				if (this.isFreezing() || this.game.mapmanager.currentmap.isSpar()) return;
				this._stopAndAnimate("player_throw"), this.attackfreezetime = this.game.currentTime + 500, this.attackfiretime = this.attackfreezetime;
				var e = this.bowData && this.bowData.projectile ? this.bowData.projectile : this.bowData && this.bowData.atk ? this.bowData.atk : "snowball",
					t = this;
				setTimeout(function() {
					var n = t.gridX + (t.dir == Types.Orientations.DOWN || t.dir == Types.Orientations.RIGHT ? 0 : .5);
					t.game.mapmanager.currentmap.projectiles.createProjectile(t.id, e, n, t.gridY + .5, .3, Types.orientationToAngle(t.dir), !0)
				}, 400)
			},
			activateNPCs: function(e, n) {
				if (this.mountData || !this.weaponMode) return;
				n || (n = this.weaponMode.weapontype);
				if (n == "script") return;
				var r = this.weaponMode.radius ? this.weaponMode.radius : 0,
					i = {
						x: this.gridX + .5,
						y: this.gridY + .5
					};
				if (this.weaponMode.offset) {
					var s = Types.convertOrientationToDirection(e);
					i.x += this.weaponMode.offset[s][0], i.y += this.weaponMode.offset[s][1]
				} else i = Types.addOffsetInOrientation(i.x, i.y, e, 1);
				var o = this.game.mapmanager.currentmap.getEntitiesAt(i.x, i.y, r, r);
				for (var u in o) {
					var a = o[u];
					if (a instanceof t) {
						a.onActivate(n);
						if (n == "trashpick") return
					}
				}
			},
			setMaxHitPoints: function(e, t) {
				this.maxHitPoints = e, t && (this.hitPoints = e), this.showHitPoints = {
					points: this.hitPoints / this.maxHitPoints,
					time: this.game.currentTime,
					isRegen: !0
				}, this.showHealthBar()
			},
			onDeath: function(e) {
				this.hideChat(), this._stopAndAnimate("player_death3");
				var t = this;
				setTimeout(function() {
					t.game.playerdeath_callback(e)
				}, 1e3)
			},
			hideChat: function() {
				this.showChat(""), this.game.client && this.game.client.sendChat("")
			},
			canSetAnimation: function() {
				return this.game.started && !this.isDead && !this.ghost && !this.isFreezing()
			},
			checkMovement: function() {
				this.chat && this.chat.length > 0 && !this.emoticonfile && this.chathidetime && this.game.currentTime >= this.chathidetime && (this.hideChat(), this.chat = "");
				if (!this.game.started || this.isDead || this.isFreezing()) return;
				if (this.hurtendtime && this.game.currentTime < this.hurtendtime) return;
				this.keepInAttachBounds();
				if (this.freezeUntilSpar && this.game.mapmanager.currentmap.isSpar()) return;
				if (this.focus && this.focusType == "freeze") return;
				if (this.effect && this.effect["type"] == "freeze") return;
				if (this.ghost) {
					this._moveGhost();
					return
				}
				if (this.isCar()) {
					var e = this.game.app.movepadDown && this.game.app.movepadVector.x != 0,
						t = this.game.app.weaponpadDown || this.game.app.itemkeyDown;
					if (e || t) {
						var n = {
							x: e ? this.game.app.movepadVector.x : 0,
							y: this.game.app.itemkeyDown ? 1 : t ? -1 : 0
						};
						if (this._moveWithVector(n, !0)) return
					}
				} else if (this.game.app.movepadDown && this._moveWithVector(this.game.app.movepadVector, !0)) return;
				if (this.game.app.keyPressedLast) {
					var r = {
						x: 0,
						y: 0
					};
					if (this.game.app.keyPressed[37] || this.game.app.keyPressed[65]) r.x -= 1;
					if (this.game.app.keyPressed[38] || this.game.app.keyPressed[87]) r.y -= 1;
					if (this.game.app.keyPressed[39] || this.game.app.keyPressed[68]) r.x += 1;
					if (this.game.app.keyPressed[40] || this.game.app.keyPressed[83]) r.y += 1;
					this.isCar() && this.game.app.itemkeyDown && (r.y = 1);
					if ((r.x != 0 || r.y != 0) && this._moveWithVector(r, !0)) return
				}
				if (this.accelerateCounter > 0 && this.isCar() && this._moveWithVector({
						x: 0,
						y: -1
					}, !1)) return;
				var i = this.getAnimation();
				(!i || i.indexOf("walk") >= 0 || i.indexOf("hurt") >= 0) && this._stopAndAnimate("idle")
			},
			isCar: function() {
				return this.mountData && this.mountData.mounttype && this.mountData["mounttype"] == "car"
			},
			_moveWithVector: function(e, t) {
				this.currentSpeed = this._die(t && e.y < 0, e.y > 0);
				if (this.currentSpeed == 0 && e.x == 0) return !1;
				this.effect && this.effect["type"] == "inverse" && (e = {
					x: -e.x,
					y: -e.y
				});
				var n = this.angle,
					r;
				if (this.isCar()) {
					var i = Math.PI / 1.5 / this.game.fps;
					e.x < 0 ? (this.angle += i, this.angle > Math.PI * 2 && (this.angle -= Math.PI * 2)) : e.x > 0 && (this.angle -= i, this.angle < 0 && (this.angle += Math.PI * 2)), this.angle != n && (this.carSkidTime = this.game.currentTime), e.y != 0 || this.currentSpeed != 0 ? r = this._moveAndCollide(Math.cos(this.angle) * this.currentSpeed / this.game.fps, -Math.sin(this.angle) * this.currentSpeed / this.game.fps) : r = {
						gridX: this.gridX,
						gridY: this.gridY,
						dir: this.getOrientationForAngle()
					}
				} else r = this._moveAndCollide(e.x * this.currentSpeed / this.game.fps, e.y * this.currentSpeed / this.game.fps), this.angle = 0;
				if (r.gridX == this.gridX && r.gridY == this.gridY && r.dir == this.dir) return this.angle != n && (this.setOrientation(r.dir), this.game.client.sendMoveXX(this.dir, this.gridX, this.gridY, this.z, this.getAnimation(!0), 0, 0, this.angle)), this._stopAndAnimate("idle"), this.doOnTouchEvents(), !0;
				var s = {
					x: r.gridX - this.gridX,
					y: r.gridY - this.gridY
				};
				return this.setGridPosition(r.gridX, r.gridY), this.updateAttachPosition(), this.setOrientation(r.dir), this.animate("walk", !1), this._sendMoveWithPrediction(s, this.isCar()), this.doOnTouchEvents(), this.onHasMoved(), this.game.hideMovementHelp(), !0
			},
			_sendMoveWithPrediction: function(e, t) {
				var n = !0;
				this.moveprediction && --this.moveprediction.frames > 0 && (t || Math.abs(this.moveprediction.x - e.x) <= 1 / 32 && Math.abs(this.moveprediction.y - e.y) <= 1 / 32) && (n = !1);
				if (n) {
					var r = this.getAnimation(),
						i = r && r.indexOf("player_") == 0;
					this.game.client.sendMoveXX(this.dir, this.gridX + this.predictFrames * e.x, this.gridY + this.predictFrames * e.y, this.z, this.getAnimation(!0), (i ? Types.AnimationFlags.DEFAULTANIS : 0) | Types.AnimationFlags.PREDICT, this.predictFrames * 1e3 / this.game.fps, this.angle), this.moveprediction = {
						frames: this.predictFrames,
						x: e.x,
						y: e.y
					}
				}
			},
			_die: function(e, t) {
				var n = 7;
				if (this.mountData && this.mountData.speed) {
					var r = this.isCar();
					e ? (this.accelerateCounter <= 0 && (this.carSkidTime = this.game.currentTime), this.accelerateCounter++, r ? n = this.mountData.acceleration * this.accelerateCounter / this.game.fps : n += 2 * this.accelerateCounter / this.game.fps, n > this.mountData.speed && (n = this.mountData.speed, this.accelerateCounter--)) : r && (this.accelerateCounter -= t ? 2 : 1, this.accelerateCounter <= 0 ? (this.accelerateCounter = 0, n = t ? -4 : 0) : (n = this.mountData.acceleration * this.accelerateCounter / this.game.fps, this.carSkidTime = this.game.currentTime))
				} else this.weaponMode && this.weaponMode.speed && (n = Math.max(1, Math.min(this.weaponMode.speed, 50)));
				return this.effect && this.effect["type"] == "speed" && this.effect.params.factor && (n *= this.effect.params.factor), n
			},
			_stopAndAnimate: function(e) {
				this.accelerateCounter = 0;
				var t = this.getAnimation();
				this.game.app.config.idlepose && t && e == "idle" && this.weaponMode && this.weaponMode["weapontype"] == "sword" && this.weaponMode["itemid"] != "fist" && !this.isOnMount() ? t.indexOf("_idle") < 0 || !this.lastIdleTime ? this.lastIdleTime = this.game.currentTime : this.game.currentTime >= this.lastIdleTime + this.game.app.config.idleposetime * 1e3 && !this.isInWater() && (e = this.game.app.config.idlepose) : this.lastIdleTime && (this.lastIdleTime = this.game.currentTime), e == "idle" && t && t.indexOf("hurt") >= 0 && this.game.currentTime < this.hurtendtime + 1e3 || this.animate(e, !this.moveprediction), this.moveprediction && this._resyncMoveXX()
			},
			_resyncMoveXX: function() {
				this.moveprediction = null, this.game && this.game.client && this.game.client.sendMoveXX(this.dir, this.gridX, this.gridY, this.z, this.getAnimation(!0), 0, 0, this.angle)
			},
			doOnTouchEvents: function() {
				for (var e in this.collidedNPCs) this.collidedNPCs[e].onTouch(!0);
				this.collidedNPCs = []
			},
			_moveAndCollide: function(e, t) {
				this.collidedNPCs = [];
				var n = (this.game.mapmanager.currentmap.getFirstLayerTileSize() - 1) / this.game.renderer.tilesize,
					r = {
						gridX: this.gridX,
						gridY: this.gridY,
						dir: this.dir
					};
				if (e != 0) {
					r.dir = e >= 0 ? Types.Orientations.RIGHT : Types.Orientations.LEFT;
					var i = Math.abs(e);
					if (i <= n) r.gridX += e, this._moveAndCollideOneDir(r);
					else
						for (var s = 0; s < i; s += n) {
							r.gridX += (s + n >= i ? i - s : n) * (e > 0 ? 1 : -1);
							var o = this._moveAndCollideOneDir(r);
							if (o.collision) {
								this.isCar() && (this.accelerateCounter = 0);
								break
							}
						}
				}
				if (t != 0) {
					r.dir = t >= 0 ? Types.Orientations.DOWN : Types.Orientations.UP;
					var i = Math.abs(t);
					if (i <= n) r.gridY += t, this._moveAndCollideOneDir(r);
					else
						for (var s = 0; s < i; s += n) {
							r.gridY += (s + n >= i ? i - s : n) * (t > 0 ? 1 : -1);
							var o = this._moveAndCollideOneDir(r);
							if (o.collision) {
								this.isCar() && (this.accelerateCounter = 0);
								break
							}
						}
				}
				return this.mountData && this.mountData.mounttype && this.mountData["mounttype"] == "car" ? r.dir = this.getOrientationForAngle() : r.dir = this.getOrientationToPos(this.gridX + e, this.gridY + t), r
			},
			_moveAndCollideOneDir: function(e) {
				var n = Types.addOffsetInOrientation(e.gridX + .5, e.gridY + .5, e.dir, .5),
					r = this.getAttachedToObject();
				r && (n.gridX = Math.floor(n.x - r.gridX % 1) + r.gridX % 1, n.gridY = Math.floor(n.y - r.gridY % 1) + r.gridY % 1);
				var i = this.getCollisionX(n.x, n.y);
				i.entity && i.entity instanceof t && this.collidedNPCs.indexOf(i.entity) < 0 && this.collidedNPCs.push(i.entity);
				var s = this.game.mapmanager.currentmap.getFirstLayerTileSize() * 2 == this.game.renderer.tilesize;
				if (i.collision) s ? Types.orientationIsHorizontal(e.dir) ? e.gridX = Math.floor(n.x * 2) / 2 + (e.dir == Types.Orientations.LEFT ? .5 : -1) : e.gridY = Math.floor(n.y * 2) / 2 + (e.dir == Types.Orientations.UP ? .5 : -1) : Types.orientationIsHorizontal(e.dir) ? e.gridX = n.gridX + (e.dir == Types.Orientations.LEFT ? 1 : -1) : e.gridY = n.gridY + (e.dir == Types.Orientations.UP ? 1 : -1), this.game.tryEnterDoorAt(e.gridX, e.gridY);
				else {
					var o = Types.addOffsetInOrientation(n.x, n.y, Types.orientationLeft(e.dir), .5),
						u = Types.addOffsetInOrientation(n.x, n.y, Types.orientationRight(e.dir), .5);
					r && (o.gridX = Math.floor(o.x - r.gridX % 1) + r.gridX % 1, o.gridY = Math.floor(o.y - r.gridY % 1) + r.gridY % 1, u.gridX = Math.floor(u.x - r.gridX % 1) + r.gridX % 1, u.gridY = Math.floor(u.y - r.gridY % 1) + r.gridY % 1);
					var a, f;
					if (s) {
						if (Math.floor(o.x * 2) != Math.floor(n.x * 2) || Math.floor(o.y * 2) != Math.floor(n.y * 2)) {
							var l = this.getCollisionX(o.x, o.y);
							a = l.collision
						}
						if (Math.floor(u.x * 2) != Math.floor(n.x * 2) || Math.floor(u.y * 2) != Math.floor(n.y * 2)) {
							var c = this.getCollisionX(u.x, u.y);
							f = c.collision
						}
						a ? Types.orientationIsHorizontal(e.dir) ? e.gridY = Math.floor(u.y * 2) / 2 + (e.dir == Types.Orientations.RIGHT ? -0.5 : 0) : e.gridX = Math.floor(u.x * 2) / 2 + (e.dir == Types.Orientations.UP ? -0.5 : 0) : f && (Types.orientationIsHorizontal(e.dir) ? e.gridY = Math.floor(o.y * 2) / 2 + (e.dir == Types.Orientations.LEFT ? -0.5 : 0) : e.gridX = Math.floor(o.x * 2) / 2 + (e.dir == Types.Orientations.DOWN ? -0.5 : 0))
					} else {
						if (o.gridX != n.gridX || o.gridY != n.gridY) {
							var l = this.getCollisionX(o.gridX, o.gridY);
							a = l.collision
						}
						if (u.gridX != n.gridX || u.gridY != n.gridY) {
							var c = this.getCollisionX(u.gridX, u.gridY).collision;
							f = c.collision
						}
						a ? Types.orientationIsHorizontal(e.dir) ? e.gridY = u.gridY : e.gridX = u.gridX : f && (Types.orientationIsHorizontal(e.dir) ? e.gridY = o.gridY : e.gridX = o.gridX)
					}
				}
				return i
			},
			_moveGhost: function() {
				if (this.game.startedIdentify) return;
				if (!this.ghostPos || this.ghostPos.map != this.game.mapmanager.currentmap) {
					this.ghostPos = {
						map: this.game.mapmanager.currentmap,
						startX: this.gridX,
						startY: this.gridY,
						startTime: this.game.currentTime
					};
					return
				}
				var e = 15,
					t = {
						gridX: this.ghostPos.startX + Math.sin((this.game.currentTime - this.ghostPos.startTime) / 3e3) * e,
						gridY: this.ghostPos.startY
					},
					n = {
						x: t.gridX - this.gridX,
						y: t.gridY - this.gridY
					};
				this.setGridPosition(t.gridX, t.gridY), this._sendMoveWithPrediction(n, !0)
			},
			getCollisionX: function(e, t) {
				var n = this.getAttachedToObject();
				if (n) {
					var r = this.game.renderer.tilesize,
						i = (Math.floor(e) - n.gridX) * r,
						s = (Math.floor(t) - n.gridY) * r,
						o = n.getImageSize();
					return {
						collision: i < 0 || i >= o.width || s < 0 || s >= o.height
					}
				}
				return this.game.mapmanager.currentmap.getCollisionX(e, t)
			},
			keepInAttachBounds: function() {
				var e = this.getAttachedToObject();
				if (!e) return;
				var t = this.game.renderer.tilesize,
					n = (this.gridX - e.gridX) * t,
					r = (this.gridY - e.gridY) * t,
					i = e.getImageSize();
				n > i.width - this.tileWidth * t && (this.attachInfo.gridX = i.width / t - this.tileWidth), n < 0 && (this.attachInfo.gridX = 0), r > i.height - this.tileHeight * t && (this.attachInfo.gridY = i.height / t - this.tileHeight), r < 0 && (this.attachInfo.gridY = 0)
			},
			onAnimationChanged: function(e) {
				e && this.game && this.game.client && this.game.client.sendAni(this.getAnimation(!0)), this.game && this.game.storymanager.recording && this.game.storymanager.recording.state && delete this.game.storymanager.recording.state.ani
			},
			checkBeingHurt: function(e) {
				if (!e || this.ghost || this.isDead) return;
				if (this.getAnimation() == "player_snow" && e.weapon == "torch") {
					this.isFreezing() && this.unfreeze(), this._stopAndAnimate("idle");
					return
				}
				if (this.isEventAdmin()) return;
				if (this.game.currentTime < this.hurtendtime) return;
				if (this.focus && this.focusType == "freeze") return;
				var t = Types.addOffsetInOrientation(e.gridX, e.gridY, e.dir, 1),
					n = {
						x: t.x - this.gridX,
						y: t.y - this.gridY
					},
					r = Math.sqrt(n.x * n.x + n.y * n.y);
				if (r > 1.25) return;
				this.game.client.sendHurt(e), this.bounceByHurt(e)
			},
			bounceByHurt: function(e) {
				var t = this.game.mapmanager.currentmap;
				if (!t) return;
				if (this.game.app && this.game.app.config.primaryweapon == "gun") return;
				if (t.isHouseInside()) return;
				if (t.mapname == "main" && this.gridX >= 96 && this.gridX < 164 && this.gridY >= 92 && this.gridY < 166) return;
				var n = 250,
					r = this.mountData && this.mountData.hurt ? this.mountData.hurt : "player_hurt",
					i = Math.random() * .75;
				if (i < .25) this.setAnimation(r, !0);
				else {
					var s = this.gridX - e.gridX,
						o = this.gridY - e.gridY,
						u = Math.sqrt(s * s + o * o);
					u <= 0 && (u = 1);
					var a = this._moveAndCollide(s * i / u, o * i / u);
					this.moveXX(this.dir, a.gridX, a.gridY, this.z, r, Types.AnimationFlags.PREDICT, n, this.angle, this.attachInfo && this.attachInfo.object ? attachInfo.object.id : null, this.attachInfo ? this.attachInfo.gridX : 0, this.attachInfo ? this.attachInfo.gridY : 0), this.game.client.sendMoveXX(this.dir, a.gridX, a.gridY, this.z, r, Types.AnimationFlags.PREDICT, n, this.angle)
				}
				this.attackfreezetime = null, this.attackfiretime = null, this.hurtendtime = this.game.currentTime + n, this.game.sounds.play("hurt"), this.doOnTouchEvents()
			},
			updateHitPoints: function(e, t, n) {
				if (this.isDead) return;
				var r = e < this.hitPoints,
					i = e - this.hitPoints;
				this.hitPoints = e, this.hitPoints <= 0 && this.die(n), this.showHitPoints = {
					points: this.hitPoints / this.maxHitPoints,
					time: this.game.currentTime,
					isRegen: t
				}, this.showHealthBar();
				var s = this.y - (this.zoom > 1 ? 80 : 32);
				r ? (this.game.infoManager.addDamageInfo(i, this.x, s, "received"), this.setHurt()) : !t && i != 0 && this.game.infoManager.addDamageInfo("+" + i, this.x, s, "healed")
			},
			showHealthBar: function() {
				var e = gui.getDom("hitpoints");
				if (!e) return;
				gui.fadeIn("healthbar", 200);
				var t = gui.getWidth("healthbar") - 24,
					n = Math.round(t / this.maxHitPoints * (this.hitPoints > 0 ? this.hitPoints : 0));
				e.style.width = n + "px", this.healthbarTimeout && clearTimeout(this.healthbarTimeout), this.healthbarTimeout = setTimeout(function() {
					gui.fadeOut("healthbar")
				}, 3e3)
			},
			setHurt: function() {
				if (this.getAnimation() && this.getAnimation().indexOf("hurt") >= 0) return;
				this.game.sounds.play("hurt");
				if (this.isHittingAnimation() || this.isDead) return;
				var e = this.mountData && this.mountData.hurt ? this.mountData.hurt : "player_hurt";
				this.setAnimation(e, !0), this.hurtendtime = this.game.currentTime + (this.game.app.config.primaryweapon == "gun" ? 0 : 250)
			},
			setSnowFrozen: function() {
				this.setAnimation("player_snow", !0), this.hurtendtime = this.game.currentTime + 2500, this.attackfreezetime = this.hurtendtime, this.attackfiretime = this.attackfreezetime
			},
			unfreeze: function() {
				this.attackfreezetime = this.attackfiretime = this.hurtendtime = null
			},
			useLightsButton: function() {
				if (!this.isCar()) return;
				this.carLightsOn = !this.carLightsOn, this.game.updateCarButtons(), this.getAnimation() && this.getAnimation().indexOf("_horn") >= 0 && this._stopAndAnimate("idle")
			},
			useHornButton: function() {
				if (!this.isCar()) return;
				if (this.accelerateCounter > 0) this.carHornTime = this.game.currentTime + 500;
				else {
					var e = "horn";
					this.carLightsOn && this.mountData[e + "_lights"] && (e += "_lights"), this.mountData[e] && this._stopAndAnimate(this.mountData[e])
				}
			},
			useMode2Button: function() {
				if (!this.weaponData || !this.weaponData.mode2) return;
				if (this.weaponMode == this.weaponData) {
					var e = {};
					for (var t in this.weaponData) e[t] = this.weaponData[t];
					for (var t in this.weaponData.mode2) e[t] = this.weaponData.mode2[t];
					this.weaponMode = e
				} else this.weaponMode = this.weaponData;
				this.game.updateBombButton(), this._stopAndAnimate("idle")
			},
			onHasMoved: function() {
				e.prototype.onHasMoved.call(this), this.game && !this.game.renderer.isMobile && this.game.sounds.updateMusic(), this.chathidetime || (this.chathidetime = this.game.currentTime + 15e3), this.focus && this.focusType == "sit" && this.getAnimation() && this.getAnimation().indexOf("sit") < 0 && delete this.focus
			},
			attachTo: function(t) {
				return e.prototype.attachTo.call(this, t) ? (this.attachInfo ? this.game.showShipControls() : this.game.hideShipControls(), this._resyncMoveXX(), !0) : !1
			},
			allowClickWarp: function() {
				if (this.game.disableClickWarp) return !1;
				var e = this.game.mapmanager.currentmap;
				return this.isGameAdmin() || this.isEventAdmin() || e && e.mapname.indexOf("playerland_") == 0
			},
			setFocus: function(e, t) {
				t ? (this.focusType = e, this.focus = {
					x: t.x * this.game.renderer.tilesize,
					y: t.y * this.game.renderer.tilesize
				}, this.currentFocus = this.focus) : (delete this.focus, delete this.currentFocus)
			},
			getFocus: function() {
				if (!this.focus) return this;
				if (this.game.mapmanager.currentmap.isSpar()) {
					var e = this.focus,
						t = this.game.renderer,
						n = this.findSparrers();
					if (n.length >= 2) {
						var r = (n[0].x + n[1].x) / 2,
							i = (n[0].y + n[1].y) / 2,
							s = Math.abs(this.focus.x - r),
							o = Math.abs(this.focus.y - i);
						if (s >= t.camera.gridW * t.tilesize / 3 || o >= t.camera.gridH * t.tilesize / 3) e = {
							x: r,
							y: i
						}
					}
					var s = e.x - this.currentFocus.x,
						o = e.y - this.currentFocus.y;
					if (s != 0 || o != 0) {
						var u = Math.sqrt(s * s + o * o),
							a = 16;
						u > a && (s *= a / u, o *= a / u), this.currentFocus = {
							x: this.currentFocus.x + s,
							y: this.currentFocus.y + o
						}
					}
				}
				return this.currentFocus
			},
			findSparrers: function() {
				var e = [],
					t = [];
				for (var n in this.game.players) {
					var r = this.game.players[n];
					if (!r) continue;
					var i = Math.abs(this.focus.x - r.x),
						s = Math.abs(this.focus.y - r.y),
						o = Math.sqrt(i * s + s * s);
					e.length >= 1 && o < t[0] ? (e.splice(0, 0, r), t.splice(0, 0, o)) : e.length >= 2 && o < t[1] ? (e.splice(1, 0, r), t.splice(1, 0, o)) : e.length < 2 && (e.push(r), t.push(o))
				}
				return e.slice(0, 2)
			},
			handleTeleport: function(e) {
				e == "spar" && this.game.mapmanager.currentmap.isSpar() ? this.freezeUntilSpar = !0 : this.freezeUntilSpar && (this.freezeUntilSpar = !1), this._resyncMoveXX()
			},
			addScreenShake: function(e, t) {
				if (!t || !t.distance || !t.strength || !e || !this.isInRectangle({
						x: e.gridX + e.tileWidth / 2 - t.distance,
						y: e.gridY + e.tileHeight / 2 - t.distance,
						w: t.distance * 2,
						h: t.distance * 2
					}) || this.screenshake && t.strength < this.screenshake.strength) return;
				this.setScreenShake(t.strength, t.duration)
			},
			setScreenShake: function(e, t) {
				if (!e || !t) return;
				this.screenshake = {
					dx: 0,
					dy: 0,
					strength: e,
					duration: t,
					start: this.game.currentTime
				}
			},
			processScreenShake: function() {
				if (!this.screenshake) return;
				if (this.game.currentTime >= this.screenshake.start + this.screenshake.duration) {
					this.screenshake = null;
					return
				}
				this.screenshake.dx = (2 * Math.random() - 1) * this.screenshake.strength, this.screenshake.dy = (2 * Math.random() - 1) * this.screenshake.strength
			},
			getScriptObject: function() {
				if (!this.scriptObject) {
					var e = this;
					this.scriptObject = {get type() {
							return "player"
						},
						get id() {
							return e.userid
						},
						get map() {
							return e.game.mapmanager.currentmap.getScriptObject()
						},
						get hp() {
							return e.hitPoints
						},
						get maxhp() {
							return e.maxHitPoints
						},
						getsettings: function() {
							return e.game.settings
						},
						get name() {
							return e.name
						},
						toString: function() {
							return e.name
						},
						get chat() {
							return e.chat
						},
						set chat(t) {
							e.chat = t, e.showChat(t)
						},
						get color() {
							return e.color && e.color instanceof Array ? e.color.slice(0) : [1, 1, 1, 1]
						},
						set color(t) {
							t instanceof Array && t.length == 4 && (e.color = t)
						},
						get weapon() {
							return e.weapon
						},
						get weapondata() {
							return e.weaponMode
						},
						get body() {
							return e.armor
						},
						get head() {
							return e.head
						},
						get hat() {
							return e.hat
						},
						get bow() {
							return e.bow
						},
						get bowdata() {
							return e.bowData
						},
						get mount() {
							return e.mount
						},
						get ani() {
							return e.getAnimation(!0)
						},
						set ani(e) {
							this.setani(e)
						},
						setani: function(t) {
							arguments.length > 1 && (t += "," + Array.prototype.slice.call(arguments, 1)), e.accelerateCounter = 0, e.setAnimation(t, !0), e.moveprediction && e._resyncMoveXX()
						},
						get aniarg1() {
							return e.arg1
						},
						set aniarg1(e) {
							this.setaniarg(1, e)
						},
						get aniarg2() {
							return e.arg2
						},
						set aniarg2(e) {
							this.setaniarg(2, e)
						},
						get aniarg3() {
							return e.arg3
						},
						set aniarg3(e) {
							this.setaniarg(3, e)
						},
						get aniarg4() {
							return e.arg4
						},
						set aniarg4(e) {
							this.setaniarg(4, e)
						},
						get aniarg5() {
							return e.arg5
						},
						set aniarg5(e) {
							this.setaniarg(5, e)
						},
						get aniarg6() {
							return e.arg6
						},
						set aniarg6(e) {
							this.setaniarg(6, e)
						},
						get aniarg7() {
							return e.arg7
						},
						set aniarg7(e) {
							this.setaniarg(7, e)
						},
						get aniarg8() {
							return e.arg8
						},
						set aniarg8(e) {
							this.setaniarg(8, e)
						},
						get aniarg9() {
							return e.arg9
						},
						set aniarg9(e) {
							this.setaniarg(9, e)
						},
						setaniarg: function(t, n) {
							if (isInt(t) && t >= 1 && t <= 9) {
								var r = {};
								e["arg" + t] = r["arg" + t] = n
							}
						},
						get emitters() {
							return e.emitters
						},
						set emitters(t) {
							e.emitters = t
						},
						get x() {
							return e.gridX
						},
						get y() {
							return e.gridY
						},
						get z() {
							return e.z
						},
						get dir() {
							return Types.convertOrientationToDirection(e.dir)
						},
						set dir(e) {
							this.setdir(e)
						},
						setdir: function(t) {
							t = Types.convertDirectionToOrientation(t), t != e.dir && (e.dir = t, e.moveprediction || e._resyncMoveXX())
						},
						offsetx: function(t) {
							return Types.addOffsetInOrientation(e.gridX, e.gridY, e.dir, t).x
						},
						offsety: function(t) {
							return Types.addOffsetInOrientation(e.gridX, e.gridY, e.dir, t).y
						},
						setfocus: function(t, n, r) {
							e.setFocus(t, {
								x: n,
								y: r
							})
						},
						resetfocus: function() {
							e.setFocus(null, null)
						},
						get level() {
							return e.level ? e.level : 0
						},
						get effect() {
							return e.effect ? e.effect.type : null
						},
						setambient: function(t, n, r) {
							e.game.renderer.context.setAmbientColor(t, n, r)
						},
						screenshake: function(t) {
							e.setScreenShake(t.strength, t.duration)
						},
						showpm: function(t, n, r, i) {
							var s = "script";
							r && typeof r == "function" && (i = r, r = {}), r || (r = {});
							if (r.mapmarkers) {
								var o = e.game.mapmanager.getMap(e.game.mapmanager.getDefaultOutsideMap());
								if (!o) return;
								r.mapmarkers = {
									map: o.mapname,
									width: o.width,
									height: o.height,
									offsetx: o.offsetx,
									offsety: o.offsety,
									markers: r.mapmarkers
								}
							}
							r.type && (s = r.type, delete r.type), e.game.showPMButton(s, 0, n || {
								name: "Server",
								isadmin: !0,
								isonline: !0
							}, t, r, 0)
						},
						showurl: function(t) {
							e.game.shop.showURL(t, "inside")
						},
						showmessage: function(t, n) {
							e.game.showShortMessage(translate(t, n))
						},
						freeze: function(t) {
							e.attackfreezetime = e.attackfiretime = e.game.currentTime + t * 1e3
						},
						get language() {
							return e.game.app.language
						},
						attack: function() {
							e.game.client && e.game.client.sendAttack(), e.activateNPCs(e.dir, "sword")
						}
					}
				}
				return this.scriptObject
			}
		});
		return r
	}), define("client", ["character", "player", "newnpc", "config"], function(e, t, n, r) {
		var i = Class.extend({
			init: function(e, t) {
				this.connection = null, this.serverurl = e, this.game = t, this.initPing(), this.handlers = [], this.handlers[Types.Messages.SYSTEM] = this.receiveSystem, this.handlers[Types.Messages.WELCOME] = this.receiveWelcome, this.handlers[Types.Messages.ATTACK] = this.receiveAttack, this.handlers[Types.Messages.SPAWN] = this.receiveSpawn, this.handlers[Types.Messages.DESPAWN] = this.receiveDespawn, this.handlers[Types.Messages.PROJECTILE] = this.receiveProjectile, this.handlers[Types.Messages.MOVEXX] = this.receiveMoveXX, this.handlers[Types.Messages.MAPSTREAM] = this.receiveMapStream, this.handlers[Types.Messages.HEALTH] = this.receiveHealth, this.handlers[Types.Messages.CHAT] = this.receiveChat, this.handlers[Types.Messages.WEATHER] = this.receiveWeather, this.handlers[Types.Messages.SCORES] = this.receiveScores, this.handlers[Types.Messages.TELEPORT] = this.receiveTeleport, this.handlers[Types.Messages.DAMAGE] = this.receiveDamage, this.handlers[Types.Messages.MODALMESSAGE] = this.receiveModalMessage, this.handlers[Types.Messages.LIST] = this.receiveList, this.handlers[Types.Messages.HP] = this.receiveMaxHitPoints, this.handlers[Types.Messages.MAPMOVE] = this.receiveMapmove, this.handlers[Types.Messages.GENERALMESSAGE] = this.receiveGeneralMessage, this.handlers[Types.Messages.OBJECTDATA] = this.receiveObjectData, this.handlers[Types.Messages.MAPINFO] = this.receiveMapInfo, this.handlers[Types.Messages.AUDIO] = this.receiveAudio, this.handlers[Types.Messages.PROFILE] = this.receiveProfile, this.handlers[Types.Messages.ASKBUYITEM] = this.receiveAskBuyItem, this.handlers[Types.Messages.INVENTORY] = this.receiveInventory, this.handlers[Types.Messages.ACHIEVEMENTS] = this.receiveAchievements, this.handlers[Types.Messages.CLANACTION] = this.receiveClanAction, this.handlers[Types.Messages.SHORTMESSAGE] = this.receiveShortMessage, this.handlers[Types.Messages.PM] = this.receivePM, this.handlers[Types.Messages.NOTIFICATION] = this.receiveNotification, this.handlers[Types.Messages.BUILDINFO] = this.receiveBuildInfo, this.handlers[Types.Messages.MYHOUSES] = this.receiveMyHouses, this.handlers[Types.Messages.FURNITUREINFO] = this.receiveFurnitureInfo, this.handlers[Types.Messages.SELLITEMS] = this.receiveSellItems, this.handlers[Types.Messages.MAPMARKERS] = this.receiveMapMarkers, this.handlers[Types.Messages.PING] = this.receivePing, this.handlers[Types.Messages.PONG] = this.receivePong, this.handlers[Types.Messages.FRIENDS] = this.receiveFriends, this.handlers[Types.Messages.WINNER] = this.receiveWinner, this.handlers[Types.Messages.CONSOLECHAT] = this.receiveConsoleChat, this.handlers[Types.Messages.HOUSEINFO] = this.receiveHouseInfo, this.handlers[Types.Messages.UPLOADACTION] = this.receiveUploadAction, this.handlers[Types.Messages.ADMININVENTORY] = this.receiveAdminInventory, this.handlers[Types.Messages.BUYCOINS] = this.receiveBuyCoins, this.handlers[Types.Messages.OFFERS] = this.receiveOffers, this.handlers[Types.Messages.ITEMDATA] = this.receiveItemData, this.handlers[Types.Messages.PROJECTILEINFO] = this.receiveProjectileInfo, this.handlers[Types.Messages.USERPMS] = this.receiveUserPMs, this.handlers[Types.Messages.LISTMESSAGES] = this.receiveMessageList, this.handlers[Types.Messages.EVENTINFO] = this.receiveEventInfo, this.handlers[Types.Messages.SHOWURL] = this.receiveShowURL, this.handlers[Types.Messages.FOCUS] = this.receiveFocus, this.handlers[Types.Messages.SHOWVS] = this.receiveShowVS, this.handlers[Types.Messages.SHOWVSCLANS] = this.receiveShowVSClans, this.handlers[Types.Messages.SHOWVSWINNER] = this.receiveShowVSWinner, this.handlers[Types.Messages.SHOWVSCLANWINNER] = this.receiveShowVSClanWinner, this.handlers[Types.Messages.STORYACTION] = this.receiveStoryAction, this.handlers[Types.Messages.TRADEACTION] = this.receiveTradeAction, this.handlers[Types.Messages.NPCTRIGGER] = this.receiveNPCTrigger, this.handlers[Types.Messages.IDENTIFY] = this.receiveIdentify, this.handlers[Types.Messages.CLIENTCLASS] = this.receiveClientClass, this.handlers[Types.Messages.PLAYERANIS] = this.receivePlayerAnis, this.handlers[Types.Messages.MENUBUTTONS] = this.receiveMenuButtons, this.handlers[Types.Messages.AMBIENTCOLOR] = this.receiveAmbientColor, this.handlers[Types.Messages.MAILINGACTION] = this.receiveMailingAction
			},
			initPing: function() {
				this.pinginterval = 1e4, this.lastping = {
					id: 0,
					time: (new Date).getTime() - this.pinginterval * .9
				}, this.nextpingid = 1, this.lastpingtime = 0, this.showping = !1
			},
			connect: function() {
				var e = this;
				e.wasconnected = !1, this.connectionTime = (new Date).getTime(), gui.setUnload(function() {
					e.connection && e.connection.close()
				}), window.MozWebSocket ? this.connection = new MozWebSocket(this.serverurl) : this.connection = new WebSocket(this.serverurl), this.connection.onopen = function(t) {
					e.wasconnected = !0
				}, this.connection.onmessage = function(t) {
					switch (t.data) {
						case "go":
							e.sendHandShake();
							break;
						case "timeout":
							e.isTimeout = !0;
							break;
						case "nogameserver":
							e.isNoGameServer = !0;
							break;
						default:
							t.data.substr(0, 4) == "[go," && (e.sendHandShake(), t.data = "[" + t.data.substr(4)), e.receiveMessage(t.data)
					}
				}, this.connection.onerror = function(t) {
					window.console && console.log("Connection error"), e.logError("Connection error: " + t.data)
				}, this.connection.onclose = function(t) {
					window.console && console.log("Connection closed"), e.game.player && e.game.player.die();
					var n, i = !0;
					e.isTimeout ? n = "You have been disconnected for being inactive for too long" : e.isNoGameServer ? n = "The game server is currently down. Please try later" : e.wasconnected ? (n = "The connection to " + r.gamename + " has been lost", i = !1) : n = "The connection to " + r.gamename + " couldn't be established.", i && e.logError("Disconnected: " + n + " (code: " + t.code + ", reason: " + t.reason + ")"), e.game.onDisconnect(n)
				}
			},
			logError: function(e) {
				if (this.serverurl.indexOf("127.0.0.1") >= 0) return;
				var t = (new Date).getTime(),
					n = this.connectionTime ? t - this.connectionTime : -1;
				gui.callURL("errorlog2.php", {
					message: e.substring(0, 2e3),
					time: n
				})
			},
			sendHandShake: function() {
				window.console && console.log("Connecting to server");
				if (!this.game.player) return;
				var e = this.game.storage.getCookie(),
					t = this.game.storage.getCookie2();
				this.game.started = !0, this.sendMessage([Types.Messages.HELLO, e, this.game.player.name, t ? t : "", this.game.app.language]), this.game.shop.hasExternInterfaceVersion(1.2) && this.game.shop.sendCookie(e, t)
			},
			sendMessage: function(e) {
				this.connection.readyState === 1 && this.connection.send(JSON.stringify(e))
			},
			receiveMessage: function(e) {
				var t;
				try {
					t = JSON.parse(e)
				} catch (n) {
					this.logError("Syntax error: " + n + ", data: " + e);
					return
				}
				if (t instanceof Array) {
					var r = t[0];
					if (r instanceof Array) {
						var i = this;
						_.each(t, function(e) {
							var t = e[0];
							i.handlers[t] && i.handlers[t].call(i, e)
						})
					} else this.handlers[r] && this.handlers[r].call(this, t)
				}
			},
			receiveSystem: function(e) {
				switch (e[1]) {
					case "go":
						this.sendHandShake();
						break;
					case "timeout":
						this.isTimeout = !0;
						break;
					case "nogameserver":
						this.isNoGameServer = !0
				}
			},
			receiveWelcome: function(e) {
				var t = this.game.player;
				if (!t) return;
				var n = e[7] && e[7].ghost;
				n || this.game.finishedIdentify(), this.game.scriptmanager.onConnected(), t.game = this.game, t.id = e[1], t.isDead = !1, this.game.playerId = t.id, this.game.mapmanager.loadMap(e[2], e[3]), t.setGridPosition(e[4], e[5]), t.setMaxHitPoints(e[6], !0), t.setExtendedData(e[7]), this.game.resetCamera(), this.game.addEntity(t), this.game.storage.setPlayerName(t.name), this.game.shop.sendConnectedToServer(), Config_Extern && this.game.shop.requestPushNotifications(), this.game.hasNeverStarted && this.game.start(), this.game.onEnteredMap(e[2], e[3]), this.game.resendShowConsole(), this.game.tradingmanager.handleTradeAction("stoptrade")
			},
			receiveAttack: function(e) {
				var t = this.game.getEntityById(e[1]);
				if (!t) return;
				this.game.player && this.game.player.checkBeingHurt(t)
			},
			receiveSpawn: function(e) {
				var r = this.game.getEntityById(e[1]);
				r || (e[2] == Types.Entities.WARRIOR ? r = new t(e[1], Types.Entities.WARRIOR) : r = new n(e[1])), r.game = this.game, r.setExtendedData(e[5]), r.setGridPosition(e[3], e[4]), r != this.game.player && !this.game.entityIdExists(r.id) && (r.idle(), this.game.addEntity(r))
			},
			receiveDespawn: function(t) {
				var n = this.game.getEntityById(t[1]);
				if (!n) return;
				n instanceof e && t[2] ? n.die(t.length >= 4 ? t[3] : null) : this.game.removeEntity(n)
			},
			receiveHealth: function(e) {
				var t = this.game.player;
				t && t.updateHitPoints(e[1], e[2], e.length >= 4 ? e[3] : null)
			},
			receiveChat: function(e) {
				var t = this.game.getEntityById(e[1]);
				t && (t.chat = e[2], t.showChat(t.chat))
			},
			receiveWeather: function(e) {
				this.game.animationmanager.setWeather(e[1])
			},
			receiveScores: function(e) {
				this.game.menu.setPlayerScores(e[1], e[2], e[3])
			},
			receiveTeleport: function(e) {
				var t = this.game.getEntityById(e[1]);
				if (t && !this.game.mapmanager.isOutOfBounds(parseInt(e[2]), parseInt(e[3]))) {
					var n = t.dir;
					t.setGridPosition(e[2], e[3]), t.onHasMoved(), t.setOrientation(n), t == this.game.player && e.length >= 5 && this.game.player.handleTeleport(e[4])
				}
				e[1] == this.game.playerId && this.game.resetCamera()
			},
			receiveDamage: function(e) {
				var t = this.game.getEntityById(e[1]);
				t && t.updateDamage(e[2], e.length >= 4 && e[3] ? e[3] : "inflicted", e.length >= 6 ? e[4] : null, e.length >= 6 ? e[5] : null)
			},
			receiveModalMessage: function(e) {
				this.game.menu.showModalMessage(e[1], e[2], e.length >= 4 ? e[3] : null)
			},
			receiveList: function(e) {
				e.shift();
				var n = _.pluck(this.game.entities, "id"),
					r = _.intersection(n, e),
					i = _.difference(e, r),
					s = this;
				this.game.removeObsoleteEntities(_.reject(this.game.entities, function(e) {
					return _.include(r, e.id) || e instanceof t
				})), _.size(i) > 0 && this.sendWho(i), this.game.npcsFinishedLoading || (this.game.npcsFinishedLoading = !0, this.game.checkHideStartScreen())
			},
			receiveMaxHitPoints: function(e) {
				this.game.player && this.game.player.setMaxHitPoints(e[1], !1)
			},
			receiveMapmove: function(e) {
				if (e[1] != this.game.playerId) return;
				var t = this.game.getEntityById(e[1]);
				if (!t) return;
				t.idle(), this.game.removeEntity(t), this.game.mapmanager.loadMap(e[4], e[5]), t.setGridPosition(e[2], e[3]), this.game.addEntity(t), this.game.resetCamera(), this.game.onEnteredMap(e[4], e[5]), this.game.lastdoor = null
			},
			receiveGeneralMessage: function(e) {
				this.game.showGeneralMessage(e[1])
			},
			receiveObjectData: function(e) {
				var t = this.game.getEntityById(e[1]);
				t && t.setExtendedData(e[2])
			},
			receiveMapInfo: function(e) {
				this.game.minimap.setMapInfo(e[1])
			},
			receiveAudio: function(e) {
				var t = this.game.getEntityById(e[1]);
				t && this.game.renderer.camera.isVisible(t) && this.game.sounds.play(e[2])
			},
			receiveProfile: function(e) {
				this.game.menu.showPlayerProfile(e[1])
			},
			receiveAskBuyItem: function(e) {
				this.game.shop.askBuyItem(e[1])
			},
			receiveInventory: function(e) {
				this.game.menu.addInventoryItems(e[1])
			},
			receiveAchievements: function(e) {
				this.game.menu.addAchievements(e[1])
			},
			receiveClanAction: function(e) {
				this.game.menu.handleClanAction(e[1], e[2])
			},
			receiveShortMessage: function(e) {
				this.game.showShortMessage(e[1])
			},
			receivePM: function(e) {
				this.game.showPMButton(e[1], e[2], e[3], e[4], e[5], e[6])
			},
			receiveNotification: function(e) {
				this.game.showNotification(e[1], e[2], e[3], e[4], e[5], e[6])
			},
			receiveBuildInfo: function(e) {
				this.game.menu.showBuildInfo(e[1])
			},
			receiveMyHouses: function(e) {
				this.game.menu.setMyHouses(e[1])
			},
			receiveFurnitureInfo: function(e) {
				this.game.menu.showEditFurniture(e[1])
			},
			receiveSellItems: function(e) {
				this.game.shop.showSellItems(e[1])
			},
			receiveProjectile: function(e) {
				this.game.mapmanager.currentmap && this.game.mapmanager.currentmap.projectiles.createProjectile(e[1], e[2], e[3], e[4], e[5], e[6], !1)
			},
			receiveMapMarkers: function(e) {
				this.game.menu.showMap(e[1])
			},
			receivePing: function(e) {
				this.sendMessage([Types.Messages.PONG, e[1], this.lastpingtime])
			},
			receivePong: function(e) {
				var t = e[1];
				if (!this.lastping || t != this.lastping.id) return;
				this.lastpingtime = (new Date).getTime() - this.lastping.time, this.showping && this.game.showPing(this.lastpingtime)
			},
			receiveMoveXX: function(t) {
				var n = this.game.getEntityById(t[1]);
				n && n instanceof e && n.moveXX(t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12])
			},
			receiveMapStream: function(e) {
				var t = this.game.mapmanager.currentmap;
				t && t.mapname == e[1] && t.addStreamData(e[2])
			},
			receiveFriends: function(e) {
				this.game.menu.showFriends(e[1])
			},
			receiveWinner: function(e) {
				this.game.minimap.drawWinner(e[1], e[2])
			},
			receiveConsoleChat: function(e) {
				this.game.addConsoleText(e[2])
			},
			receiveHouseInfo: function(e) {
				this.game.menu.showEditHouse(e[1])
			},
			receiveUploadAction: function(e) {
				this.game.menu.handleUploadAction(e[1], e[2])
			},
			receiveAdminInventory: function(e) {
				this.game.menu.handleAdminInventory(e[1], e[2])
			},
			receiveBuyCoins: function(e) {
				this.game.shop.showBuyCoinsDialog(e[1], "clientbuycoins")
			},
			receiveOffers: function(e) {
				this.game.shop.showOffers(e[1])
			},
			receiveItemData: function(e) {
				if (!this.game.player) return;
				this.game.player.setItemData(e[1], e[2])
			},
			receiveProjectileInfo: function(e) {
				this.game.projectileInfo = e[1]
			},
			receiveUserPMs: function(e) {
				this.game.menu.setUserPMs(e[1], e[2])
			},
			receiveMessageList: function(e) {
				this.game.menu.showMessageList(e[1], !1, 0)
			},
			receiveEventInfo: function(e) {
				this.game.menu.showEventInfo(e[1])
			},
			receiveShowURL: function(e) {
				this.game.shop.showURL(e[1], e[2])
			},
			receiveFocus: function(e) {
				this.game.player && this.game.player.setFocus(e[1], e[2])
			},
			receiveShowVS: function(e) {
				this.game.showVS(e[1], e[2])
			},
			receiveShowVSClans: function(e) {
				this.game.showVSClans(e[1], e[2])
			},
			receiveShowVSWinner: function(e) {
				this.game.showVSWinner(e[1], e[2])
			},
			receiveShowVSClanWinner: function(e) {
				this.game.showVSClanWinner(e[1])
			},
			receiveStoryAction: function(e) {
				this.game.storymanager.handleStoryAction(e[1], e[2])
			},
			receiveTradeAction: function(e) {
				this.game.tradingmanager.handleTradeAction(e[1], e[2])
			},
			receiveNPCTrigger: function(e) {
				var t = e[1];
				if (typeof t == "object") switch (t.type) {
					case "weapon":
						r = player.weaponnpc;
						break;
					case "npc":
						r = this.game.getEntityById(t.id);
						break;
					case "menu":
						r = this.game.scriptmanager.getMenuButtonNPCById(t.id)
				} else var r = this.game.getEntityById(t);
				r && r instanceof n && r.handleTrigger(e[2], e.length >= 4 ? e[3] : null)
			},
			receiveIdentify: function(e) {
				this.game.receivedIdentifyInfo(e[1], e[2])
			},
			receiveClientClass: function(e) {
				this.game.scriptmanager.setClientClass(e[1], e[2])
			},
			receivePlayerAnis: function(e) {
				this.game.animationmanager.setPlayerAnis(e[1])
			},
			receiveMenuButtons: function(e) {
				this.game.menu.setMenuButtons(e[1])
			},
			receiveAmbientColor: function(e) {
				this.game.renderer.context.setAmbientColor(e[1], e[2], e[3])
			},
			receiveMailingAction: function(e) {
				this.game.menu.handleMailingAction(e[1], e[2])
			},
			sendMapMove: function(e, t, n) {
				this.sendMessage([Types.Messages.MAPMOVE, e, t, n])
			},
			sendAttack: function() {
				this.sendMessage([Types.Messages.ATTACK, -1])
			},
			sendHurt: function(e) {
				this.sendMessage([Types.Messages.HURT, e.id])
			},
			sendHurtProjectile: function(e, t) {
				this.sendMessage([Types.Messages.HURTPROJECTILE, e, t])
			},
			sendChat: function(e) {
				this.sendMessage([Types.Messages.CHAT, e])
			},
			sendWho: function(e) {
				e.unshift(Types.Messages.WHO), this.sendMessage(e)
			},
			sendPayment: function(e, t, n, r, i) {
				this.sendMessage([Types.Messages.PAYMENT2, e, Math.floor(t), "" + n, r, i])
			},
			sendBuildObject: function(e) {
				this.sendMessage([Types.Messages.BUILDOBJECT, e])
			},
			sendNPCTrigger: function(e, t, n) {
				this.sendMessage([Types.Messages.NPCTRIGGER, e, t, n])
			},
			sendRequestPlayerProfile: function(e) {
				this.sendMessage([Types.Messages.GETPROFILE, e.id])
			},
			sendBuyItem: function(e) {
				this.sendMessage([Types.Messages.BUYITEM, e])
			},
			sendRevive: function() {
				this.sendMessage([Types.Messages.REVIVE])
			},
			sendShare: function(e, t) {
				this.sendMessage([Types.Messages.SHARED, e, t])
			},
			sendPlaceObject: function(e) {
				this.sendMessage([Types.Messages.PLACEOBJECT, e])
			},
			sendPushToken: function(e) {
				this.sendMessage([Types.Messages.PUSHTOKEN, e])
			},
			sendGetInventory: function() {
				this.sendMessage([Types.Messages.GETINVENTORY])
			},
			sendUseInventory: function(e, t) {
				this.sendMessage([Types.Messages.USEINVENTORY, e, t])
			},
			sendGetAchievements: function() {
				this.sendMessage([Types.Messages.ACHIEVEMENTS])
			},
			sendClanAction: function(e, t) {
				this.sendMessage([Types.Messages.CLANACTION, e, t])
			},
			sendFeedback: function(e) {
				this.sendMessage([Types.Messages.FEEDBACK, e])
			},
			sendGoToHouse: function(e, t) {
				this.sendMessage([Types.Messages.GOTOHOUSE, e, t])
			},
			sendRequestDBPlayerProfile: function(e) {
				this.sendMessage([Types.Messages.GETPROFILEDB, e])
			},
			sendGetMyHouses: function() {
				this.sendMessage([Types.Messages.GETMYHOUSES])
			},
			sendPMAction: function(e, t) {
				this.sendMessage([Types.Messages.PMACTION, e, t])
			},
			sendSellItem: function(e, t) {
				this.sendMessage([Types.Messages.SELLITEM, e, t])
			},
			sendGetMapMarkers: function(e) {
				this.sendMessage([Types.Messages.GETMAPMARKERS, e])
			},
			sendProjectile: function(e, t, n, r, i) {
				this.sendMessage([Types.Messages.PROJECTILE, e, Math.floor(t * 100) / 100, Math.floor(n * 100) / 100, Math.floor(r * 100) / 100, Math.floor(i * 1e3) / 1e3])
			},
			sendPing: function() {
				if (this.lastping && this.game.currentTime < this.lastping.time + this.pinginterval) return;
				var e = this.nextpingid++;
				this.lastping = {
					id: e,
					time: (new Date).getTime()
				}, this.sendMessage([Types.Messages.PING, e, this.lastpingtime])
			},
			sendMoveXX: function(e, t, n, r, i, s, o, u) {
				var a = [Types.Messages.MOVEXX, e, Math.floor(t * 100) / 100, Math.floor(n * 100) / 100, Math.floor(r * 100) / 100, i],
					f = this.game.player ? this.game.player.attachInfo : null;
				if (s != 0 || o != 0 || u != 0 || f) {
					a.push(s), a.push(o);
					if (u != 0 || f) a.push(Math.floor(u * 100) / 100), f && f.object && (a.push(f.id), a.push(Math.floor((t - f.object.gridX) * 100) / 100), a.push(Math.floor((n - f.object.gridY) * 100) / 100))
				}
				this.sendMessage(a)
			},
			sendAni: function(e) {
				this.sendMessage([Types.Messages.ANI, e])
			},
			sendSetSettings: function(e) {
				this.sendMessage([Types.Messages.SETSETTINGS, e])
			},
			sendConsoleChat: function(e, t) {
				this.sendMessage([Types.Messages.CONSOLECHAT, e, t])
			},
			sendRemoveSidekicks: function() {
				this.sendMessage([Types.Messages.REMOVESIDEKICKS])
			},
			sendKickVisitors: function() {
				this.sendMessage([Types.Messages.KICKVISITORS])
			},
			sendIsTalking: function(e) {
				this.sendMessage([Types.Messages.ISTALKING, e ? 1 : 0])
			},
			sendSaveStatus: function(e, t) {
				this.sendMessage([Types.Messages.SAVESTATUS, e, t])
			},
			sendUnlockStatus: function(e) {
				this.sendMessage([Types.Messages.UNLOCKSTATUS])
			},
			sendUploadAction: function(e, t) {
				this.sendMessage([Types.Messages.UPLOADACTION, e, t])
			},
			sendGetAdminInventory: function(e) {
				this.sendMessage([Types.Messages.ADMININVENTORY, parseInt(e)])
			},
			sendGetOffers: function() {
				this.sendMessage([Types.Messages.GETOFFERS])
			},
			sendTrackAction: function(e, t, n) {
				this.sendMessage([Types.Messages.TRACKACTION, e, t, n])
			},
			sendLike: function(e, t) {
				this.sendMessage([Types.Messages.LIKE, e, t ? 1 : 0])
			},
			sendGetScores: function(e, t) {
				this.sendMessage([Types.Messages.SCORES, e, t])
			},
			sendHotkey: function(e, t) {
				this.sendMessage([Types.Messages.HOTKEY, e, t])
			},
			sendEventInfo: function(e) {
				this.sendMessage([Types.Messages.EVENTINFO, e])
			},
			sendStoryAction: function(e, t) {
				this.sendMessage([Types.Messages.STORYACTION, e, t])
			},
			sendTradeAction: function(e, t) {
				this.sendMessage([Types.Messages.TRADEACTION, e, t])
			},
			sendIdentify: function(e, t) {
				this.sendMessage([Types.Messages.IDENTIFY, e, t])
			},
			sendGetClientClasses: function(e) {
				this.sendMessage([Types.Messages.CLIENTCLASS, e])
			},
			sendAddNPC: function(e) {
				this.sendMessage([Types.Messages.ADDNPC, e])
			},
			sendLagLog: function(e, t, n, r) {
				this.sendMessage([Types.Messages.LAGLOG, e, t, n, r])
			}
		});
		return i
	}), define("sounds", [], function() {
		var e = Class.extend({
			init: function(e) {
				this.game = e, this.currentmusic = null, this.scriptmusic = null, this._initAudioContext(), this._preloadSounds()
			},
			_preloadSounds: function() {
				if (!this.audiocontext) return;
				this.soundNamesPreload = ["hit1"];
				var e = this;
				_.each(e.soundNamesPreload, function(t) {
					e._loadContextBuffer(t)
				})
			},
			_initAudioContext: function() {
				this.contextbuffers = {};
				try {
					window.AudioContext ? this.audiocontext = new AudioContext : this.audiocontext = new webkitAudioContext, this.audiocontext && window.console && console.log("Initialized audio")
				} catch (e) {
					window.console && console.log("Audio Context API is not supported in this browser, using audio-tag"), this.audiocontext = null
				}
			},
			_loadContextBuffer: function(e, t) {
				if (!e || e.length <= 0 || e == "null") return;
				var n = "../files/sounds/" + e + ".wav",
					r = new XMLHttpRequest;
				r.open("GET", n, !0), r.responseType = "arraybuffer";
				var i = this;
				r.onload = function() {
					i.audiocontext.decodeAudioData(r.response, function(n) {
						if (!n) {
							window.console && console.log("Error decoding audio file data: " + e);
							return
						}
						i.contextbuffers[e] = n, t && i._playBuffer(n)
					}, function(t) {
						window.console && console.log("Error decoding audio data: " + e, t)
					})
				}, r.onerror = function() {
					window.console && console.log("Error loading audio data: " + e)
				}, r.send()
			},
			play: function(e) {
				if (!e || e.length <= 0) return;
				if (this.game.settings.soundsoff || !this.audiocontext) return;
				if (!this.game.gameVisible) return;
				var t = this.contextbuffers[e];
				t ? this._playBuffer(t) : this._loadContextBuffer(e, !0)
			},
			_playBuffer: function(e) {
				var t = this.audiocontext.createBufferSource();
				t.buffer = e, t.connect(this.audiocontext.destination), t.start ? t.start(0) : t.noteOn && t.noteOn(0)
			},
			setScriptMusic: function(e) {
				if (e == this.scriptmusic) return;
				var t = this.game.mapmanager.currentmap;
				if (!t) return;
				this.scriptmusic = e, this.scriptmusicmap = t.templatename, this.updateMusic()
			},
			updateMusic: function() {
				if (this.game.settings.musicoff) return;
				var e = null,
					t = this.game.mapmanager.currentmap;
				t && this.game.player && (this.scriptmusic && (this.scriptmusicmap == t.templatename ? e = this.scriptmusic : this.scriptmusic = null), e || (t.templatename == "main" ? this.game.player.isInRectangle({
					x: 96,
					y: 80,
					w: 68,
					h: 86
				}) || (e = this.game.app.config.music) : e = t.properties.music));
				if (e == this.currentmusic) return;
				if (!e) {
					this.stopMusic();
					return
				}
				this._playMusicOrPlaylist(e)
			},
			stopMusic: function() {
				if (this.musicHandle) {
					var e = this;
					this._fadeMusic(-2.5, function() {
						e.musicHandle.pause(), e.musicHandle = null
					})
				}
				this.currentmusic = null
			},
			_playMusicOrPlaylist: function(e) {
				this.currentmusic = e;
				if (e.indexOf(".m3u") >= 0 && !(window.navigator && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome"))) {
					var t = this;
					gui.ajax(e, !1, function(n) {
						var r = n.replace(/^.*#.*$|#EXTM3U|#EXTINF:/mg, "").split("\n");
						if (r.length <= 0) {
							window.console && console.log("Error playlist is empty: " + e, n);
							return
						}
						t._playMusic(r[0])
					}, function(t, n, r) {
						window.console && console.log("Error loading playlist: " + e)
					});
					return
				}
				this._playMusic(e)
			},
			_playMusic: function(e) {
				if (this.musicHandle) {
					var t = this;
					this._fadeMusic(-2, function() {
						t._playMusic_NoCheck(e)
					});
					return
				}
				this._playMusic_NoCheck(e)
			},
			_playMusic_NoCheck: function(e) {
				this.musicHandle = document.createElement("audio");
				if (!this.musicHandle) return;
				var t = this;
				this.musicHandle.addEventListener("error", function(n) {
					window.console && console.log("Error: " + e + " could not be loaded"), t.musicHandle = null
				}, !1), this.musicHandle.addEventListener("canplaythrough", function(e) {
					t.musicHandle && (t.musicHandle.removeEventListener("canplaythrough", arguments.callee, !1), t.musicHandle.play(), t.game.renderer.isMobile || (t.musicHandle.volume = 0), t._fadeMusic(2))
				}, !1), this.musicHandle.preload = "auto", this.musicHandle.autobuffer = !0, this.musicHandle.loop = !0, this.musicHandle.addEventListener("ended", function() {
					t.musicHandle.play()
				}, !1), this.musicHandle.src = e.indexOf("://") >= 0 ? e : "../files/music/" + e, this.musicHandle.load()
			},
			_fadeMusic: function(e, t) {
				if (!this.musicHandle) return;
				if (this.game.renderer.isMobile) {
					t && t();
					return
				}
				this._clearFadeMusic();
				var n = this,
					r = 1 / (e * this.game.fps);
				this.musicFadeInterval = setInterval(function() {
					if (!n.musicHandle) {
						n._clearFadeMusic();
						return
					}
					var i = n.musicHandle.volume + r;
					(e > 0 ? i < 1 : i > 0) ? n.musicHandle.volume = i: (n.musicHandle.volume = e > 0 ? 1 : 0, n._clearFadeMusic(), t && t())
				}, 1e3 / this.game.fps)
			},
			_clearFadeMusic: function() {
				this.musicFadeInterval && (clearInterval(this.musicFadeInterval), delete this.musicFadeInterval)
			}
		});
		return e
	}), define("menu", [], function() {
		var e = Class.extend({
			init: function(e) {
				this.game = e, this.currentPopupType = null, this.mailingMenus = ["mailing", "mailingnew"], XMLHttpRequest.prototype.sendAsBinary === undefined && (XMLHttpRequest.prototype.sendAsBinary = function(e) {
					var t = Array.prototype.map.call(e, function(e) {
						return e.charCodeAt(0) & 255
					});
					this.send((new Uint8Array(t)).buffer)
				})
			},
			showPopUp: function(e) {
				e = e || {};
				var t = (translate(e.title) || "").replace("<br>", ""),
					n = e.popupType || "",
					r = e.width || 600,
					i = e.height || 400,
					s = this.game.app.config.enablenewgui;
				n && this.getCurrentMenu() == n && this.closePopUpNow(n);
				var o = document.createElement("div");
				o.id = "modal_background";
				var u = gui.getDom("gamecontainer");
				u.appendChild(o);
				var a = document.createElement("div");
				a.id = "newpopup", a.className = "windowborder", a.style.width = r + "px", a.style.height = Math.min(i, u.offsetHeight - 128) + "px", u.appendChild(a), this.currentPopupType = n;
				var f = document.createElement("div");
				f.className = "titletext", t.length >= 15 && (f.style.fontSize = "30px"), e.titleCallback && (gui.setClick(f, e.titleCallback), f.style.cursor = "pointer"), f.innerHTML = t, a.appendChild(f);
				if (e.showbadge) {
					var l = document.createElement("div");
					l.className = "gameadminbadge", a.appendChild(l)
				}
				if (!e.hideclosebutton) {
					var c = document.createElement("div");
					c.className = "closebutton", c.id = "closebutton";
					var h = this;
					e.closeCallback ? gui.setClick(c, e.closeCallback) : gui.setClick(c, function(e) {
						h.closePopUp()
					});
					var p = document.createElement("div");
					p.className = "closebuttonimage", c.appendChild(p), a.appendChild(c)
				}
				var d = document.createElement("div");
				return d.id = "newpopup_dialog", d.style.position = "absolute", d.style.left = s && !e.noborders ? "24px" : "0px", d.style.top = "60px", d.style.width = s && !e.noborders ? "calc(100% - 24px)" : "100%", d.style.height = i + 32 + (e.noborders ? 8 : 0) + "px", d.style.maxHeight = "calc(100% - " + (s ? 60 : 46) + "px)", d.style.overflow = e.overlap ? "initial" : "hidden", a.appendChild(d), gui.animate(o, 1, "fast"), gui.animate(a, 1, "normal"), gui.animate(c, 1, "normal"), d
			},
			closePopUp: function(e) {
				this.game.tradingmanager.checkStopTradeOnMenuClose(), gui.animate("modal_background", 0, "normal", function() {
					gui.remove("modal_background"), e && e()
				}), gui.animate("newpopup", 0, "fast", function() {
					gui.remove("newpopup")
				})
			},
			closePopUpNow: function(e) {
				this.game.tradingmanager.checkStopTradeOnMenuClose(e), gui.stop("modal_background", !0, !0), gui.remove("modal_background"), gui.stop("newpopup", !0, !0), gui.remove("newpopup")
			},
			showWaitingScreen: function(e, t) {
				var n = this.showPopUp({
					title: e,
					hideclosebutton: !0,
					popupType: "waitingscreen"
				});
				n.innerHTML = '<div style="font-size:24px;"><br><br><br><center>' + t + '<br><br><img src="../files/gui/bbuilder_spinner.gif"></center>' + "</div>", this.addMainBackButton(n)
			},
			showModalMessage: function(e, t, n) {
				this.closePopUpNow();
				var r = this.showPopUp({
					title: n ? translate(n) : "",
					hideclosebutton: !t,
					popupType: "modalmessage",
					width: 440,
					height: 240
				});
				r.innerHTML = '<div style="font-size:24px; margin: auto 0 auto 0;"><center>' + translate(e) + "</center></div>"
			},
			setMenuButtons: function(e) {
				this.serverMenuButtons = e
			},
			addMenuButtons: function(e, t) {
				if (!this.serverMenuButtons) return;
				for (var n in this.serverMenuButtons) {
					var r = this.serverMenuButtons[n];
					r["menu"] == t && e.push(this.getMenuButtonItem(r))
				}
			},
			getMenuButtonItem: function(e) {
				this.game.scriptmanager.requestScriptClasses(e.scriptclasses);
				var t = this;
				return {
					serverButton: e,
					image: e.image,
					text: e.text,
					help: e.help,
					callback: function(n) {
						t.runMenuScript(e)
					}
				}
			},
			runMenuScript: function(e) {
				var t = this.game.scriptmanager.getMenuButtonNPC(e);
				if (t) {
					var n = this.getCurrentMenu();
					this.closePopUpNow();
					var r = [];
					switch (e.menu) {
						case "profilemore":
						case "adminactions":
							r.push(this.playerprofiledata);
							break;
						case "clans":
							r.push(this.joinedclans);
							break;
						case "manageclan":
						case "claninfo":
							r.push(this.selectedclan)
					}
					this.game.scriptmanager.runScript(t, this.game.player, "activated", r), this.addMenuScriptBackButton(n)
				}
			},
			addMenuScriptBackButton: function(e) {
				if (!e || !gui.isVisible("newpopup")) return;
				var t = gui.getDom("newpopup_dialog");
				if (!t) return;
				switch (e) {
					case "adminactions":
						this.addAdminActionsBackButton(t);
						break;
					case "adminmenu":
						this.addAdminBackButton(t);
						break;
					case "claninfo":
						this.addClanInfoBackButton(t);
						break;
					case "clans":
						this.addClansBackButton(t);
						break;
					case "manageclan":
						this.addManageClansBackButton(t);
						break;
					case "moreactions":
						this.addProfileMoreBackButton(t);
						break;
					default:
						this.addMainBackButton(t)
				}
			},
			showMenuByName: function(e) {
				this.closePopUpNow();
				switch (e) {
					case "adminactions":
						this.showPlayerAdminOptions();
						break;
					case "adminmenu":
						this.showAdminMenu();
						break;
					case "claninfo":
						this.showClanInfo();
						break;
					case "clans":
						this.showClansMenu(this.joinedclans ? !1 : !0);
						break;
					case "inventory":
						this.showInventory(!0, !0);
						break;
					case "main":
						this.showMainMenu();
						break;
					case "manageclan":
						this.showManageClan();
						break;
					case "map":
						this.showMap();
						break;
					case "moreactions":
						this.showMoreActions()
				}
			},
			showMainMenu: function() {
				var e = this.showPopUp({
						title: this.game.app.config.gamename + " Menu",
						popupType: "mainmenu"
					}),
					t = this,
					n = [{
						help: "Open your inventory to equip items!",
						image: "bbuilder_newbutton_items.png",
						text: this.isMobile() ? "Items" : "Items (Q)",
						callback: function(e) {
							t.closePopUpNow("inventory"), t.showInventory(!0, !1)
						}
					}, {
						help: "Get coins for cool items and houses!",
						image: "bbuilder_newbutton_buycoins.png",
						text: "Get Coins <i>Promotion</i>",
						callback: function(e) {
							t.closePopUpNow(), t.game.shop.showBuyCoinsDialog(null, "mainmenu")
						}
					}, {
						help: "Build your own house and invite friends!",
						image: "bbuilder_newbutton_house.png",
						text: "House",
						callback: function(e) {
							t.closePopUpNow(), t.showHouseMenu(!0)
						}
					}, {
						help: "See the latest news stories!",
						image: "bbuilder_newbutton_news.png",
						text: "News",
						callback: function(e) {
							t.closePopUpNow(), t.game.storymanager.showStoryPlayList(null, "news")
						}
					}, {
						help: "Click to see some helpful tips and commands!",
						image: "bbuilder_newbutton_help.png",
						text: "Help",
						callback: function(e) {
							t.closePopUpNow(), t.showGeneralHelp()
						}
					}, {
						help: "Create or join clans!",
						image: "bbuilder_newbutton_clans.png",
						text: "Clans",
						callback: function(e) {
							t.closePopUpNow(), t.showClansMenu(!0)
						}
					}, {
						help: "Information about the game and company",
						image: "bbuilder_newbutton_about.png",
						text: "About",
						callback: function(e) {
							t.closePopUpNow(), t.showAbout()
						}
					}, {
						help: "Discuss the game and your clan on Discord!",
						image: "bbuilder_newbutton_forum.png",
						text: "Discord",
						callback: function(e) {
							t.game.shop.showURL(t.game.app.config.forumurl, "inside")
						}
					}, {
						help: "See your own profile (or click on yourself)!",
						image: "bbuilder_newbutton_profile.png",
						text: "Profile",
						callback: function(e) {
							t.closePopUpNow(), t.showOwnProfile()
						}
					}, {
						help: "See the profiles of your friends!",
						image: "bbuilder_newbutton_friends.png",
						text: "Friends",
						callback: function(e) {
							t.closePopUpNow(), t.showFriends(null, !0)
						}
					}, {
						help: "Change settings such as turning off sounds!",
						image: "bbuilder_newbutton_settings.png",
						text: "Settings",
						callback: function(e) {
							t.closePopUpNow(), t.showSettings()
						}
					}, {
						help: "See player scores!",
						image: "bbuilder_newbutton_scores.png",
						text: "Scores",
						callback: function(e) {
							t.closePopUpNow(), t.showPlayerScores(!0)
						}
					}, {
						help: "See messages of other players!",
						image: "bbuilder_newbutton_messages.png",
						text: "Messages",
						callback: function(e) {
							t.closePopUpNow(), t.showMessageList(null, !0)
						}
					}];
				(this.game.app.config.achievementsenabled || this.game.app.config.achievementsadminlevel && this.game.player && this.game.player.isGameAdmin() && this.game.player.adminlevel >= this.game.app.config.achievementsadminlevel) && n.push({
					help: "View your achievements!",
					image: "bbuilder_newbutton_scores.png",
					text: "Achievements",
					callback: function(e) {
						t.closePopUpNow(), t.showAchievements(!0)
					}
				});
				for (var r in this.game.app.config.gameads) n.push(this.getMenuItemForGameAd(this.game.app.config.gameads[r]));
				this.isMobile() || n.push({
					help: "Invite friends to the game to build your clan!",
					image: "bbuilder_newbutton_invite.png",
					text: "Invite",
					callback: function(e) {
						t.closePopUpNow(), t.inviteFriends()
					}
				}), window.FileReader && n.push({
					help: "Upload a personal graphic to customize your character!",
					image: "bbuilder_newbutton_uploads.png",
					text: "Uploads",
					callback: function(e) {
						t.closePopUpNow(), t.showUploadGraphic()
					}
				}), this.game.app.config.enablequestmenu && n.push({
					help: "Play the tutorial or daily quests",
					image: "bbuilder_newbutton_quests.png",
					text: "Quests",
					callback: function(e) {
						t.closePopUpNow(), t.game.storymanager.showQuestsMenu()
					}
				}), n.push({
					help: "View and create stories!",
					image: "bbuilder_newbutton_stories.png",
					text: "Stories",
					callback: function(e) {
						t.closePopUpNow(), t.game.storymanager.showStoryMenu({
							forceload: !0,
							offset: 0
						})
					}
				}), this.addMenuButtons(n, "main"), this.addMenuItemsToDialog(e, n);
				if (this.game.player && this.game.player.isGameAdmin()) {
					var i = this.game.app.config.enablenewgui;
					e.parentNode.appendChild(this.createButton("Admin", {
						x: i ? 546 : 526,
						bottom: i ? 10 : -18,
						w: 145,
						h: 40
					}, function(e) {
						t.closePopUpNow(), t.showAdminMenu()
					}, !0))
				}
			},
			showAdminMenu: function() {
				var e = this.showPopUp({
						title: this.game.app.config.gamename + " Admin Menu",
						popupType: "adminmenu"
					}),
					t = this,
					n = [{
						help: "Console",
						image: "bbuilder_newbutton_admins.png",
						text: "Console",
						callback: function(e) {
							t.closePopUpNow(), t.showConsole()
						}
					}, {
						help: "Approve or reject graphics uploaded by players",
						image: "bbuilder_newbutton_edituploads.png",
						text: "Check Uploads",
						callback: function(e) {
							t.closePopUpNow(), t.showUploadAdminMenu(!0)
						}
					}];
				this.game.app.config.adminfilesurl && n.push({
					help: "Manage game files on gitlab",
					image: "bbuilder_newbutton_files.png",
					text: "Files",
					callback: function(e) {
						t.game.shop.showURL(t.game.app.config.adminfilesurl, "outside")
					}
				}), this.game.app.config.adminconfigurl && n.push({
					help: "Manage configuration and items on gitlab",
					image: "bbuilder_newbutton_config.png",
					text: "Config",
					callback: function(e) {
						t.game.shop.showURL(t.game.app.config.adminconfigurl, "outside")
					}
				}), this.game.app.config.adminmapsurl && n.push({
					help: "Manage maps on gitlab",
					image: "bbuilder_newbutton_maps.png",
					text: "Maps",
					callback: function(e) {
						t.game.shop.showURL(t.game.app.config.adminmapsurl, "outside")
					}
				}), this.game.app.config.adminscriptsurl && n.push({
					help: "Manage scripts on gitlab",
					image: "bbuilder_newbutton_scripts.png",
					text: "Scripts",
					callback: function(e) {
						t.game.shop.showURL(t.game.app.config.adminscriptsurl, "outside")
					}
				}), n.push({
					help: "Upload & configure new items",
					image: "bbuilder_newbutton_uploads.png",
					text: "Upload Item",
					callback: function(e) {
						t.closePopUpNow(), t.showUploadShopItem()
					}
				}), n.push({
					help: "Send announcements via push notifications",
					image: "bbuilder_newbutton_mailings.png",
					text: "Push Announcement",
					callback: function(e) {
						t.closePopUpNow(), t.showMailingMenu(!0)
					}
				}), this.addMenuButtons(n, "admin"), this.addMenuItemsToDialog(e, n), this.addMainBackButton(e)
			},
			showConsole: function() {
				this.game.showConsole()
			},
			getMenuItemForGameAd: function(e) {
				var t = this;
				return {
					help: e.hint,
					image: e.icon,
					text: e.shortname,
					callback: function(n) {
						t.closePopUpNow(), t.showGameAd(e)
					}
				}
			},
			showGameAd: function(e) {
				var t = this.showPopUp({
					title: e.name,
					hideclosebutton: !0,
					popupType: "gamead"
				});
				this.showGameAdInContainer(t, e, !1), this.addMainBackButton(t)
			},
			showGameAdInContainer: function(e, t, n) {
				if (!e || !t) return;
				this.gamead = t;
				var r = "";
				n || (r += '<div style="font-size:24px; margin: auto 0 auto 0;">'), r += '<img src="' + t.icon + '" style="float:left; margin-right:' + (n ? 5 : 20) + 'px;">', n && (r += "Also check out:<br>"), r += t.description, n || (r += "</div>"), e.innerHTML = r;
				var i = this;
				e.appendChild(this.createButton(this.isMobile() ? "Download" : "Play", n ? {
					x: 140,
					y: 160,
					w: 240,
					h: 60
				} : {
					x: 220,
					y: 270,
					w: 240,
					h: 60
				}, function(e) {
					i.downloadGameForAd()
				}))
			},
			downloadGameForAd: function() {
				if (!this.gamead) return;
				if (Config_Extern) switch (Config_Extern.platform) {
					case "iphone":
						this.game.shop.sendOpenAppStore(this.gamead.appstoreid);
						return;
					case "android":
						this.game.shop.showURL(this.gamead.links.Android, "inside");
						return;
					case "web":
						this.game.shop.showURL(this.gamead.links.web, "inside");
						return
				}
				this.game.shop.showURL(this.gamead.links.Facebook, "inside")
			},
			showOwnProfile: function() {
				if (!this.game.player) return;
				this.closePopUp();
				var e = this;
				this.profilebackcallback = function(t) {
					e.closePopUpNow(), e.showMainMenu()
				}, this.game.client && this.game.client.sendRequestPlayerProfile(this.game.player)
			},
			isMobile: function() {
				return typeof FB == "undefined"
			},
			addMenuItemsToDialog: function(e, t, n) {
				for (var r in t) {
					var i = t[r],
						s = document.createElement("div");
					i.cssid && (s.id = i.cssid), s.className = "menuitem" + (i.help ? " tooltip" : "") + (i.cssclass ? " " + i.cssclass : "") + (i.selected ? " selected" : ""), i.help && s.setAttribute("help", translate(i.help)), s.style.zIndex = 100 - r, n && n.float && (s.style.float = n.float), i.callback && gui.setClick(s, i.callback), s.appendChild(this.getImageDivForMenuItem(i));
					if (i.itemtype == "head" && i.hat) {
						var o = {
								itemtype: "hat",
								hat: i.hat
							},
							u = this.getImageDivForMenuItem(o);
						u.style.top = "-8px", s.appendChild(u)
					}
					if (i.badgeicon) {
						var a = document.createElement("div");
						a.className = "pixelimage", a.style.position = "absolute", a.style.right = "20px", a.style.top = "10px", a.style.width = "20px", a.style.height = "16px", a.style.backgroundImage = "url('" + i.badgeicon + "')", a.style.backgroundSize = "contain", a.style.backgroundRepeat = "no-repeat", s.appendChild(a)
					}
					if (i.text) {
						var f = document.createElement("div");
						f.className = "menuitemtext", f.innerHTML = translate(i.text), i.textfont && (f.style.font = i.textfont), s.appendChild(f)
					}
					if (i.subtitle) {
						var f = document.createElement("div");
						f.className = "menuitemsubtitle", f.innerHTML = translate(i.subtitle), s.appendChild(f)
					}
					e.appendChild(s)
				}
				t && t.length > 18 && e.style.top == "60px" && !this.game.app.config.enablenewgui && (e.style.top = "30px", e.style.height = "100%")
			},
			createMenuContainer: function(e, t) {
				var n = document.createElement("div");
				return n.style.position = "absolute", n.style.left = t.x + "px", t.y != undefined || t.top != undefined ? n.style.top = (t.y != undefined ? t.y : t.top) + "px" : t.bottom != undefined && (n.style.bottom = t.bottom + "px"), n.style.width = t.w + "px", n.style.height = t.h + "px", e.appendChild(n), n
			},
			getImageDivForMenuItem: function(e) {
				var t = document.createElement("div");
				t.className = "menuitemimage" + (e.itemtype ? " menuitem" + e.itemtype : "") + (e.itemcssclass ? " " + e.itemcssclass : "");
				if (e.itemtype) {
					t.style.backgroundImage = "url('" + this.getImageForItem(e) + "')", t.style.clip = this.getImageClipForItem(e), t.style.backgroundSize = "auto", t.style.backgroundPosition = "0px 0px";
					switch (e.itemtype) {
						case "furniture":
						case "food":
						case "loot":
						case "mushroom":
						case "valentingem":
						case "candy":
						case "egg":
							t.style.backgroundSize = "contain", t.style.backgroundPosition = "center";
							break;
						case "body":
						case "head":
						case "armor":
							t.style.left = "24px", t.style.top = "8px";
							break;
						case "hat":
							t.style.left = "24px", t.style.top = "2px";
							break;
						case "bow":
							t.style.left = "32px", t.style.top = "-16px", t.style.width = "64px", t.style.height = "96px";
							break;
						case "weapon":
						case "weaponskin":
							e["weapontype"] == "gun" || e.icon || e.image ? (t.style.backgroundPosition = "center", t.style.width = "100%", t.style.height = "72px") : (t.style.left = "8px", t.style.top = "16px", t.style.width = "80px", t.style.height = "32px");
							break;
						case "mount":
							e.mounttype ? (t.style.backgroundSize = "contain", t.style.width = "100%", t.style.height = "72px", t.style.clip = "auto") : (t.style.left = "-12px", t.style.top = "-40px", t.style.width = "128px", t.style.height = "128px")
					}
				} else {
					var n = e.image && e.image.indexOf("/") >= 0 ? e.image : "../files/gui/" + (e.image ? e.image : "bbuilder_newbutton_default.png");
					t.style.backgroundImage = "url('" + n + "')"
				}
				return t
			},
			getHTMLFromItemsWithOffset: function(e) {
				var t = "";
				for (var n in e) {
					var r = e[n];
					t += '<img draggable="false" ondragstart="return false;" src="' + this.getImageForItem(r) + '" style="' + "position:absolute; left:" + r.x + "px; top:" + r.y + "px; " + "clip: " + this.getImageClipForItem(r) + '" class="pixelimage">'
				}
				return t
			},
			getHTMLFromItemsInFlow: function(e, t) {
				var n = "";
				for (var r in e) {
					var i = e[r];
					n += '<img draggable="false" ondragstart="return false;" src="' + this.getImageForItem(i) + '" style="' + "position:absolute; " + (t ? "left" : "margin-left") + ":" + i.x + "px; " + (t ? "top" : "margin-top") + ":" + i.y + "px; " + "clip: " + this.getImageClipForItem(i) + '" class="pixelimage">'
				}
				return n
			},
			getImageForItem: function(e) {
				var t = this.game.animationmanager;
				return e.itemtype == "armor" ? t.getPathForDefault("BODY") + e.armor : e.itemtype == "head" ? t.getPathForDefault("HEAD") + e.head : e.itemtype == "hat" ? t.getPathForDefault("HAT") + e.hat : e.itemtype == "bow" ? t.getPathForDefault("BOW") + e.bow : e.itemtype == "mount" && ["egg", "thanksgiving", "sled", "teddybear", "bumba", "spddino", "stingray", "jelly"].indexOf(e.mounttype) < 0 ? t.getPathForDefault("MOUNT") + e.mount : e.itemtype == "weapon" && e["weapontype"] != "gun" && !e.icon && !e.image ? t.getPathForDefault(e["weapontype"] == "hammer" ? "HAMMER" : e["weapontype"] == "shovel" ? "SHOVEL" : "WEAPON") + (e.weaponimage ? e.weaponimage : e.weapon) : e.balloon ? t.getPathForDefault("BALLOON") + e.balloon : "../files/npcs/" + (e.icon ? e.icon : e.image)
			},
			getImageClipForItem: function(e) {
				return e.itemtype == "head" || e.itemtype == "armor" ? "rect(0px 48px 48px 0px)" : e.itemtype == "hat" ? "rect(0px 48px 72px 0px)" : e.itemtype == "mount" && !e.mounttype ? "rect(32px 112px 128px 16px)" : e.itemtype == "weapon" && e["weapontype"] == "hammer" && !e.icon && !e.image ? "rect(0px 52px 28px 0px)" : e.itemtype == "weapon" && e["weapontype"] == "shovel" && !e.icon && !e.image ? "rect(0px 46px 17px 0px)" : ""
			},
			compressGameFilename: function(e) {
				return e ? (e.indexOf("bbuilder_") == 0 && (e = e.substring("bbuilder_".length)), e.indexOf(".png") == e.length - 4 && (e = e.substring(0, e.length - 4)), e) : e
			},
			addBackButton: function(e, t, n) {
				var r = document.createElement("div");
				r.className = "backbutton gamewidebutton tooltip", r.setAttribute("help", translate(t)), gui.setClick(r, n), r.style.zIndex = 101, e.parentNode.appendChild(r)
			},
			addMainBackButton: function(e) {
				var t = this;
				this.addBackButton(e, "Go back to main menu", function(e) {
					t.closePopUpNow(), t.showMainMenu()
				})
			},
			addAdminBackButton: function(e) {
				var t = this;
				this.addBackButton(e, "Go back to the admin menu", function(e) {
					t.closePopUpNow(), t.showAdminMenu()
				})
			},
			addProfileMoreBackButton: function(e) {
				var t = this;
				this.addBackButton(e, "Go back to the player profile", function(e) {
					t.closePopUpNow(), t.showMoreActions()
				})
			},
			addAdminActionsBackButton: function(e) {
				var t = this;
				this.addBackButton(e, "Go back to the admin actions", function(e) {
					t.closePopUpNow(), t.showPlayerAdminOptions()
				})
			},
			createButton: function(e, t, n) {
				var r = document.createElement("input");
				return r.type = "submit", r.value = translate(e), r.className = "button", t.x != undefined || t.left != undefined ? r.style.left = (t.x != undefined ? t.x : t.left) + "px" : t.right != undefined && (r.style.right = t.right + "px"), t.y != undefined || t.top != undefined ? r.style.top = (t.y != undefined ? t.y : t.top) + "px" : t.bottom != undefined && (r.style.bottom = t.bottom + "px"), r.style.width = t.w + "px", r.style.height = t.h + "px", r.style.zIndex = 101, n && gui.setClick(r, n), r
			},
			addWindowIcon: function(e, t) {
				if (!t) return;
				var n = [{
					itemtype: "head",
					head: this.game.animationmanager.expandGameFilename("head", t.head)
				}, {
					itemtype: "hat",
					hat: this.game.animationmanager.expandGameFilename("hat", t.hat)
				}];
				for (var r in n) {
					var i = n[r];
					if (i[i.itemtype].length <= 0) continue;
					var s = document.createElement("div");
					s.className = "pixelimage", s.style.position = "absolute", this.game.app.config.enablenewgui ? (s.style.left = "20px", s.style.top = "" + (i.itemtype == "hat" ? -6 : 10) + "px") : (s.style.left = "-18px", s.style.top = "" + (i.itemtype == "hat" ? -28 : -12) + "px"), s.style.width = "48px", s.style.height = "48px", s.style.backgroundImage = "url('" + this.getImageForItem(i) + "')", s.style.clip = this.getImageClipForItem(i), s.style.pointerEvents = "none", e.parentNode.appendChild(s)
				}
			},
			showPlayerProfile: function(e) {
				e ? this.playerprofiledata = e : e = this.playerprofiledata;
				if (!e) return;
				var t = this.game.app.config.enablenewgui,
					n = "userid" in e,
					r = this.showPopUp({
						title: e.name,
						hideclosebutton: this.profilebackcallback ? !0 : !1,
						popupType: "playerprofile",
						showbadge: t && e.adminlevel && e.adminlevel > 0
					}),
					i = "<div>",
					s;
				e.injail ? s = translate("In Jail") : !t && e.adminlevel && e.adminlevel > 0 && (s = translate("Game Admin")), e.adminlevel && e.adminlevel > 0 && this.game.player && this.game.player.isGameAdmin() && (s ? s += " " : s = "", s += '<span style="font-size: 12px;">lvl ' + e.adminlevel + "</span>"), s && (i += this.makeTextDivAt("<i><center><font color=#e0e0e0>" + s + "</font></center></i>", "", 0, 0, "width:100%;"));
				var o = !1;
				"eggs" in e ? (i += this.makeTextDivAt(parseInt(e.eggs), "bbuilder_icon_egg.png", 0, 300, null, null, null, "tooltip", "Eggs"), o = !0) : "pumpkin1" in e || "pumpkin2" in e || "pumpkin3" in e ? (i += this.makeTextDivAt(parseInt(e.pumpkin1), "bbuilder_pumpkin1.png", 0, 300), i += this.makeTextDivAt(parseInt(e.pumpkin2), "bbuilder_pumpkin2.png", 80, 300), i += this.makeTextDivAt(parseInt(e.pumpkin3), "bbuilder_pumpkin3.png", 160, 300), o = !0) : "coal" in e ? (i += this.makeTextDivAt(parseInt(e.coal), "bbuilder_coal.png", 0, 300, null, null, null, "tooltip", "Coal"), o = !0) : "shrimps" in e && (i += this.makeTextDivAt(parseInt(e.shrimps), "bbuilder_shrimps1.png", 0, 300, null, null, null, "tooltip", "Shrimps"), o = !0), "ping" in e && (i += this.makeProfileTextDiv(translate("Ping:"), ("os" in e ? '<img src="../files/gui/bbuilder_icon_' + e.os.toLowerCase() + '.png" style="vertical-align:middle;"> ' : "") + e.ping + "ms", null, o ? 120 : 0, 300, o ? 160 : t ? 180 : 195)), "mobkills" in e && (t ? i += this.makeProfileTextDiv("Baddy-Kills:", e.mobkills, "#ff3024", 0, 260) : i += this.makeTextDivAt(e.mobkills, "bbuilder_icon_monster.png", 0, 260, null, null, null, "tooltip", "Killed Monsters/Mobs"));
				if ("kills" in e)
					if (t) {
						var u = e.kills;
						e.streak > 0 && (u += " <i>" + translate("Streak of %d", [e.streak]) + "</i>"), i += this.makeProfileTextDiv("Kills:", u, "#ff3024", 0, 220, e.streak ? 240 : 180)
					} else {
						var u = '<img src="../files/gui/bbuilder_playericon2.png" style="vertical-align:middle;"> <span style="color:#ff2014;">' + e.kills + "</span>";
						e.streak > 0 && (u += ' <i><span style="font-size: 18px;">' + translate("Streak of %d", [e.streak]) + "</span></i>"), i += this.makeTextDivAt(u, "", 0, 220, null, null, null, "tooltip", "Killed Players")
					}
				if ("sparwins" in e || "sparlost" in e) t ? i += this.makeProfileTextDiv("Spar:", (e.sparwins | 0) + ("sparlost" in e ? " / " + (e.sparlost | 0) : ""), null, 0, 180) : i += this.makeTextDivAt("âš” " + (e.sparwins | 0) + ("sparlost" in e ? "/" + (e.sparlost | 0) : ""), "", 0, 180, null, null, null, "tooltip", "Spars Won/Lost");
				e.isonline ? t && "hitPoints" in e && "maxHitPoints" in e ? i += '<div class="profilehpback"></div><div class="profilehp" style="width:' + Math.floor(180 * e.hitPoints / e.maxHitPoints) + 'px;"></div>' : i += this.makeProfileTextDiv("Online!", "", null, 0, 20) : e.offlinetime && (i += this.makeProfileTextDiv("Offline:", e.offlinetime, null, 0, 20)), "nc" in e && (t || (i += this.makeTextDivAt(e.nc, "bbuilder_nitrocoin.png", 120, 140, null, null, null, "tooltip", "Nitro Coins"))), "arrows" in e && (t ? i += this.makeTextDivAt(e.arrows, "bbuilder_icon_arrow.png", 120, 140, null, null, null, "tooltip", "Ammo") : i += this.makeTextDivAt(e.arrows, "bbuilder_icon_arrow.png", 120, 100, null, null, null, "tooltip", "Arrows")), "bombs" in e && (t || (i += this.makeTextDivAt(e.bombs, "bbuilder_icon_bomb.png", 120, 60, null, null, null, "tooltip", "Bombs"))), "ec" in e && (t ? i += this.makeProfileTextDiv("EC:", e.ec, null, 0, 140, 90) : i += this.makeTextDivAt(e.ec, "bbuilder_icon_ec.png", 0, 140, null, null, null, "tooltip", "Event Coins")), "coins" in e && (t ? i += this.makeProfileTextDiv("Coins:", e.coins, "#47ff33", 0, 100) : i += this.makeTextDivAt(e.coins, "bbuilder_icon_coin.png", 0, 100, null, null, null, "tooltip", "Coins")), "onlinetime" in e && (t ? i += this.makeProfileTextDiv("Hours:", e.onlinetime, null, 0, 60) : i += this.makeTextDivAt("â° " + e.onlinetime, "", 0, 60, null, null, null, "tooltip", "Online Time"));
				var a = 340;
				e.isfriend ? i += this.makeTextDivAt(translate("Remove Friend") + ' <img src="../files/gui/bbuilder_profileicon_removefriend.png" width=32 height=32 style="vertical-align:middle;">', null, 0, a, "font-size:20px; cursor:pointer; z-index:1;", !0, "profilebuttonremovefriend") : e.canaddfriend && (i += this.makeTextDivAt(translate("Add Friend") + ' <img src="../files/gui/bbuilder_profileicon_addfriend.png" width=32 height=32 style="vertical-align:middle;">', null, 0, a, "font-size:20px; cursor:pointer; z-index:1;", !0, "profilebuttonaddfriend")), e.canmessage && (i += this.makeTextDivAt(translate("Message") + ' <img src="../files/gui/bbuilder_profileicon_message.png" width=32 height=32 style="vertical-align:middle;">', null, 274, a, "font-size:20px; cursor:pointer; z-index:1;", !0, "profilebuttonmessage"));
				var f = this.game.getClanFromName(e.name);
				!e.status && f && (e.isself || !this.profilebackcallback || !this.selectedclan || this.selectedclan.name != f) && (this.clanlisttype = "playerprofile", i += this.makeTextDivAt(translate("View Clan") + ' <img src="../files/gui/bbuilder_profileicon_clan.png" width=32 height=32 style="vertical-align:middle;">', null, 520, a, "font-size:20px; left:auto;right:20px; cursor:pointer; z-index:1;", !0, "profilebuttonclan"));
				var l = e.status2 && e.status2.indexOf("instagram") >= 0 ? -2 : 18;
				n && (i += this.makeTextDivAt(translate("ID:") + " " + e.userid, null, 422, l, "font-size:20px;", !0)), "like" in e && (e.like ? i += this.makeTextDivAt(e.nrlikes + ' <img src="../files/gui/bbuilder_profileicon_liked.png" width=32 height=32 style="vertical-align:middle;">', null, n ? 540 : 422, l - 2, "font-size:20px; cursor:pointer; z-index:1;", !0, "profilebuttonunlike", "tooltip", "Unlike Profile") : i += this.makeTextDivAt(e.nrlikes + ' <img src="../files/gui/bbuilder_profileicon_unliked.png" width=32 height=32 style="vertical-align:middle;">', null, n ? 540 : 422, l - 2, "font-size:20px; cursor:pointer; z-index:1;", !0, "profilebuttonlike", "tooltip", "Like Profile"));
				var c = e.status || e.status2 ? (e.status2 ? e.status2 : "") + (e.status ? e.status : "") : null;
				i += '<div style="position:absolute; left:422px; top:' + (l <= 0 ? 20 : l + 36) + 'px; width:242px; height:378px;overflow:hidden;">' + (c ? c : "<i><center>" + translate("No status yet") + "</center></i>") + "</div>", i += '<div id="profilecharacter" class="pixelimage" style="-ms-transform:scale(2); -webkit-transform:scale(2); transform:scale(2); position:absolute; top:70px;">';
				var h = [{
					x: 140,
					y: 48,
					itemtype: "armor",
					itemid: e.armor,
					armor: this.game.animationmanager.expandGameFilename("body", e.armor)
				}, {
					x: 140,
					y: 23,
					itemtype: "head",
					itemid: e.head,
					head: this.game.animationmanager.expandGameFilename("head", e.head)
				}];
				e.hat && h.push({
					x: 140,
					y: 7,
					itemtype: "hat",
					itemid: e.hat,
					hat: this.game.animationmanager.expandGameFilename("hat", e.hat)
				}), i += this.getHTMLFromItemsWithOffset(h), i += '<img draggable="false" ondragstart="return false;" src="' + this.getImageForItem(h[1]) + '" style="' + 'position:absolute;left:130px;top:16px;clip: rect(48px 24px 60px 13px);" class="pixelimage">', i += '<img draggable="false" ondragstart="return false;" src="' + this.getImageForItem(h[1]) + '" style="' + 'position:absolute;left:54px;top:16px;clip: rect(48px 24px 60px 13px);" class="pixelimage flipximage">', i += "</div>", i += "</div>", r.innerHTML = i;
				var p = document.createElement("div");
				p.innerHTML = '<div class="profilebuttons"><div id="profilebuttonsocial" class="profilebutton"></div><div id="profilebuttonprofile" class="profilebutton selected">' + translate("Profile") + "</div>" + '<div id="profilebuttonmore" class="profilebutton">' + translate("More") + "</div>" + "</div>", r.parentNode.appendChild(p);
				var d = this;
				e.caneditstatus && r.parentNode.appendChild(this.createButton("âœï¸", {
					x: 640,
					y: l + 56,
					w: 38,
					h: 38
				}, function(e) {
					d.closePopUpNow(), d.showEditStatus()
				}, !0)), gui.setClick("profilebuttonaddfriend", function(e) {
					d.addFriend()
				}), gui.setClick("profilebuttonremovefriend", function(e) {
					d.removeFriend()
				}), gui.setClick("profilebuttonmessage", function(t) {
					d.writePM(e.userid, e.name + (e.isonline ? "" : " (offline)"))
				}), gui.setClick("profilebuttonclan", function(e) {
					d.closePopUpNow(), d.selectClanForName(f)
				}), gui.setClick("profilebuttonlike", function(t) {
					d.game.client && d.game.client.sendLike(e.userid, !0)
				}), gui.setClick("profilebuttonunlike", function(t) {
					d.game.client && d.game.client.sendLike(e.userid, !1)
				}), gui.setClick("profilebuttonmore", function(e) {
					d.closePopUpNow(), d.showMoreActions()
				}), e.storyid && this.game.client && this.game.client.sendStoryAction("get", {
					id: e.storyid,
					target: "playerprofile"
				}), this.profilebackcallback && (this.addBackButton(r, "Go back", this.profilebackcallback), delete this.profilebackcallback), !t && r.style.top == "60px" && (r.style.top = "30px")
			},
			showMoreActions: function() {
				if (!this.playerprofiledata) return;
				var e = this.showPopUp({
						title: this.playerprofiledata.name,
						hideclosebutton: this.profilebackcallback ? !0 : !1,
						popupType: "moreactions"
					}),
					t = [],
					n = this;
				this.playerprofiledata.cantrade && t.push({
					help: "Invite player to trade items!",
					image: "bbuilder_newbutton_trade.png",
					text: "Invite to Trade",
					callback: function(e) {
						n.closePopUpNow(), n.inviteToTrade()
					}
				}), this.playerprofiledata.canspar && t.push({
					help: "Invite player to spar!",
					image: "bbuilder_newbutton_invitespar.png",
					text: "Invite to Spar",
					callback: function(e) {
						n.closePopUpNow(), n.showSparTypes()
					}
				}), this.playerprofiledata.caninvitetohouse && t.push({
					help: "Invite player to your house!",
					image: "bbuilder_newbutton_invitehouse.png",
					text: "Invite to House",
					callback: function(e) {
						n.closePopUpNow(), n.inviteToHouse()
					}
				});
				var r = this.game.getClanFromName(this.playerprofiledata.name);
				if (this.playerprofiledata.isself || !this.profilebackcallback || !this.selectedclan || this.selectedclan.name != r) this.clanlisttype = "playerprofile", r && t.push(this.getViewClanMenuItem(r)), this.playerprofiledata.canrecruit && t.push({
					help: "Recruit player to your clan!",
					image: "bbuilder_newbutton_recruitclan.png",
					text: "Recruit to Clan",
					callback: function(e) {
						n.closePopUpNow(), n.recruitToClan()
					}
				});
				this.playerprofiledata.canadministrate && t.push({
					help: "Admin",
					image: "bbuilder_newbutton_adminactions.png",
					text: "Admin Actions",
					callback: function(e) {
						n.closePopUpNow(), n.showPlayerAdminOptions()
					}
				}), this.playerprofiledata.canviewstories && t.push({
					help: "See the stories!",
					image: "bbuilder_newbutton_stories.png",
					text: "Stories",
					callback: function(e) {
						n.closePopUpNow(), n.game.storymanager.showStoryPlayList(null, "profile", n.playerprofiledata.userid)
					}
				}), this.playerprofiledata.canvisithouse && t.push({
					help: "Visit the house of the player",
					image: "bbuilder_newbutton_house.png",
					text: "Visit House",
					callback: function(e) {
						n.closePopUpNow(), n.visitPlayerHouse()
					}
				}), this.playerprofiledata.canmanagesidekick && t.push({
					help: "Manage the pet following you",
					image: "bbuilder_newbutton_pets.png",
					text: "Pet Menu",
					callback: function(e) {
						n.closePopUpNow(), n.showSidekickOptions()
					}
				}), this.playerprofiledata.isfriend || (this.playerprofiledata.canblock && t.push({
					help: "Block messages from this player",
					image: "bbuilder_newbutton_block.png",
					text: "Block",
					callback: function(e) {
						n.blockProfile()
					}
				}), this.playerprofiledata.canunblock && t.push({
					help: "Unblock this player",
					image: "bbuilder_newbutton_unblock.png",
					text: "Unblock",
					callback: function(e) {
						n.unblockProfile()
					}
				})), this.playerprofiledata.cantranslate && t.push({
					help: "Translate the chat text of this player!",
					image: "bbuilder_newbutton_translate.png",
					text: "Translate Chat",
					callback: function(e) {
						n.closePopUpNow(), n.translateChatText()
					}
				}), this.addMenuButtons(t, "profilemore"), this.addMenuItemsToDialog(e, t);
				var i = document.createElement("div");
				i.innerHTML = '<div class="profilebuttons"><div id="profilebuttonsocial" class="profilebutton"></div><div id="profilebuttonprofile" class="profilebutton">' + translate("Profile") + "</div>" + '<div id="profilebuttonmore" class="profilebutton selected">' + translate("More") + "</div>" + "</div>", e.parentNode.appendChild(i), gui.setClick("profilebuttonprofile", function(e) {
					n.closePopUpNow(), n.showPlayerProfile()
				}), this.profilebackcallback && this.addBackButton(e, "Go back", this.profilebackcallback)
			},
			getViewClanMenuItem: function(e) {
				var t = this;
				return {
					help: "View clan of the player!",
					image: "bbuilder_newbutton_viewclan.png",
					text: "View Clan",
					callback: function(n) {
						t.closePopUpNow(), t.selectClanForName(e)
					}
				}
			},
			showEditStatus: function() {
				if (!this.playerprofiledata) return;
				var e = this.showPopUp({
						title: "Edit Status",
						hideclosebutton: !0,
						popupType: "editstatus"
					}),
					t = this;
				switch (this.playerprofiledata.statusallowed) {
					case 0:
						e.innerHTML = '<div style="font-size:24px"><br><br>' + translate("With a status message you can tell other players how you feel or announce news.") + " " + translate("Unlock it now for %d coins!", [this.playerprofiledata.statusprice]) + "<br></div>", e.appendChild(this.createButton("Unlock Status", {
							x: 232,
							y: 200,
							w: 200,
							h: 40
						}, function(e) {
							t.unlockStatus()
						}));
						break;
					case 1:
						e.innerHTML = '<div style="font-size:24px"><br>' + translate("Write about how you feel or announce news. Please be nice to other players!") + "<br>\n" + "<br>" + translate("New status:") + "<br>\n" + '<form id="editstatusform" name="editstatusform" style="width:100%;">\n' + '<textarea type="text" id="editstatusstatus" name="editstatusstatus"' + ' style="position: absolute; top: 120px; left: 170px; width:432px; height:160px">' + (this.playerprofiledata.status ? this.playerprofiledata.status : "") + "</textarea>\n" + '<label style="position:absolute;top:300px;width:100%">YouTube/Instagram:' + '<input type="text" id="editstatusyoutube" name="editstatusyoutube"' + ' style="position:absolute;left:220px;width:432px;height:32px;font-size:18px;" value="' + (this.playerprofiledata.youtube ? "https://www.youtube.com/watch?v=" + this.playerprofiledata.youtube : this.playerprofiledata.instagram ? "https://www.instagram.com/p/" + this.playerprofiledata.instagram + "/" : this.playerprofiledata.facebook ? "https://www.facebook.com/" + decodeURIComponent(this.playerprofiledata.facebook) : this.playerprofiledata.twitch ? "https://player.twitch.tv/?" + this.playerprofiledata.twitch : "") + '"></label>' + '<br><input type="submit" value="' + translate("Update") + '"' + ' style="position: absolute; top: 346px; left: 280px; width: 200px; height: 40px;" class="inputbutton">\n' + "</form><div>";
						var n = gui.getDom("editstatusform");
						n.onsubmit = function(e) {
							return t.setStatus(), !1
						}, gui.focus("editstatusstatus");
						break;
					default:
						e.innerHTML = '<div style="font-size:24px"><br><br>' + translate("Sorry, currently you can't edit your status.") + "<br></div>"
				}
				this.addBackButton(e, "Go back to the player profile", function(e) {
					t.closePopUpNow(), t.showPlayerProfile()
				})
			},
			unlockStatus: function() {
				this.closePopUpNow(), this.showPlayerProfile(), this.game.client && this.game.client.sendUnlockStatus()
			},
			setStatus: function() {
				var e = document.editstatusform.editstatusstatus.value.trim(),
					t = document.editstatusform.editstatusyoutube.value.trim();
				this.closePopUpNow(), this.showPlayerProfile(), this.game.client && this.game.client.sendSaveStatus(e, t)
			},
			selectClanForName: function(e) {
				this.game.client && this.game.client.sendClanAction("getclaninfobyname", {
					name: e
				})
			},
			recruitToClan: function() {
				this.closePopUp(), this.game.client && this.game.client.sendClanAction("recruit", {
					id: this.playerprofiledata.id
				})
			},
			inviteToTrade: function() {
				this.closePopUp(), this.game.client && this.game.client.sendPMAction("invitetotrade", {
					userid: this.playerprofiledata.userid
				})
			},
			inviteToSpar: function(e) {
				this.closePopUp(), this.game.client && this.game.client.sendPMAction("invitetospar", {
					userid: this.playerprofiledata.userid,
					spartype: e
				})
			},
			inviteToHouse: function() {
				this.closePopUp(), this.game.client && this.game.client.sendPMAction("invitetohouse", {
					id: this.playerprofiledata.id
				})
			},
			visitPlayerHouse: function() {
				this.closePopUp(), this.game.client && this.game.client.sendPMAction("visithouse", {
					userid: this.playerprofiledata.userid
				})
			},
			showSidekickOptions: function() {
				var e = this.showPopUp({
					title: "Manage Pet",
					hideclosebutton: !0,
					popupType: "managesidekick"
				});
				e.innerHTML = '<br><div style="font-size:24px;">' + translate("If you want that the pet is not following you anymore, then press on this button and it will be put in your inventory again.") + "</div>";
				var t = this;
				e.appendChild(this.createButton("Stop pet following you", {
					x: 192,
					y: 200,
					w: 280,
					h: 40
				}, function(e) {
					t.putSidekickInInventory()
				})), this.addBackButton(e, "Go back to the player profile", function(e) {
					t.closePopUpNow(), t.showPlayerProfile()
				})
			},
			putSidekickInInventory: function() {
				this.closePopUp(), this.game.client && this.game.client.sendRemoveSidekicks()
			},
			makeTextDivAt: function(e, t, n, r, i, s, o, u, a) {
				return "<div " + (o ? 'id="' + o + '" ' : "") + (u ? 'class="' + u + '" ' : "") + (a ? 'help="' + translate(a) + '" ' : "") + 'style="position:absolute;left:' + n + "px;top:" + r + "px;font-size:22px;" + (i ? i : "") + '"><b>' + (s ? e : "") + (t ? ' <img src="' + (t.indexOf("/") >= 0 ? t : "../files/gui/" + t) + '" style="vertical-align:middle;"> ' : "") + (s ? "" : e) + "</b></div>\n"
			},
			makeProfileTextDiv: function(e, t, n, r, i, s) {
				return '<div class="profilefieldlabel" style="position:absolute;left:' + r + "px;top:" + +i + "px;width:" + (s ? s : 180) + 'px;font-size:22px;">' + translate(e) + '<div class="profilefield" style="position:absolute;right:0px;top:0px;' + (n ? "color:" + n + ";" : "") + '">' + t + "</div>" + "</div>"
			},
			translateChatText: function() {
				var e = this.showPopUp({
						title: "Translate Chat",
						hideclosebutton: !0,
						popupType: "translatechat"
					}),
					t = this.playerprofiledata,
					n = "<b>" + t.name + (t.chatlanguage ? " (" + t.chatlanguage + ")" : "") + ":</b><br><br>" + '<div style="color:lightblue;">' + t.chat + "</div><br><br>" + "<b>" + translate("Translated:") + "</b><br><br>" + '<div id="translatedchat" style="color:lightblue;"></div>';
				gui.setHTML(e, n), this.translateWithGoogle(gui.getDom("translatedchat"), t.chat), this.addProfileMoreBackButton(e)
			},
			showSparTypes: function() {
				var e = this.showPopUp({
						title: "Choose a Spar",
						hideclosebutton: !0,
						popupType: "spartypes"
					}),
					t = '<div style="position:absolute;width:100%;bottom:30px;height:40px;"><center>';
				t += translate("Training only! Go to the spar arena to get spar wins."), t += "</center></div>", e.innerHTML = t;
				var n = this,
					r = [{
						help: "Invite to a mixed spar",
						image: "bbuilder_newbutton_mixspar.png",
						text: "All Weapons",
						callback: function(e) {
							n.closePopUpNow(), n.inviteToSpar("mixed")
						}
					}, {
						help: "Invite to a melee spar",
						image: "bbuilder_newbutton_invitespar.png",
						text: "Melee",
						callback: function(e) {
							n.closePopUpNow(), n.inviteToSpar("melee")
						}
					}];
				this.playerprofiledata && this.playerprofiledata.canbowspar && r.push({
					help: "Invite to a bow spar",
					image: "bbuilder_newbutton_bow.png",
					text: "Bows",
					callback: function(e) {
						n.closePopUpNow(), n.inviteToSpar("bow")
					}
				}), this.addMenuItemsToDialog(e, r), this.addProfileMoreBackButton(e)
			},
			showPlayerAdminOptions: function() {
				var e = "Admin Actions" + (this.playerprofiledata ? ": " + this.playerprofiledata.name : ""),
					t = this.showPopUp({
						title: e,
						hideclosebutton: !0,
						popupType: "adminactions"
					}),
					n = [],
					r = this;
				if (this.playerprofiledata) {
					this.playerprofiledata.cansummon && n.push({
						help: "Move the player to your position",
						image: "bbuilder_newbutton_summon.png",
						text: "Summon",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("summon")
						}
					}), this.playerprofiledata.canwarpto && n.push({
						help: "Move to the player",
						image: "bbuilder_newbutton_warpto.png",
						text: "Warpto",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("warpto")
						}
					}), this.playerprofiledata.canunstick && n.push({
						help: "Move the player back to start",
						image: "bbuilder_newbutton_unstick.png",
						text: "Unstick",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("unstickplayer")
						}
					}), this.playerprofiledata.candisconnect && n.push({
						help: "Disconnect the player",
						image: "bbuilder_newbutton_disconnect.png",
						text: "Disconnect",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("disconnect")
						}
					}), this.playerprofiledata.canrefillarrows && n.push({
						help: "Refill the arrows of the player",
						image: "bbuilder_newbutton_addarrows.png",
						text: "Refill Arrows",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("refillarrows")
						}
					}), this.playerprofiledata.canrefillbombs && n.push({
						help: "Refill the bombs of the player",
						image: "bbuilder_newbutton_addbombs.png",
						text: "Refill Bombs",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("refillbombs")
						}
					}), this.playerprofiledata.canresetname && n.push({
						help: "Reset the name of the player",
						image: "bbuilder_newbutton_resetname.png",
						text: "Reset Name",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("resetname")
						}
					}), this.playerprofiledata.canresetstatus && n.push({
						help: "Reset the status of the player",
						image: "bbuilder_newbutton_resetstatus.png",
						text: "Reset Status",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("resetstatus")
						}
					}), this.playerprofiledata.canjail && n.push({
						help: "Jail player",
						image: "bbuilder_newbutton_jail.png",
						text: "Jail",
						callback: function(e) {
							r.closePopUpNow(), r.showJailOptions()
						}
					}), this.playerprofiledata.cantojail && n.push({
						help: "Warp yourself to the jail",
						image: "bbuilder_newbutton_tojail.png",
						text: "Visit Jail",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("tojail")
						}
					}), this.playerprofiledata.canaddcoins && n.push({
						help: "Add Coins",
						image: "bbuilder_newbutton_buycoins.png",
						text: "Add Coins",
						callback: function(e) {
							r.closePopUpNow(), r.showAddCoinsOptions()
						}
					}), this.playerprofiledata.canaddeventcoin && n.push({
						help: "Add Event Coin/Gem",
						image: "bbuilder_newbutton_addeventcoin.png",
						text: "Event Coin",
						callback: function(e) {
							r.closePopUpNow(), r.adminAddEventCoin()
						}
					}), this.playerprofiledata.canstealth && n.push({
						help: "Stealth " + (this.game.player && this.game.player.stealth ? "Off" : "On"),
						image: "bbuilder_newbutton_stealth.png",
						text: "Stealth " + (this.game.player && this.game.player.stealth ? "Off" : "On"),
						callback: function(e) {
							r.closePopUpNow(), r.stealthAction()
						}
					}), this.playerprofiledata.canstealthhigh && n.push({
						help: "Stealth High",
						image: "bbuilder_newbutton_stealth.png",
						text: "Stealth High",
						callback: function(e) {
							r.closePopUpNow(), r.stealthAction("high")
						}
					}), this.playerprofiledata.canviewinventory && n.push({
						help: "Inspect Inventory",
						image: "bbuilder_newbutton_items.png",
						text: "Items",
						callback: function(e) {
							r.closePopUpNow(), r.showAdminInventory(!0)
						}
					}), this.playerprofiledata.canviewtrades && n.push({
						help: "List Trades",
						image: "bbuilder_newbutton_trade.png",
						text: "Trades",
						callback: function(e) {
							r.closePopUpNow(), r.game.tradingmanager.showTradeHistory(null, !0, 0, !0)
						}
					}), this.playerprofiledata.canlockitems && n.push({
						help: "Lock Inventory & Trade",
						image: "bbuilder_newbutton_lockitems.png",
						text: "Lock Items",
						callback: function(e) {
							r.closePopUpNow(), r.lockItems(!0)
						}
					}), this.playerprofiledata.canunlockitems && n.push({
						help: "Unlock Inventory & Trade",
						image: "bbuilder_newbutton_unlockitems.png",
						text: "Unlock Items",
						callback: function(e) {
							r.closePopUpNow(), r.lockItems(!1)
						}
					}), this.playerprofiledata.canresetstory && n.push({
						help: "Remove the story from the profile",
						image: "bbuilder_newbutton_resetstory.png",
						text: "Reset Story",
						callback: function(e) {
							r.closePopUpNow(), r.adminActionOnPlayer("resetstory")
						}
					}), this.playerprofiledata.caneditstories && n.push({
						help: "Edit Stories",
						image: "bbuilder_newbutton_stories.png",
						text: "Stories",
						callback: function(e) {
							r.closePopUpNow(), r.game.storymanager.showStoryMenu({
								forceload: !0,
								offset: 0,
								userid: r.playerprofiledata.userid
							})
						}
					});
					if (this.playerprofiledata.canadmintag && this.game.player) {
						var i = this.game.player.clanname == "Admin" ? "Clear Tag" : "Set Admin Tag";
						n.push({
							help: i,
							image: "bbuilder_newbutton_admintag.png",
							text: i,
							callback: function(e) {
								r.closePopUpNow(), r.setOrClearAdminTag()
							}
						})
					}
				}
				this.addMenuButtons(n, "adminactions"), this.addMenuItemsToDialog(t, n), this.addProfileMoreBackButton(t)
			},
			adminActionOnPlayer: function(e) {
				this.game.client && this.playerprofiledata && this.game.client.sendChat("/" + e + " " + this.playerprofiledata.userid)
			},
			lockItems: function(e) {
				this.game.client && this.playerprofiledata && this.game.client.sendChat("/lockitems " + this.playerprofiledata.userid + " " + (e ? "on" : "off"))
			},
			stealthAction: function(e) {
				this.game.client && this.game.player && (e || (e = this.game.player.stealth ? "off" : "on"), this.game.client.sendChat("/stealth " + e))
			},
			setOrClearAdminTag: function() {
				this.game.client && this.game.player && (this.game.player.clanname == "Admin" ? this.game.client.sendChat("/cleartag") : this.game.client.sendChat("/settag Admin"))
			},
			showJailOptions: function() {
				var e = this.showPopUp({
						title: "Jail Player",
						hideclosebutton: !0,
						popupType: "jailoptions"
					}),
					t = this.playerprofiledata,
					n = t.injail,
					r = t.jailreason ? t.jailreason : "Swearing and misbehaving",
					i = Math.max(0, t.jailtimeleft ? t.jailtimeleft : 3600),
					s;
				n ? s = translate("This player is in jail. Update the jail reason and duration, or set to zero to unjail.") : s = translate("Type the reason and duration (in seconds) for jailing the player. 1 Hour = 3600 Seconds.");
				var o = this;
				e.innerHTML = '<div style="font-size:24px">' + s + "<br><br>\n" + '<form id="jailplayerform" name="jailplayerform" style="width:100%;">\n' + '<div style="position: absolute; left: 0px; top: 100px;">' + translate("Reason:") + "</div>" + '<textarea type="text" name="reason"' + ' style="position: absolute; top: 100px; left: 160px; width:432px; height:160px">' + r + "</textarea>\n" + '<div style="position: absolute; left: 0px; top: 290px;">' + translate("Duration:") + "</div>" + '<input type="text" name="duration" style="position: absolute; top: 290px; left: 160px; width:432px; height:32px;" value="' + i + '">\n' + '<input type="submit" value="' + (n ? translate("Update") : translate("Jail")) + '"' + ' style="position: absolute; top: 340px; left: 270px; width: 200px; height: 40px;" class="inputbutton">\n' + "</form><div>";
				var u = gui.getDom("jailplayerform");
				u.onsubmit = function(e) {
					return o.jailPlayer(), !1
				}, this.addAdminActionsBackButton(e)
			},
			jailPlayer: function() {
				var e = document.jailplayerform.reason.value.trim().replace(/"/g, ""),
					t = parseInt(document.jailplayerform.duration.value.trim());
				if (e.length <= 0) return;
				if (t <= 0 && !this.playerprofiledata.injail) return;
				this.closePopUp(), this.game.client && this.playerprofiledata && this.game.client.sendChat("/jail " + this.playerprofiledata.userid + " " + t + ' "' + e + '"')
			},
			showAddCoinsOptions: function() {
				var e = this.showPopUp({
						title: "Add Coins to Player",
						hideclosebutton: !0,
						popupType: "addcoinstoplayer"
					}),
					t = [],
					n = [50, 100, 200, 500];
				for (var r in n) t.push(this.getAdminAddCoinsMenuItem(n[r]));
				this.addMenuItemsToDialog(e, t), this.addAdminActionsBackButton(e)
			},
			getAdminAddCoinsMenuItem: function(e) {
				var t = this;
				return {
					help: "Adds " + e + " coins",
					image: "bbuilder_newbutton_buycoins.png",
					text: "+" + e,
					textfont: "30px Coolvetica",
					callback: function(n) {
						t.closePopUpNow(), t.addCoinsToPlayer(e)
					}
				}
			},
			addCoinsToPlayer: function(e) {
				this.closePopUp(), this.game.client && this.playerprofiledata && this.game.client.sendChat("/addcoins " + this.playerprofiledata.userid + " " + e)
			},
			adminAddEventCoin: function() {
				this.closePopUp(), this.game.client && this.playerprofiledata && this.game.client.sendChat("/addeventcoin " + this.playerprofiledata.userid)
			},
			showAdminInventory: function(e) {
				e && this.game.client && this.game.client.sendGetAdminInventory(this.playerprofiledata.userid);
				var t = this.showPopUp({
						title: translate("Inventory of %s", [this.playerprofiledata.name]),
						hideclosebutton: !0,
						popupType: "admininventory"
					}),
					n = [];
				for (var r in this.admininventory) {
					var i = this.admininventory[r];
					if (i.hideininventory) continue;
					var s = this.getItemCategory(i);
					n.indexOf(s) < 0 && n.push(s)
				}
				n.sort();
				var o = [];
				for (var r in n) o.push(this.createAdminCategoryMenuItem(n[r]));
				this.addMenuItemsToDialog(t, o), this.addAdminActionsBackButton(t)
			},
			handleAdminInventory: function(e, t) {
				if (!this.playerprofiledata || e != this.playerprofiledata["userid"]) return;
				this.admininventory = t, this.sortInventoryItems(this.admininventory, !0), this.showAdminInventory(!1)
			},
			createAdminCategoryMenuItem: function(e) {
				var t = this,
					n = this.getNameForCategory(e);
				return {
					text: n,
					help: translate("View the %s!", [translate(n)]),
					callback: function(n) {
						t.closePopUpNow(), t.showAdminCategory(e)
					},
					image: "bbuilder_folder_" + e + ".png"
				}
			},
			showAdminCategory: function(e, t) {
				var n = this.showPopUp({
						title: this.getNameForCategory(e),
						hideclosebutton: !0,
						popupType: "admincategory"
					}),
					r = 24;
				t || (t = 0);
				var i = 0;
				for (var s in this.admininventory) {
					var o = this.admininventory[s];
					if (o.hideininventory || this.getItemCategory(o) != e) continue;
					i++
				}
				var u = this,
					a = [];
				for (var s in this.admininventory) {
					var o = this.admininventory[s];
					if (o.hideininventory || this.getItemCategory(o) != e) continue;
					this.extendAdminItemMenuItem(o), a.push(o)
				}
				a.sort();
				var f = a.length;
				f > r && (a = a.slice(t, t + r)), this.addMenuItemsToDialog(n, a), f > r && (t > 0 && n.parentNode.appendChild(this.createButton("Prev", this.getPrevButtonPosition(), function(n) {
					u.showAdminCategory(e, Math.max(0, t - r))
				})), f > t + r && n.parentNode.appendChild(this.createButton("Next", this.getNextButtonPosition(), function(n) {
					u.showAdminCategory(e, t + r)
				}))), this.addBackButton(n, "Go back to categories", function(e) {
					u.closePopUpNow(), u.showAdminInventory(!1)
				})
			},
			getPrevButtonPosition: function() {
				var e = this.game.app.config.enablenewgui;
				return {
					x: e ? 540 : 508,
					y: e ? 7 : -8,
					w: 80,
					h: 40
				}
			},
			getNextButtonPosition: function() {
				var e = this.game.app.config.enablenewgui;
				return {
					x: e ? 625 : 588,
					y: e ? 7 : -8,
					w: 80,
					h: 40
				}
			},
			extendAdminItemMenuItem: function(e) {
				var t = this;
				e.text = (e.nr && e.nr > 1 ? e.nr + " x " : "") + e.name, e.help = e.text, !this.playerprofiledata.canrefundupload || e["itemid"].indexOf("headc") != 0 && e["itemid"].indexOf("bodyc") != 0 && e["itemid"].indexOf("hatc") != 0 ? this.playerprofiledata.canremoveitem && (e.callback = function(n) {
					t.closePopUpNow(), t.showRemoveItemScreen(e)
				}, e.help = translate("Remove %s", [e.name])) : (e.callback = function(n) {
					t.closePopUpNow(), t.showRefundItemScreen(e)
				}, e.help = translate("Refund %s", [e.name])), this.prepareItemAttributes(e)
			},
			showRefundItemScreen: function(e) {
				var t = this.showPopUp({
						title: "Refund Upload",
						hideclosebutton: !0,
						popupType: "refundupload"
					}),
					n = "Do you want to refund the " + this.getItemCategory(e) + " with name " + e.name + " for " + this.playerprofiledata.name + " (" + this.playerprofiledata.userid + ")?";
				n += this.getSmallCharacterPreview(e["itemtype"] == "armor" ? e.armor : this.playerprofiledata.armor, e["itemtype"] == "head" ? e.head : this.playerprofiledata.head, e["itemtype"] == "hat" ? e.hat : e["itemtype"] == "head" ? null : this.playerprofiledata.hat, 260, 120), t.innerHTML = n;
				var r = this,
					i = e["itemid"].indexOf("hatc") == 0 ? e.itemid.substr(4) : e.itemid.substr(5);
				i.substr(-3) == "gif" && (i = i.substr(0, i.length - 3)), t.appendChild(this.createButton("Refund", {
					x: 232,
					y: 300,
					w: 200,
					h: 40
				}, function(e) {
					r.closePopUp(), r.game.client.sendChat("/refundupload " + r.playerprofiledata.userid + " " + i)
				}));
				var r = this;
				this.addBackButton(t, "Go back to items", function(t) {
					r.closePopUpNow(), r.showAdminCategory(r.getItemCategory(e), 0)
				})
			},
			showRemoveItemScreen: function(e) {
				var t = this.showPopUp({
						title: "Remove Item",
						hideclosebutton: !0,
						popupType: "removeitem"
					}),
					n = "Do you want to remove the " + this.getItemCategory(e) + " with name " + e.name + " (" + e.itemid + ") for " + this.playerprofiledata.name + " (" + this.playerprofiledata.userid + ")?",
					r = this.getImageForItem(e),
					i = this.getImageClipForItem(e);
				n += '<img src="' + r + '" style="position:absolute;left:300px;top:100px;clip:' + i + ';" />', t.innerHTML = n;
				var s = this;
				t.appendChild(this.createButton("Remove", {
					x: 232,
					y: 300,
					w: 200,
					h: 40
				}, function(t) {
					s.closePopUp(), s.game.client.sendChat("/removeitem " + s.playerprofiledata.userid + " " + e.itemid)
				}));
				var s = this;
				this.addBackButton(t, "Go back to items", function(t) {
					s.closePopUpNow(), s.showAdminCategory(s.getItemCategory(e), 0)
				})
			},
			showFriends: function(e, t, n) {
				var r = 24;
				e ? this.friendsdata = e : (!this.friendsdata || t) && this.game.client && this.game.client.sendPMAction("getfriends", {
					offset: n ? n : 0,
					limit: r
				});
				var i;
				if (this.friendsdata && this.friendsdata.canpage && (this.friendsdata.offset > 0 || this.friendsdata.friends && this.friendsdata.friends.length >= r)) {
					var s = this.friendsdata ? 1 + Math.floor(this.friendsdata.offset / r) : 1;
					i = translate("Friends") + ": " + translate("Page %s", [s])
				} else this.friendsdata && this.friendsdata.nick ? i = translate("Search") + ": " + this.friendsdata.nick : i = "Friends";
				var o = this.showPopUp({
					title: i,
					hideclosebutton: !0,
					popupType: "friends"
				});
				if (this.friendsdata && this.friendsdata.friends && this.friendsdata.friends.length > 0) {
					var u = [];
					for (var a in this.friendsdata.friends) u.push(this.getFriendMenuItem(this.friendsdata.friends[a]));
					this.addMenuItemsToDialog(o, u)
				} else this.friendsdata && this.friendsdata.offset == 0 && (o.innerHTML = '<div style="font-size:24px"><br><br><center>' + (this.friendsdata.nick ? translate("No players with that nick found.") : translate("There are no friends yet. Tap on players and make them your friends!")) + "<br><div>");
				var f = this;
				this.friendsdata && this.friendsdata.canpage && (this.friendsdata.offset > 0 && o.parentNode.appendChild(this.createButton("Prev", this.getPrevButtonPosition(), function(e) {
					f.showFriends(null, !0, f.friendsdata.offset - r)
				})), this.friendsdata.friends && this.friendsdata.friends.length >= r && o.parentNode.appendChild(this.createButton("Next", this.getNextButtonPosition(), function(e) {
					f.showFriends(null, !0, f.friendsdata.offset + r)
				})));
				var l = this.game.app.config.enablenewgui;
				o.parentNode.appendChild(this.createButton("Search", {
					x: l ? 546 : 526,
					bottom: l ? 10 : -18,
					w: 145,
					h: 40
				}, function(e) {
					f.closePopUpNow(), f.showSearchPlayer()
				}, !0)), this.addMainBackButton(o)
			},
			getFriendMenuItem: function(e) {
				var t = e.name.substring(0, 25);
				if (!this.friendsdata.nick) {
					var n = t.indexOf("(");
					n >= 0 && (t = t.substring(0, n).trim())
				}
				var r = this;
				return {
					text: t,
					itemtype: "head",
					head: e.head,
					hat: e.hat,
					cssclass: "menuitemsmall",
					help: translate("View profile of %s!", [t]),
					callback: function(t) {
						r.closePopUp(), r.showClanMemberProfile(e.userid, function(e) {
							r.closePopUpNow(), r.showFriends()
						})
					},
					badgeicon: e.isonline ? "../files/gui/bbuilder_onlineindicator.png" : null
				}
			},
			addFriend: function() {
				this.closePopUp(), this.game.client && this.game.client.sendPMAction("addfriend", {
					userid: this.playerprofiledata.userid
				})
			},
			removeFriend: function() {
				this.closePopUp(), this.game.client && this.game.client.sendPMAction("removefriend", {
					userid: this.playerprofiledata.userid
				})
			},
			blockProfile: function() {
				this.closePopUp(), this.game.client && this.game.client.sendPMAction("blockuser", {
					userid: this.playerprofiledata.userid
				})
			},
			unblockProfile: function() {
				this.closePopUp(), this.game.client && this.game.client.sendPMAction("unblockuser", {
					userid: this.playerprofiledata.userid
				})
			},
			showSearchPlayer: function() {
				var e = this.showPopUp({
						title: "Search for Players",
						hideclosebutton: !0,
						popupType: "searchplayer"
					}),
					t = this;
				e.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Search for a player - type the nick name or partial nick name.") + "</center><br><br>\n" + '<center><form id="searchplayerform" name="searchplayerform" style="width:100%;">\n' + translate("Nick Name:") + ' <input type="text" id="searchplayernickname" name="searchplayernickname" style="width:360px; height:32px;" value="">\n' + '<input type="submit" value="' + translate("Search") + '" class="inputbutton"></center>\n' + "</form><div>";
				var n = gui.getDom("searchplayerform");
				n.onsubmit = function(e) {
					return t.searchPlayer(), !1
				}, this.addBackButton(e, "Go back to the friends list", function(e) {
					t.closePopUpNow(), t.showFriends()
				}), gui.focus("searchplayernickname")
			},
			searchPlayer: function() {
				var e = document.searchplayerform.searchplayernickname.value.trim();
				if (e.length <= 0) return;
				this.closePopUpNow(), this.showFriends(), this.game.client && this.game.client.sendPMAction("searchplayers", {
					nick: e
				})
			},
			inviteFriends: function() {
				if (this.isMobile()) return;
				FB.ui({
					method: "apprequests",
					message: this.game.app.config.invitemessage
				}, this.inviteCallback)
			},
			inviteCallback: function(e) {},
			showSettings: function() {
				var e = this.showPopUp({
						title: "Game Settings",
						hideclosebutton: !0,
						popupType: "settings"
					}),
					t = [{
						id: "soundsoff",
						title: "Turn off sound effects"
					}, {
						id: "musicoff",
						title: "Turn off music"
					}, {
						id: "hidehome",
						title: "Hide the home button"
					}, {
						id: "hideminimap",
						title: "Hide the minimap (on right side)"
					}, {
						id: "noministories",
						title: "No guide videos on mini map"
					}, this.game.renderer.isMobile ? {
						id: "nomobilezoom",
						title: "Zoom out the game"
					} : {
						id: "zoom2x",
						title: "Zoom in the game"
					}, {
						id: "hidenames",
						title: "Hide player names (show with N key)"
					}, {
						id: "hidesidekicks",
						title: "Hide pets which follow other players"
					}, {
						id: "nohouseinvites",
						title: "No house invitations"
					}, {
						id: "noclaninvites",
						title: "No clan invitations"
					}, {
						id: "nosparinvites",
						title: "No spar invitations"
					}, {
						id: "notradeinvites",
						title: "No trade invitations"
					}, {
						id: "nolikemsg",
						title: "No like notifications"
					}, {
						id: "noweather",
						title: "Hide weather/snow"
					}, {
						id: "nodaynight",
						title: "No day-night cycle"
					}, {
						id: "noingametv",
						title: "No TV videos"
					}, {
						id: "sortbytime",
						title: "Sort items by time"
					}];
				(this.game.renderer.isMobile || this.game.settings.buttonspacing) && t.push({
					id: "buttonspacing",
					title: "Add button spacing"
				});
				var n = this,
					r = "";
				r += '<form name="settingsform" style="width:100%;">\n';
				for (var i in t) {
					var s = t[i];
					r += '<label style="white-space: nowrap; float:left; margin-right:5px;"><input type="checkbox" id="checkbox' + s.id + '" name="' + s.id + '" ' + (this.game.settings[s.id] ? "checked" : "") + ">" + translate(s.title) + "</label>"
				}
				r += "</form>", e.innerHTML = r;
				for (var i in t) {
					var o = gui.getDom("checkbox" + t[i].id);
					o.onchange = function(e) {
						n.onSettingsChange(e.target)
					}
				}
				this.addMainBackButton(e)
			},
			onSettingsChange: function(e) {
				e.checked && !this.game.settings[e.name] ? (this.game.settings[e.name] = !0, this.game.onSettingsChanged(!0)) : !e.checked && this.game.settings[e.name] && (delete this.game.settings[e.name], this.game.onSettingsChanged(!0))
			},
			showUploadGraphic: function() {
				this.uploaddata = null;
				var e = this.showPopUp({
					title: "Upload Custom Graphic",
					hideclosebutton: !0,
					popupType: "uploadgraphic"
				});
				this.addUploadHTML(e, this.game.app.config.uploadavailabletypes, !0);
				var t = this,
					n = this.createButton("Upload", {
						x: 405,
						y: 280,
						w: 180,
						h: 40
					}, function(e) {
						t.closePopUpNow(), t.showWaitingScreen("Upload Graphic", translate("Uploading the graphic...")), t.uploaddata && t.game.client && t.game.client.sendUploadAction("upload", t.uploaddata)
					});
				n.id = "characteruploadbutton", n.style.display = "none", e.appendChild(n), this.addMainBackButton(e)
			},
			addUploadHTML: function(e, t, n) {
				var r = '<div id="characterfiledrop" class="uploadstitched" style="position:absolute; width:300px; height:300px;">    <p id="characterfilestatus" class="uploaddroptext">' + (this.isMobile() ? "" : translate("Drop files here!")) + "</p>" + '    <canvas id="charactercanvas" width=160 height=160 style="width:300px;height:300px;"></canvas>' + "</div>" + '<div style="position:absolute; bottom:27px; width: 360px; height:30px; text-align: center;">' + '    <select name="CustomType" id="CharacterCustomTypeField" style="width:80px;">';
				for (var i in t) r += "<option" + (t[i] == "HEAD" ? " selected" : "") + ">" + t[i] + "</option>";
				r += '    </select>    <input type="file" name="Custom" id="CharacterCustomField" style="display:none;">    <label for="CharacterCustomField" style="cursor:pointer; width:120px;"><u>' + translate("Or choose a file") + "</u></label>" + "</div>", n && (r += '<div id="characteruploadtext1" style="position:absolute; left: 360px; top:20px; width: 300px; height: 300px; ">' + translate("Choose a file and preview it on the character on the left side. Click inside the preview to change the direction of the character.<br>Supported graphic types: %s", [t]) + "</div>" + '<div id="characteruploadtext2" style="display: none; position:absolute; left: 360px; top:20px; width: 300px; height: 300px; ">' + translate("You are uploading:<br>- A %s<br>- %s bytes<br>- Cost: %s Coins<br>After uploading an admin will check and approve it.", ['<span id="characteruploadtype">Hat</span>', '<span id="characteruploadsize">20000</span>', '<span id="characteruploadprice">1000</span>']) + "<br>" + "</div>"), e.innerHTML = r;
				var s = gui.getDom("characterfiledrop"),
					o = this.game.storymanager.drawStoryInCanvas("charactercanvas", s, {
						type: "game",
						data: [{
							ani: "player_walk",
							head: this.game.player.head,
							hat: this.game.player.hat,
							armor: this.game.player.armor
						}]
					});
				this.configureGraphicUploadActions(s, gui.getDom("CharacterCustomField"), gui.getDom("CharacterCustomTypeField"), o.player)
			},
			handleUploadAction: function(e, t) {
				switch (e) {
					case "uploadsuccess":
						this.game.showGeneralMessage(t.message), this.isShowingUploadMenu() && this.closePopUpNow();
						break;
					case "uploadfailed":
						this.getCurrentMenu() == "uploadshopitem" ? gui.alert(t.message) : (this.game.showGeneralMessage(t.message), this.isShowingUploadMenu() && this.closePopUpNow());
						break;
					case "uploadid":
						this.updateUploadItemID(t);
						break;
					case "playerupload":
						this.isShowingUploadMenu() && (this.closePopUpNow(), this.showUploadAdminMenu(!1, t));
						break;
					case "adminerror":
						this.game.showGeneralMessage(t.message), t.close && (this.closePopUpNow(), this.showAdminMenu())
				}
			},
			isShowingUploadMenu: function() {
				var e = this.getCurrentMenu();
				return e && (e == "waitingscreen" || e.indexOf("upload") >= 0)
			},
			configureGraphicUploadActions: function(e, t, n, r) {
				function i(e) {
					return e.preventDefault && e.preventDefault(), !1
				}
				e.addEventListener("dragover", i), e.addEventListener("dragenter", i);
				var s = this;
				e.addEventListener("drop", function(e) {
					e = e || window.event, e.preventDefault && e.preventDefault();
					var t = e.dataTransfer,
						n = t.files;
					for (var i = 0; i < n.length; i++) {
						var o = n[i],
							u = new FileReader;
						u.onload = function(e) {
							s.replaceCharacterImage(r, s.getGraphicType(o.name), o.name, e.target.result)
						}, u.readAsDataURL(o)
					}
					return !1
				}), t.addEventListener("change", function(e) {
					if (t.files.length <= 0) return;
					var i = t.files[0],
						o = new FileReader;
					return o.onload = function(e) {
						s.replaceCharacterImage(r, n.value, i.name, e.target.result)
					}, o.readAsDataURL(i), !0
				}), t.addEventListener("click", function() {
					this.value = ""
				}, !1)
			},
			replaceCharacterImage: function(e, t, n, r) {
				var i = gui.getDom("characterfilestatus");
				if (!t) {
					i && (i.innerHTML = translate("Unknown File Type"));
					return
				}
				if (this.getCurrentMenu() != "uploadshopitem" && this.game.app.config.uploadavailabletypes.indexOf(t) < 0) {
					i && (i.innerHTML = translate("Unsupported File Type"));
					return
				}
				var s = n.indexOf(".gif") >= 0;
				this.uploaddata = {
					type: t,
					filename: n,
					data: r.substring(r.indexOf(",") + 1, r.length),
					price: (t == "HAT" ? this.game.app.config.uploadpricehat : t == "HEAD" ? this.game.app.config.uploadpricehead : this.game.app.config.uploadpricebody) + (s ? this.game.app.config.giftopprice : 0)
				}, this.uploaddata.size = atob(this.uploaddata.data).length;
				var o = document.createElement("img");
				o.src = r;
				var u = {
					filename: n,
					image: o
				};
				if (s) try {
					var a = r.substring(r.indexOf(",") + 1, r.length),
						f = atob(a);
					this.game.renderer.loadGifData(u, f)
				} catch (l) {}
				var c = e.game.animationmanager,
					h = c.getPathForDefault(t) + c.expandGameFilename(t.toLowerCase() + (t != "BODY" ? "s" : ""), e[t == "BODY" ? "armor" : t.toLowerCase()]);
				e.game.renderer.customtextures[h] = u, i && (i.innerHTML = t + ":<br>" + n), this.getCurrentMenu() == "uploadshopitem" ? this.configureUploadShopItemButton() : this.configureUploadDataButton(), t == "BOW" && e.dir == Types.Orientations.DOWN && (e.dir = Types.Orientations.UP)
			},
			configureUploadDataButton: function() {
				var e = 1e5,
					t = !1,
					n = gui.getDom("characteruploadtype");
				n && (n.innerHTML = this.uploaddata.type + (this.uploaddata.filename.indexOf(".gif") >= 0 ? " gif" : "")), n = gui.getDom("characteruploadsize"), n && (n.innerHTML = this.uploaddata.size, this.uploaddata.size > e ? (t = !0, n.style.color = "red") : n.style.color = "white"), n = gui.getDom("characteruploadprice"), n && (n.innerHTML = this.uploaddata.price);
				var r = gui.getDom("characteruploadbutton");
				r && (r.style.display = t ? "none" : "block"), n = gui.getDom("characteruploadtext1"), n && (n.style.display = "none"), n = gui.getDom("characteruploadtext2"), n && (n.style.display = "block")
			},
			getGraphicType: function(e) {
				return e.indexOf("head") >= 0 ? "HEAD" : e.indexOf("body") >= 0 ? "BODY" : e.indexOf("hat") >= 0 ? "HAT" : e.indexOf("sword") >= 0 || e.indexOf("dagger") >= 0 || e.indexOf("blade") >= 0 ? "WEAPON" : e.indexOf("bow") >= 0 ? "BOW" : null
			},
			showUploadAdminMenu: function(e, t) {
				e && this.game.client && this.game.client.sendUploadAction("getupload", {}), t && (this.playerupload = t);
				var n = this.showPopUp({
						title: "Check Uploads",
						hideclosebutton: !0,
						popupType: "checkuploads"
					}),
					r = '<div style="font-size:24px;">';
				if (this.playerupload) {
					var i = this.playerupload.type;
					r += '<div style="width: 380px;">', r += translate("Player:") + " " + this.playerupload.name + " (" + this.playerupload.userid + ")<br>", r += translate("Type:") + " " + i + "<br>", r += translate("Uploaded: %s ago", [this.playerupload.uploadtime]) + "<br>";
					if (this.playerupload.exists) {
						var s = this.playerupload.exists;
						r += translate("Previously uploaded by: %s (%s) %s ago", [s.name, s.userid, s.uploadtime]) + " (" + (s.status == 1 ? translate("approved") : s.status == 2 ? translate("rejected") : s.status == 3 ? translate("refunded") : translate("waiting in queue")) + ")<br>"
					}
					r += "</div>", r += this.getSmallCharacterPreview(i == "BODY" ? this.playerupload.filename : "clotharmor", i == "HEAD" ? this.playerupload.filename : "head1", i == "HAT" ? this.playerupload.filename : null, 100, 150), r += "</div>";
					var o = this.game.animationmanager,
						u = o.getPathForDefault(i) + this.playerupload.filename;
					r += '<div style="position:absolute;left:400px;top:60px;">', this.isMobile() || (r += '<a href="' + u + '" target="_blank" style="color:white;">Open File</a><br>'), r += '<img src="' + u + '"></div>', r += '<div style="position:absolute;left:0px;top:300px;width:360px;height:50px;">' + translate("Reason:") + " " + '<select name="RejectReason" id="RejectReasonField" style="width:160px;">' + '    <option value="copyright" ' + (this.playerupload.exists ? "" : "selected") + ">" + translate("Copyright") + "</option>" + '    <option value="quality">' + translate("Bad quality") + "</option>" + '    <option value="transparency">' + translate("Missing Transparency") + "</option>" + '    <option value="exists" ' + (this.playerupload.exists ? "selected" : "") + ">" + translate("Already existing") + "</option>" + '    <option value="hatonhead">' + translate("No hats on head") + "</option>" + '    <option value="invalid">' + translate("Invalid") + "</option>" + "</select></div>"
				} else r += "Loading...";
				r += "</div>", n.innerHTML = r;
				if (this.playerupload) {
					var a = this;
					n.parentNode.appendChild(this.createButton("Next", this.getNextButtonPosition(), function(e) {
						a.game.client.sendUploadAction("getupload", {
							fileid: a.playerupload.fileid
						})
					})), n.appendChild(this.createButton("View Profile", {
						x: 468,
						y: 0,
						w: 200,
						h: 40
					}, a.getClanMemberCallback(a.playerupload.userid, function(e) {
						a.closePopUpNow(), a.showUploadAdminMenu(!1)
					})));
					var f = gui.getDom("RejectReasonField");
					n.appendChild(this.createButton("Reject", {
						x: 82,
						y: 350,
						w: 200,
						h: 40
					}, function(e) {
						a.closePopUpNow(), a.showWaitingScreen("Rejecting Graphic", "Rejecting the graphic..."), a.game.client && a.game.client.sendUploadAction("reject", {
							fileid: a.playerupload.fileid,
							reason: f.value
						})
					})), n.appendChild(this.createButton("Approve", {
						x: 382,
						y: 350,
						w: 200,
						h: 40
					}, function(e) {
						a.closePopUpNow(), a.showWaitingScreen("Approving Graphic", "Approving the graphic..."), a.game.client && a.game.client.sendUploadAction("approve", {
							fileid: a.playerupload.fileid
						})
					}))
				}
				this.addAdminBackButton(n)
			},
			showUploadShopItem: function() {
				var e = this.showPopUp({
					title: "Upload & Configure Shop Item",
					hideclosebutton: !0,
					popupType: "uploadshopitem"
				});
				this.addUploadHTML(e, ["HAT", "HEAD", "BODY", "WEAPON", "BOW"], !1), this.shopitemfields = {
					itemtype: {
						row: 0,
						title: "Type:",
						"default": ""
					},
					itemid: {
						row: 1,
						title: "ID:",
						"default": ""
					},
					filename: {
						row: 2,
						title: "File:",
						"default": ""
					},
					name: {
						row: 3,
						title: "Name:",
						"default": ""
					},
					description: {
						row: 4,
						title: "Text:",
						"default": ""
					},
					price: {
						row: 5,
						title: "Price:",
						"default": ""
					},
					level: {
						row: 6,
						title: "Level:",
						"default": ""
					}
				};
				var t = '<div id="uploaditemform" style="display:none;position:absolute;left:370px;top:10px;right:0px;">\n';
				for (var n in this.shopitemfields) {
					var r = this.shopitemfields[n],
						i = r.row * 40;
					t += '<label id="label' + n + '" style="position:absolute;left:0px;top:' + i + 'px;width:90px;height:24px">' + translate(r.title) + "</label>\n", t += '<input type="text" id="edit' + n + '" name="edit' + n + '"' + ' style="position:absolute;left:90px;top:' + i + 'px;right:0px;height:28px">\n'
				}
				t += "</div>\n";
				var s = document.createElement("div");
				s.innerHTML = t, e.appendChild(s);
				var o = this,
					u = this.createButton("Upload", {
						x: 405,
						y: 320,
						w: 180,
						h: 40
					}, function(e) {
						if (o.uploaddata && o.game.client) {
							o.uploaddata.item || (o.uploaddata.item = {});
							for (var t in o.shopitemfields) {
								var n = o.shopitemfields[t];
								o.uploaddata.item[t] = gui.getDom("edit" + t).value
							}
							o.game.client.sendUploadAction("uploaditem", o.uploaddata)
						}
					});
				u.id = "itemuploadbutton", u.style.display = "none", e.appendChild(u), this.addAdminBackButton(e)
			},
			configureUploadShopItemButton: function() {
				var e = 1e5,
					t = this.uploaddata.size > e,
					n = gui.getDom("itemuploadbutton");
				n && (n.style.display = t ? "none" : "block");
				var r = gui.getDom("uploaditemform");
				r && (r.style.display = t ? "none" : "block");
				var i = this.game.player.name.substring(0, 25),
					s = i.indexOf("(");
				s >= 0 && (i = i.substring(0, s).trim()), this.shopitemfields.itemtype.default = this.uploaddata.type.toLowerCase(), this.shopitemfields.itemid.default = this.uploaddata.type.toLowerCase() + "1", this.shopitemfields.filename.default = this.uploaddata.filename, this.shopitemfields.name.default = this.uploaddata.type.substr(0, 1).toUpperCase() + this.uploaddata.type.substr(1).toLowerCase() + "1", this.shopitemfields.description.default = "Drawn by " + i + ".", this.shopitemfields.price.default = "800";
				for (var o in this.shopitemfields) {
					var u = this.shopitemfields[o],
						a = gui.getDom("edit" + o),
						f = gui.getDom("label" + o);
					if (!a || !f) continue;
					o == "level" ? this.uploaddata.type == "WEAPON" ? (a.value = 12, a.style.display = "block", f.style.display = "block") : (a.value = "", a.style.display = "none", f.style.display = "none") : a.value = u.default
				}
				this.game.client && this.game.client.sendUploadAction("getuploadid", {
					type: this.uploaddata.type,
					filename: this.uploaddata.filename
				})
			},
			updateUploadItemID: function(e) {
				e.itemid && (this.shopitemfields.itemid.default = e.itemid, gui.getDom("edititemid").value = e.itemid), e.filename && (this.shopitemfields.filename.default = e.filename, gui.getDom("editfilename").value = e.filename), e.name && (this.shopitemfields.name.default = e.name, gui.getDom("editname").value = e.name)
			},
			getSmallCharacterPreview: function(e, t, n, r, i) {
				html = '<div style="width:300px; height:100px;' + (r != undefined && i != undefined ? "position:absolute;left:" + r + "px;top:" + i + "px;" : "") + '">';
				var s = {
					itemtype: "armor",
					armor: this.game.animationmanager.expandGameFilename("body", e)
				};
				return html += '<img draggable="false" ondragstart="return false;" src="' + this.getImageForItem(s) + '" style="' + 'position:absolute;left:0px;top:35px;clip: rect(0px 144px 48px 0px);">', s = {
					itemtype: "head",
					head: this.game.animationmanager.expandGameFilename("head", t)
				}, html += '<img draggable="false" ondragstart="return false;" src="' + this.getImageForItem(s) + '" style="' + 'position:absolute;left:0px;top:10px;clip: rect(0px 144px 48px 0px);">', n && (s = {
					itemtype: "hat",
					hat: n
				}, html += '<img draggable="false" ondragstart="return false;" src="' + this.getImageForItem(s) + '" style="' + 'position:absolute;left:0px;top:-6px;clip: rect(0px 144px 72px 0px);">'), html += "</div>", html
			},
			showMailingMenu: function(e) {
				if (e) {
					this.game.client && this.game.client.sendPMAction("getmailings", {}), this.mailinginterval && clearInterval(this.mailinginterval);
					var t = this;
					this.mailinginterval = setInterval(function() {
						var e = t.getCurrentMenu();
						if (t.mailingMenus.indexOf(e) < 0) {
							clearInterval(t.mailinginterval), t.mailinginterval = null;
							return
						}
						e == "mailing" && t.game.client.sendPMAction("getmailings", {})
					}, 1e4)
				}
				var n = this.showPopUp({
						title: "Push Announcement",
						hideclosebutton: !0,
						popupType: "mailing"
					}),
					r = "";
				if (this.mailinginfo && this.mailinginfo.mailings && this.mailinginfo.mailings.length > 0) {
					r += "Previous Announcements:<br><br>";
					for (var i = 0; i < this.mailinginfo.mailings.length; i++) {
						var s = this.mailinginfo.mailings[i],
							o;
						s.senderlook && s.senderlook.head && (o = [{
							x: -4,
							y: -4,
							itemtype: "head",
							head: this.game.animationmanager.expandGameFilename("head", s.senderlook.head)
						}], s.senderlook.hat && o.push({
							x: -4,
							y: -20,
							itemtype: "hat",
							hat: this.game.animationmanager.expandGameFilename("hat", s.senderlook.hat)
						})), r += '<div style="height:48px;pointer-events:none;' + (s.status == 1 ? "color:lime;" : "") + '">' + '<div style="width:140px;float:left;margin-left:20px;text-align:center;"><b>' + s.timestr + " ago:</b></div> " + (o ? this.getHTMLFromItemsInFlow(o) : "") + '<div style="margin-left:46px;float:left;">' + s.title.substring(0, 25).trim() + "</div>" + '<div style="width:130px;float:right;margin-right:50px;text-align:right;">' + (s.status == 1 ? s.success + s.failed + "/" + s.tokennr : s.tokennr + " Pl") + "</div> " + "</div>"
					}
				} else r = "There are no previous announcements. Start a new announcement!";
				n.innerHTML = r;
				if (this.mailinginfo) {
					var t = this;
					this.mailinginfo.cancreate ? n.appendChild(this.createButton("New Announcement", {
						x: 212,
						y: 300,
						w: 240,
						h: 40
					}, function(e) {
						t.closePopUpNow(), t.showNewMailingMenu()
					})) : this.mailinginfo.canstop && n.appendChild(this.createButton("Stop", {
						x: 232,
						y: 300,
						w: 200,
						h: 40
					}, function(e) {
						t.stopMailing()
					}))
				}
				this.addAdminBackButton(n)
			},
			showNewMailingMenu: function() {
				var e = this.showPopUp({
						title: "New Announcement",
						hideclosebutton: !0,
						popupType: "mailingnew"
					}),
					t = this,
					n = '<div style="font-size:24px">' + translate("Enter a title and message to send an announcement via push notification. You can use emojis.") + "<br><br>\n" + '<form id="createmailingform" name="createmailingform" style="width:100%;">\n' + '<div style="position: absolute; left: 0px; top: 100px;">' + translate("Title:") + "</div>" + '<input type="text" name="title" style="position: absolute; top: 100px; left: 160px; width:432px; height:32px;" value="">\n' + '<div style="position: absolute; left: 0px; top: 150px;">' + translate("Message:") + "</div>" + '<textarea type="text" name="text"' + ' style="position: absolute; top: 150px; left: 160px; width:432px; height:160px"></textarea>\n' + '<input type="submit" value="' + translate("Create Announcement") + '"' + ' style="position: absolute; top: 340px; left: 250px; width: 240px; height: 40px;" class="inputbutton">\n' + "</form><div>";
				e.innerHTML = n;
				var r = gui.getDom("createmailingform");
				r.onsubmit = function(e) {
					return t.createMailing(), !1
				}, this.addBackButton(e, "Go back", function(e) {
					t.closePopUpNow(), t.showMailingMenu(!1)
				})
			},
			createMailing: function() {
				var e = document.createmailingform.title.value.trim(),
					t = document.createmailingform.text.value.trim();
				if (e.length <= 0 || t.length <= 0) return;
				this.game.client && this.game.client.sendPMAction("startmailing", {
					title: e,
					text: t
				}), this.closePopUpNow(), this.showMailingMenu(!0)
			},
			stopMailing: function() {
				this.game.client && this.game.client.sendPMAction("stopmailing", {
					newsletter: this.mailinginfo.mailings[0].newsletter
				})
			},
			handleMailingAction: function(e, t) {
				switch (e) {
					case "mailinginfo":
						this.mailinginfo = t, this.mailingMenus.indexOf(this.getCurrentMenu()) >= 0 && (this.closePopUpNow(), this.showMailingMenu(!1));
						break;
					case "newmailing":
						this.closePopUpNow(), this.showMailingMenu(!0);
						break;
					case "message":
					case "error":
						gui.alert(t.message)
				}
			},
			showGeneralHelp: function() {
				this.game.storymanager.showStoryPlayList(null, "guide")
			},
			showAbout: function() {
				var e = this.showPopUp({
						title: "About " + this.game.app.config.gamename,
						hideclosebutton: !0,
						popupType: "about"
					}),
					t = '<div style="font-size:24px;">' + this.game.app.config.aboutme + "</div>";
				e.innerHTML = t, this.addMainBackButton(e)
			},
			showInventory: function(e, t) {
				this.inventoryfromgame = t, e && this.game.client && this.game.client.sendGetInventory(), this.game.app.config.enablebackpackani && this.game.player && this.game.player.canSetAnimation() && this.game.player.getAnimation() != "backpack_search" && this.game.player._stopAndAnimate("backpack_open");
				var n = "Item Folders";
				this.isMobile() || (n += " (Q key)");
				var r = this.showPopUp({
						title: n,
						hideclosebutton: !t,
						popupType: "inventory"
					}),
					i = [];
				for (var s in this.inventoryitems) {
					var o = this.inventoryitems[s];
					if (o.hideininventory) continue;
					var u = this.getItemCategory(o);
					i.indexOf(u) < 0 && i.push(u)
				}
				i.sort();
				var a = [];
				for (var s in i) a.push(this.createCategoryMenuItem(i[s]));
				this.addMenuItemsToDialog(r, a);
				var f = this.game.app.config.enablenewgui,
					l = this;
				this.inventoryitems && r.parentNode.appendChild(this.createButton("Search", {
					x: f ? 546 : 526,
					bottom: f ? 10 : -18,
					w: 145,
					h: 40
				}, function(e) {
					l.closePopUpNow("searchitem"), l.showSearchItem(!1)
				}, !0)), r.parentNode.appendChild(this.createButton("Trades", {
					x: f ? 20 : 0,
					bottom: f ? 10 : -18,
					w: 145,
					h: 40
				}, function(e) {
					l.closePopUpNow("tradehistory"), l.game.tradingmanager.showTradeHistory(null, !0, 0)
				}, !0)), t || this.addMainBackButton(r)
			},
			getItemCategory: function(e, t) {
				return t && ["weaponskin", "food"].indexOf(e.itemtype) >= 0 ? "weapon" : !t && e["itemtype"] == "weapon" && ["script", "torch"].indexOf(e.weapontype) >= 0 ? "tool" : e["itemtype"] == "weapon" && ["item", "morph"].indexOf(e.weapontype) >= 0 ? e.weapontype : e["itemtype"] == "furniture" && e["furnituretype"] == "pet" ? "pet" : ["egg", "candy", "valentingem", "itembox", "currency", "ghostcoin", "ec"].indexOf(e.itemtype) >= 0 ? "valuable" : e["itemtype"] == "quest" && this.game.app.config.primaryweapon != "gun" ? "valuable" : e.itemtype
			},
			createCategoryMenuItem: function(e) {
				var t = this,
					n = this.getNameForCategory(e);
				return {
					text: n,
					help: translate("View your %s!", [translate(n)]),
					callback: function(n) {
						t.closePopUpNow("category");
						var r = 0;
						t.game.player && ["head", "hat", "armor", "weapon"].indexOf(e) >= 0 && (r = t.compressGameFilename(t.game.player[e])), t.showCategory({
							category: e,
							offset: r,
							fromhotkey: !1
						})
					},
					image: "bbuilder_folder_" + e + ".png"
				}
			},
			createSearchCategoryMenuItem: function(e, t) {
				var n = this,
					r = this.getNameForCategory(e);
				return {
					text: r,
					help: translate("View your %s!", [translate(r)]),
					callback: function(r) {
						n.closePopUpNow("itemsearchresult"), n.showItemsBySearch("category:" + e, 0, t)
					},
					image: "bbuilder_folder_" + e + ".png"
				}
			},
			showSearchItem: function(e) {
				this.showsearchfortrade = e, !this.inventoryitems && this.game.client && this.game.client.sendGetInventory();
				var t = this.showPopUp({
						title: "Search for Items",
						hideclosebutton: !0,
						popupType: "searchitem"
					}),
					n = this;
				t.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Search for an item - type the name or partial name.") + "</center><br>\n" + '<center><form id="searchitemform" name="searchitemform" style="width:100%;">\n' + translate("Name:") + ' <input type="text" id="searchitemname" name="searchitemname" style="width:360px; height:32px;" value="">\n' + '<input type="submit" value="' + translate("Search") + '" class="inputbutton"></center>\n' + "</form><div>\n" + "<br>\n<center>" + translate("or show items of following types:") + "</center>";
				var r = gui.getDom("searchitemform");
				r.onsubmit = function(t) {
					return n.searchItem(e), !1
				};
				var i = [];
				for (var s in this.inventoryitems) {
					var o = this.inventoryitems[s];
					if (o.hideininventory) continue;
					var u = this.getItemCategory(o);
					i.indexOf(u) < 0 && ["hat", "head", "armor", "loot", "weapon", "furniture", "weaponskin"].indexOf(u) >= 0 && i.push(u)
				}
				i.sort();
				var a = [];
				for (var s in i) a.push(this.createSearchCategoryMenuItem(i[s], e));
				var f = this.createMenuContainer(t, {
					x: 0,
					y: 220,
					w: 640,
					h: 160
				});
				this.addMenuItemsToDialog(f, a), e ? this.addBackButton(t, "Go back to trading", function(e) {
					n.game.tradingmanager.showTradeMenu(n.game.tradingmanager.tradeinfo)
				}) : this.addBackButton(t, "Go back to categories", function(e) {
					n.closePopUpNow("inventory"), n.showInventory(!1, n.inventoryfromgame)
				}), gui.focus("searchitemname")
			},
			searchItem: function(e) {
				var t = document.searchitemform.searchitemname.value.trim();
				if (t.length <= 0) return;
				this.closePopUpNow("itemsearchresult"), this.showItemsBySearch(t, 0, e)
			},
			addClansBackButton: function(e) {
				var t = this;
				this.addBackButton(e, "Go back to the clans menu", function(e) {
					t.closePopUpNow(), t.showClansMenu(!1)
				})
			},
			addManageClansBackButton: function(e) {
				var t = this;
				this.addBackButton(e, "Go back to manage the clan", function(e) {
					t.closePopUpNow(), t.showManageClan()
				})
			},
			addClanInfoBackButton: function(e) {
				var t = this;
				this.addBackButton(e, "Go back to view the clan", function(e) {
					t.closePopUpNow(), t.showClanInfo()
				})
			},
			getNameForCategory: function(e) {
				switch (e) {
					case "adventgift":
						return "Advent Calendar";
					case "armor":
						return "Clothes";
					case "food":
						return this.game.app.config.primaryweapon == "gun" ? "Food+Heal" : "Food";
					case "bow":
					case "bomb":
						return "Bows+Bombs";
					case "furniture":
						return "Furniture";
					case "tool":
						return "Tools+Music";
					case "weaponskin":
						return "Skins";
					case "mount":
						return this.game.app.config.primaryweapon == "gun" ? "Mounts+Cars" : "Mounts";
					default:
						return e ? e.charAt(0).toUpperCase() + e.substring(1) + "s" : "Category"
				}
			},
			addInventoryItems: function(e) {
				this.inventoryitems = e, this.sortInventoryItems(this.inventoryitems, !this.game.settings.sortbytime);
				switch (this.getCurrentMenu()) {
					case "inventory":
						this.closePopUpNow("inventory"), this.showInventory(!1, this.inventoryfromgame);
						break;
					case "category":
						this.closePopUpNow("category"), this.showCategory(this.inventoryCategory);
						break;
					case "searchitem":
						this.closePopUpNow("searchitem"), this.showSearchItem(this.showsearchfortrade)
				}
			},
			sortInventoryItems: function(e, t) {
				e.sort(function(e, n) {
					return e.price < n.price ? -1 : e.price > n.price ? 1 : t && e.name < n.name ? -1 : t && e.name > n.name ? 1 : 0
				})
			},
			showCategory: function(e) {
				var t = this.showPopUp({
						title: e.fromhotkey ? translate("Item for Hotkey") + " " + e.fromhotkey : this.getNameForCategory(e.category),
						hideclosebutton: !e.fromhotkey,
						popupType: "category"
					}),
					n = 24;
				e.offset || (e.offset = 0), this.inventoryCategory = e, !this.inventoryitems && this.game.client && this.game.client.sendGetInventory();
				var r = 0;
				if (this.inventoryitems) {
					for (var i in this.inventoryitems) {
						var s = this.inventoryitems[i];
						if (s.hideininventory || this.getItemCategory(s, e.fromhotkey) != e.category) continue;
						typeof e.offset == "string" && s["itemid"] == e.offset && (e.offset = Math.floor(r / n) * n), r++
					}
					typeof e.offset == "string" && (e.offset = 0)
				}
				var o = "";
				r <= 12 && (o += this.getCategoryHelp(e.category)), t.innerHTML = o;
				var u = [];
				for (var i in this.inventoryitems) {
					var s = this.inventoryitems[i];
					if (s.hideininventory || this.getItemCategory(s, e.fromhotkey) != e.category) continue;
					this.extendItemMenuItem(s, !1), u.push(s)
				}
				var a = this;
				e.category == "bow" && u.splice(0, 0, {
					callback: function(e) {
						a.closePopUpNow(), a.game.client.sendUseInventory("bomb", "equip")
					},
					text: "Bombs",
					help: "Equip Bombs!",
					image: "bbuilder_icon_menubomb.png"
				});
				var f = u.length;
				f > n && (u = u.slice(e.offset, e.offset + n)), this.addMenuItemsToDialog(t, u);
				if (f > n) {
					var l = this.game.app.config.enablenewgui;
					e.offset > 0 && t.parentNode.appendChild(this.createButton("Prev", {
						x: e.fromhotkey ? l ? 490 : 468 : l ? 540 : 508,
						y: l ? 7 : -8,
						w: 80,
						h: 40
					}, function(e) {
						a.inventoryCategory.offset = Math.max(0, a.inventoryCategory.offset - n), a.showCategory(a.inventoryCategory)
					})), f > e.offset + n && t.parentNode.appendChild(this.createButton("Next", {
						x: e.fromhotkey ? l ? 570 : 548 : l ? 625 : 588,
						y: l ? 7 : -8,
						w: 80,
						h: 40
					}, function(e) {
						a.inventoryCategory.offset += n, a.showCategory(a.inventoryCategory)
					}))
				}
				e.fromhotkey || this.addBackButton(t, "Go back to categories", function(e) {
					a.closePopUpNow("inventory"), a.showInventory(!1, a.inventoryfromgame)
				})
			},
			getCategoryHelp: function(e) {
				var t = '<div style="position:absolute;width:100%;bottom:30px;height:40px;"><center>';
				switch (e) {
					case "armor":
					case "hat":
						t += translate("Choose an item to wear!");
						break;
					case "furniture":
						t += translate("Choose a furniture to drop!");
						break;
					case "pet":
						t += translate("Choose a pet to place!");
						break;
					case "head":
						t += translate("Choose a look to apply!");
						break;
					case "food":
						t += translate("Choose an item to eat or drink!");
						break;
					case "adventgift":
					case "valuable":
					case "loot":
					case "nitro":
					case "mushroom":
						return "";
					case "bow":
						t += translate("Choose an item to equip or unequip!");
						break;
					default:
						t += translate("Choose an item to equip!")
				}
				return t += "</center></div>", t
			},
			extendItemMenuItem: function(e, t) {
				var n = this;
				e.callback = function(r) {
					t ? (n.closePopUpNow("trade"), "nr" in e && e["nr"] != 1 ? n.game.tradingmanager.showChangeTradeItem(e, !0) : n.game.tradingmanager.addTradeItem(e.itemid, 1)) : (n.closePopUpNow(), n.inventoryCategory.fromhotkey ? n.game.addHotkey(n.inventoryCategory.fromhotkey, e) : n.game.client.sendUseInventory(e.itemid, "equip"))
				}, e.text = (e.nr && e.nr > 1 ? e.nr + " x " : "") + e.name;
				switch (e.itemtype) {
					case "mushroom":
						e.help = translate("%s, sell at mushroom shop", [e.text]);
						break;
					case "trash":
						e.help = translate("%s, sell at recycling center shop", [e.text]);
						break;
					case "loot":
						e.help = translate("%s, sell at loot shop", [e.text]);
						break;
					case "valentingem":
					case "candy":
					case "nitro":
					case "egg":
						e.help = translate("%s, use this to buy special items", [e.text]);
						break;
					case "adventgift":
						e.help = e.name;
						break;
					default:
						e.help = translate("Equip/Use %s!", [e.name])
				}
				this.prepareItemAttributes(e)
			},
			prepareItemAttributes: function(e) {
				e.image = e.image, e.itemtype = e.itemtype, e.hat = e.hat, e.head = e.head, e.bow = e.bow, e.armor = e.armor, e.weapon = e.weapon, e.mount = e.mount
			},
			showItemsBySearch: function(e, t, n) {
				var r = e && e.indexOf("category:") == 0 ? e.substring("category:".length) : null,
					i = translate("Item Search:") + " " + (r ? this.getNameForCategory(r) : e),
					s = this.showPopUp({
						title: i,
						hideclosebutton: !0,
						popupType: "itemsearchresult"
					});
				this.inventoryCategory = {
					category: "search",
					offset: t,
					fromhotkey: !1
				};
				var o = 24;
				t || (t = 0);
				var u = this,
					a = [];
				for (var f in this.inventoryitems) {
					var l = this.inventoryitems[f];
					if (l.hideininventory && (!n || !l.allowtrade)) continue;
					if (r) {
						if (this.getItemCategory(l) != r) continue
					} else if (l.name.toLowerCase().indexOf(e.toLowerCase()) < 0 && l.itemid.indexOf(e.toLowerCase()) < 0) continue;
					this.extendItemMenuItem(l, n), a.push(l)
				}
				var c = a.length;
				c > 0 ? (c > o && (a = a.slice(t, t + o)), this.addMenuItemsToDialog(s, a)) : s.innerHTML = '<div style="font-size:24px"><br><br><center>' + translate("No items with that name found.") + "<br><div>";
				if (c > o) {
					var h = this.game.app.config.enablenewgui;
					t > 0 && s.parentNode.appendChild(this.createButton("Prev", {
						x: h ? 540 : 508,
						y: h ? 7 : -8,
						w: 80,
						h: 40
					}, function(r) {
						u.showItemsBySearch(e, Math.max(0, t - o), n)
					})), c > t + o && s.parentNode.appendChild(this.createButton("Next", {
						x: h ? 625 : 588,
						y: h ? 7 : -8,
						w: 80,
						h: 40
					}, function(r) {
						u.showItemsBySearch(e, t + o, n)
					}))
				}
				this.addBackButton(s, "Go back to search", function(e) {
					u.closePopUpNow("searchitem"), u.showSearchItem(n)
				})
			},
			showAchievements: function(e) {
				e && (this.achievementype = null, this.game.client && this.game.client.sendGetAchievements());
				var t = this.showPopUp({
						title: "Achievements",
						hideclosebutton: !0,
						popupType: "achievements"
					}),
					n = 24;
				if (!this.achievements) t.innerHTML = "Loading...";
				else {
					var r = [];
					for (var i in this.achievements) {
						var s = this.achievements[i];
						s.achievementtype && r.indexOf(s.achievementtype) < 0 && r.push(s.achievementtype)
					}!this.achievementtype && r.length > 0 && (this.achievementtype = r[0]);
					var o = this,
						u = t;
					if (r.length > 0) {
						for (var i in r) t.appendChild(this.getAchievementTab(r[i], i));
						u = this.game.menu.createMenuContainer(t, {
							x: 0,
							y: 40,
							w: 640,
							h: 360
						}), gui.addClass(u, "scrollable")
					}
					var a = 10,
						f = "";
					for (var i in this.achievements) {
						var s = this.achievements[i];
						if (s.hideininventory || s["achievementtype"] != this.achievementtype) continue;
						var l = s.hasItem ? this.getImageForItem(s) : "../files/npcs/bbuilder_achievement_gray.png",
							c = this.getImageClipForItem(s);
						f += '<div style="position:absolute;left:0px;top:' + a + 'px;height:60px;right:0px;pointer-events:none;">' + '<img src="' + l + '" style="position:absolute;left:30px;top:0px;max-height:64px;clip:' + c + ';" />' + '<div style="position:absolute;height:30px;top:0px;left:90px;color:lime;"><b>' + s.name + "</b></div>" + '<div style="position:absolute;height:30px;top:30px;left:90px;right:0px;">' + s.description + "</div>" + '<div style="position:absolute;height:30px;top:30px;right:20px;width:100px;color:yellow;text-align:right;">+' + s.exp + '<span style="font-size:10px;vertical-align:middle;">Exp</span></div>' + "</div>", a += 60
					}
					var h = document.createElement("div");
					h.innerHTML = f, u.appendChild(h)
				}
				this.addMainBackButton(t)
			},
			getAchievementTab: function(e, t) {
				var n = e.substring(0, 1).toUpperCase() + e.substring(1),
					r = this;
				return this.createButton(n, {
					x: t * 100,
					y: 0,
					w: 100,
					h: 40
				}, function(t) {
					r.achievementtype = e, r.showAchievements(!1)
				})
			},
			addAchievements: function(e) {
				this.achievements = e;
				switch (this.getCurrentMenu()) {
					case "achievements":
						this.closePopUpNow("achievements"), this.showAchievements(!1)
				}
			},
			showMap: function(e) {
				e ? this.markerdata = e : (this.game.client && this.game.client.sendGetMapMarkers(this.game.mapmanager.getDefaultOutsideMap()), this.game.player && this.game.player.canSetAnimation() && this.game.player._stopAndAnimate("map_open"));
				var t = translate("Map");
				this.markerdata && this.markerdata.count && (t += ": " + this.game.getPlayerCountClock(this.markerdata.count, this.markerdata.hour));
				var n = this.showPopUp({
						title: t,
						popupType: "map",
						noborders: !0,
						overlap: !0
					}),
					r = document.createElement("div");
				r.className = "bigmapimage", n.appendChild(r), this.markerdata && this.markerdata.width && (this.addMapMarkers(r, this.markerdata), this.game.client && this.game.player && (this.game.player.isGameAdmin() || this.game.player.isEventAdmin()) && this.addMapWarp(r, this.markerdata))
			},
			addMapMarkers: function(e, t) {
				var n = this.game.animationmanager,
					r = this.game.app.config.enablenewgui,
					i = r ? 712 : 664,
					s = r ? 436 : 400,
					o = t.width,
					u = t.height,
					a = t.offsetx ? t.offsetx : 0,
					f = t.offsety ? t.offsety : 0,
					l = this.game.app.config.markerpos;
				for (var c in t.markers) {
					var h = t.markers[c],
						p = Math.floor((h.x - a) * i / o),
						d = Math.floor((h.y - f) * s / u),
						v = null;
					h.icon && (v = document.createElement("div"), v.style.backgroundImage = "url('" + n.getPathForDefault("ICON") + h.icon + "')", v.style.backgroundSize = "contain", v.style.backgroundRepeat = "no-repeat", v.style.position = "absolute", v.style.left = p - 16 + "px", v.style.top = d - 16 + "px", v.style.width = "32px", v.style.height = "32px", h.blink && (v.style.animation = "blink .75s steps(1) infinite"), e.appendChild(v));
					if (h.building && l && l[h.building]) {
						p = l[h.building].x, d = l[h.building].y;
						var m = document.createElement("div");
						m.style.backgroundImage = "url('../files/gui/bbuilder_mapownerback.png')", m.style.backgroundSize = "160px 72px", m.style.position = "absolute", m.style.left = p - 78 + "px", m.style.top = d - 48 + "px", m.style.width = "160px", m.style.height = "72px", e.appendChild(m), v && (v = v.cloneNode(!1), v.style.left = p - 28 + "px", v.style.top = d - 32 + "px", v.style.width = "48px", v.style.height = "48px", e.appendChild(v))
					}
					e.appendChild(this.getMapPin(p, d, h.text, "pin"))
				}
				for (var c in t.friends) {
					var g = t.friends[c];
					this.addMapPlayerIcon(e, t, g)
				}
				this.game.player && this.game.player.head && this.game.mapmanager.currentmap.mapname == t["map"] && this.addMapPlayerIcon(e, t, this.game.player)
			},
			addMapWarp: function(e, t) {
				var n = this.game.app.config.enablenewgui,
					r = n ? 712 : 664,
					i = n ? 436 : 400,
					s = t.width,
					o = t.height,
					u = t.offsetx ? t.offsetx : 0,
					a = t.offsety ? t.offsety : 0,
					f = this,
					l = function(e) {
						var t = Math.floor(u + s * (e.pageX - gui.getOffset(this).left) / r),
							n = Math.floor(a + o * (e.pageY - gui.getOffset(this).top) / i);
						return f.closePopUp(), f.game.client.sendMapMove("main", t, n), !1
					};
				e.oncontextmenu = l, e.appendChild(this.getMapPin(0, 395, "Right-Click to Warp (Admins only)", "menuitemtext"))
			},
			getMapPin: function(e, t, n, r) {
				var i = document.createElement("div");
				return i.className = r, i.style.left = e + "px", i.style.top = t + "px", i.style.zIndex = t, i.innerHTML = translate(n), i
			},
			addMapPlayerIcon: function(e, t, n) {
				var r = this.game.app.config.enablenewgui,
					i = r ? 712 : 664,
					s = r ? 436 : 400,
					o = t.offsetx ? t.offsetx : 0,
					u = t.offsety ? t.offsety : 0,
					a = Math.floor(((n.gridX ? n.gridX : n.x) - o) * i / t.width - 24),
					f = Math.floor(((n.gridY ? n.gridY : n.y) - u) * s / t.height - 24),
					l = {
						itemtype: "head",
						head: this.game.animationmanager.expandGameFilename("head", n.head)
					},
					c = document.createElement("img");
				c.style.clip = this.getImageClipForItem(l), c.style.position = "absolute", c.style.left = a + "px", c.style.top = f + "px", c.style.zIndex = f + 36, c.src = this.getImageForItem(l), e.appendChild(c);
				if (n.hat) {
					l = {
						itemtype: "hat",
						hat: this.game.animationmanager.expandGameFilename("hat", n.hat)
					};
					var h = document.createElement("img");
					h.style.clip = this.getImageClipForItem(l), h.style.position = "absolute", h.style.left = a + "px", h.style.top = f - 16 + "px", h.style.zIndex = f + 37, h.src = this.getImageForItem(l), e.appendChild(h)
				}
			},
			showHouseMenu: function(e) {
				e && this.game.client && this.game.client.sendGetMyHouses();
				var t = this.showPopUp({
						title: "Your House",
						hideclosebutton: !0,
						popupType: "housemenu"
					}),
					n = "";
				n += '<div style="font-size:24px">', e ? n += "<br><i>" + translate("Loading your house info...") + "</i>" : n += translate('Build a house, add furniture and decoration and invite your friends! You can go to your land, place houses of different colors and styles and decorate them. If you have a house then click on the "Visit"-button to jump there.'), n += "</div>";
				for (var r = 0; r < 3; r++) {
					var i = null;
					this.myhouseinfo && r < this.myhouseinfo.houses.length && (i = this.myhouseinfo.houses[r].housetype), n += this.getBuildInfoBlock(34 + 200 * r, 122, {
						itemid: i
					}, 1 + r, "buildblock" + (1 + r))
				}
				var s = this.myhouseinfo && this.myhouseinfo.houses.length > 0;
				s && (n += '<label style="position:absolute; bottom:57px;"><input type="checkbox" id="checkboxhouseopen" name="houseopen"' + (this.game.settings.houseopen ? " checked" : "") + ">" + translate("Open Houses to Visitors") + "</label>\n"), t.innerHTML = n;
				if (s) {
					var o = gui.getDom("checkboxhouseopen");
					o.onchange = function(e) {
						u.onSettingsChange(e.target)
					}
				}
				for (var r = 0; r < 3; r++) t.appendChild(this.getHouseMenuButton(r, "buildblock" + (1 + r)));
				var u = this;
				t.appendChild(this.createButton("Build or Visit House", {
					x: 384,
					bottom: 5,
					w: 280,
					h: 40
				}, function(e) {
					u.closePopUpNow(), u.showChooseHouseLand()
				})), s && t.appendChild(this.createButton("Kick Visitors", {
					x: 0,
					bottom: 5,
					w: 280,
					h: 40
				}, function(e) {
					u.kickVisitorsFromHouse()
				})), this.addMainBackButton(t)
			},
			getHouseMenuButton: function(e, t) {
				var n = this,
					r, i;
				if (this.myhouseinfo && e < this.myhouseinfo.houses.length) {
					var s = this.myhouseinfo.houses[e];
					s.canvisit ? (r = "Visit", i = function(t) {
						n.closePopUpNow(), n.goToHouse(1 + e)
					}) : (r = "Place", i = function(e) {
						n.closePopUpNow(), n.showChooseHouseLand()
					})
				} else r = "Build", i = function(e) {
					n.closePopUpNow(), n.showChooseHouseLand()
				};
				return gui.getDom(t).onclick = i, this.createButton(r, {
					x: 72 + e * 200,
					y: 265,
					w: 120,
					h: 40
				}, i)
			},
			getBuildInfoBlock: function(e, t, n, r, i) {
				var s = "<div";
				i && (s += ' id="' + i + '"'), s += ' style="position:absolute;left:' + e + "px;top:" + t + "px;width:192px;height:160px;", i && (s += "cursor:pointer;");
				var o = this.game.app.config.enablenewgui;
				if (o) s += 'background:#001020; border-radius:32px;">';
				else {
					var u = n && n.itemid && n.itemid.indexOf("ladder") >= 0 ? "bbuilder_castlebackground.png" : "bbuilder_housemenuland.png";
					s += "background:url(../files/gui/" + u + ');background-size:contain;">'
				}
				if (n) {
					var a = this.game.animationmanager;
					n.itemid && n.itemid.indexOf("house") == 0 ? (s += '<div style="position:relative;left:28px;top:27px;width:156px;height:125px;background:url(' + a.getPathForDefault("IMAGE") + 'bbuilder_defaulthouseshadow.png) no-repeat center;background-size:contain;"></div>', s += '<div style="position:absolute;left:14px;top:8px;width:160px;height:128px;background:url(' + a.getPathForDefault("HOUSE") + "bbuilder_new" + n.itemid + '.png) no-repeat center;background-size:contain;"></div>') : n.image && (s += '<div style="position:absolute;left:0px;top:22px;width:100%;height:128px;background:url(../files/npcs/' + n.image + ') no-repeat center;background-size:contain;"></div>')
				}
				return r && (s += '<div style="position:absolute;left:10px;top:10px;width:32px;height:32px;background-color:white;border-radius:16px;color:black;text-shadow:none;">', s += "<center>" + r + "</center>", s += "</div>"), s += "</div>", s
			},
			setMyHouses: function(e) {
				this.myhouseinfo = e, this.closePopUpNow(), this.showHouseMenu(!1)
			},
			goToHouse: function(e) {
				this.game.player && this.game.client && this.game.client.sendGoToHouse(this.game.player.id, e)
			},
			kickVisitorsFromHouse: function() {
				this.closePopUpNow(), this.game.client && this.game.client.sendKickVisitors()
			},
			showChooseHouseLand: function() {
				var e = this.showPopUp({
						title: "Choose Land",
						hideclosebutton: !0,
						popupType: "choosehouseland"
					}),
					t = "";
				t += '<div style="font-size:24px">' + translate("You can build houses either on your own land or on the land of your clan. Click on one of the buttons to jump to your land.") + "</div>", t += '<div id="chooseplayerland" style="position:absolute;left:54px;top:95px;width:256px;height:256px;cursor:pointer;"><img src="../files/gui/bbuilder_playerland1.png"></div>', this.game.player && this.game.player.clanname && (t += '<div id="chooseclanland" style="position:absolute;left:354px;top:95px;width:256px;height:256px;cursor:pointer;"><img src="../files/gui/bbuilder_clanland1.png"></div>'), e.innerHTML = t;
				var n = this,
					r = function(e) {
						n.closePopUp(), n.game.client.sendMapMove("playerland:self", 64, 64)
					};
				gui.getDom("chooseplayerland").onclick = r, e.appendChild(this.createButton("On Your Land", {
					x: 82,
					y: 300,
					w: 200,
					h: 40
				}, r)), this.game.player && this.game.player.clanname && (r = function(e) {
					n.closePopUp(), n.game.client.sendMapMove("clanland:self", 64, 64)
				}, gui.getDom("chooseclanland").onclick = r, e.appendChild(this.createButton("On Clan Land", {
					x: 382,
					y: 300,
					w: 200,
					h: 40
				}, r))), this.addBackButton(e, "Go back to the house menu", function(e) {
					n.closePopUpNow(), n.showHouseMenu(!1)
				})
			},
			showBuildInfo: function(e) {
				e && (this.buildinfo = e);
				if (!this.buildinfo) return;
				var t = this.buildinfo.buildtype,
					n = "Build " + t.charAt(0).toUpperCase() + t.substring(1),
					r = this.showPopUp({
						title: n,
						popupType: "buildinfo"
					}),
					i = "<div><center>" + translate("Choose a %s to build here!", [t]) + "</center></div>";
				for (var s in this.buildinfo.objects) {
					var o = this.buildinfo.objects[s],
						u = this.buildinfo.isfree ? 0 : o.price;
					i += '<a href="javascript:void(0)" class="gamelink" id="buildlink' + o.itemid + '">';
					var a = 34 + 200 * (s % 3),
						f = 45 + Math.floor(s / 3) * 180;
					i += this.getBuildInfoBlock(a, f, o), i += '<div style="position:absolute;left:' + a + "px;top:" + (f + 132) + 'px;width:192px;height:30px;"><center>', u <= 0 ? i += "<i>" + translate("Free") + "</i>" : i += '<img src="../files/gui/bbuilder_icon_coin.png"> ' + u, i += "</center></div>", i += "</a>"
				}
				r.innerHTML = i;
				for (var s in this.buildinfo.objects) {
					var o = this.buildinfo.objects[s],
						u = this.buildinfo.isfree ? 0 : o.price,
						l = gui.getDom("buildlink" + o.itemid);
					l.onclick = this.getBuildConfirmCallback(o.itemid, u)
				}
			},
			getBuildConfirmCallback: function(e, t) {
				var n = this;
				return function(r) {
					n.closePopUpNow(), n.showBuildInfoConfirm(e, t)
				}
			},
			showBuildInfoConfirm: function(e, t) {
				var n = this.buildinfo.buildtype,
					r;
				for (var i in this.buildinfo.objects)
					if (this.buildinfo.objects[i].itemid == e) {
						r = this.buildinfo.objects[i];
						break
					}
				if (!r) return;
				var s = this.showPopUp({
						title: "Confirm Build",
						hideclosebutton: !0,
						popupType: "confirmbuildinfo"
					}),
					o = '<div style="font-size:30px"><center>' + translate("Do you want to build this %s?", [n]) + (t > 0 ? "<br>" + translate("It costs %d coins.", [t]) : "") + "</center></div>";
				o += this.getBuildInfoBlock(232, 100, r), s.innerHTML = o;
				var u = this;
				s.appendChild(this.createButton("Build", {
					x: 232,
					y: 300,
					w: 200,
					h: 40
				}, function(t) {
					u.closePopUp(), u.game.client.sendBuildObject(e)
				})), this.addBackButton(s, "Go back to the build list", function(e) {
					u.closePopUpNow(), u.showBuildInfo()
				})
			},
			showClansMenu: function(e) {
				e && this.game.client && this.game.client.sendClanAction("getjoinedclans", {});
				var t = this.showPopUp({
						title: "Clans",
						hideclosebutton: !0,
						popupType: "clans"
					}),
					n = this,
					r = [{
						help: "Click to see a list of all clans you joined",
						image: "bbuilder_newbutton_joinedclans.png",
						text: "Joined Clans",
						callback: function(e) {
							n.closePopUpNow(), n.showJoinedClans()
						}
					}, {
						help: "See top stats and ranks of clans",
						image: "bbuilder_newbutton_scores.png",
						text: "Scores",
						callback: function(e) {
							n.closePopUpNow(), n.showClanScores(!0)
						}
					}, {
						help: "Search for a clan by name",
						image: "bbuilder_newbutton_search.png",
						text: "Search",
						callback: function(e) {
							n.closePopUpNow(), n.showSearchClans()
						}
					}, {
						help: "Click to see information and tips about clans",
						image: "bbuilder_newbutton_help.png",
						text: "Help",
						callback: function(e) {
							n.closePopUpNow(), n.showClansHelp()
						}
					}];
				this.managedclan ? r.unshift({
					help: "Manage your clan!",
					image: "bbuilder_newbutton_clans.png",
					text: "Manage Clan",
					callback: function(e) {
						n.closePopUpNow(), n.showManageClan()
					}
				}) : r.unshift({
					help: "Create a clan and rule the world!",
					image: "bbuilder_newbutton_clans.png",
					text: "Create Clan",
					callback: function(e) {
						n.closePopUpNow(), n.showCreateClan("")
					}
				}), this.addMenuButtons(r, "clans"), this.addMenuItemsToDialog(t, r), this.addMainBackButton(t)
			},
			showCreateClan: function(e) {
				var t = this.showPopUp({
						title: "Create Clan",
						hideclosebutton: !0,
						popupType: "createclan"
					}),
					n = this;
				t.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Create a clan! It costs %d coins to create a clan.", [this.game.app.config.clancreateprice]) + "</center><br><br>\n" + '<center><form id="createclanform" name="createclanform" style="width:100%;">\n' + translate("Clan Name:") + ' <input type="text" id="createclanname" name="createclanname" style="width:360px; height:32px;" value="' + (e ? e : "") + '">\n' + '<input type="submit" value="' + translate("Create") + '" class="inputbutton"></center>\n' + "</form><div>";
				var r = gui.getDom("createclanform");
				r.onsubmit = function(e) {
					return n.createClan(), !1
				}, this.addClansBackButton(t), gui.focus("createclanname")
			},
			createClan: function() {
				var e = document.createclanform.createclanname.value.trim();
				if (e.length <= 0) return;
				this.closePopUpNow(), this.showWaitingScreen("Create Clan", "Creating the clan..."), this.game.client && this.game.client.sendClanAction("createclan", {
					name: e
				})
			},
			showManageClan: function() {
				this.clanviewtype = "manageclan";
				var e = this.managedclan ? (this.game.player && this.game.player.isGameAdmin() ? this.managedclan.clanid + ": " : "") + this.managedclan.name : "Manage Clan",
					t = this.showPopUp({
						title: e,
						hideclosebutton: !0,
						popupType: "manageclan"
					}),
					n = "",
					r = 0;
				if (this.managedclan) {
					this.selectedclan = this.managedclan;
					var i = new Date(this.managedclan.created),
						s = 40,
						o = 0;
					n += '<div style="position:absolute; left:332px; top:' + o + 'px; width:300px;">' + "<b>" + translate("Founded:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + i.toLocaleDateString() + "</div>" + "</div>", o += s, n += '<div style="position:absolute; left:332px; top:' + o + 'px; width:300px;">' + "<b>" + translate("Castle:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + this.minutesToString(this.managedclan.castle) + "</div><br>" + "</div>", o += s, n += '<div style="position:absolute; left:332px; top:' + o + 'px; width:300px;">' + "<b>" + translate("Kills:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + (this.managedclan.kills | 0) + "</div>" + "</div>", o += s, r = o, n += '<div style="position:absolute; left:332px; top:' + o + 'px; width:190px;">' + "<b>" + translate("Members:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + (this.managedclan.membercount | 0) + "</div>" + "</div>", o += s, n += this.buildClanNewsBlock(this.managedclan.news, !0)
				} else n += '<div style="font-size:24px"><br><br><center>' + translate("You have not created a clan yet") + "<br>" + "<div>";
				t.innerHTML = n;
				if (this.managedclan) {
					var u = this;
					t.appendChild(this.createButton("Edit", {
						x: 230,
						y: 240,
						w: 80,
						h: 40
					}, function(e) {
						u.closePopUpNow(), u.showEditNews()
					}, !0));
					if (this.game.player) {
						var a = this.game.app.config.enablenewgui;
						this.game.player.name.indexOf("(" + this.selectedclan.name + ")") >= 0 ? t.parentNode.appendChild(this.createButton("Clear Tag", {
							x: a ? 560 : 526,
							y: a ? 7 : -8,
							w: 145,
							h: 40
						}, function(e) {
							u.closePopUpNow(), u.clearTag()
						})) : t.parentNode.appendChild(this.createButton("Set Tag", {
							x: a ? 560 : 526,
							y: a ? 7 : -8,
							w: 145,
							h: 40
						}, function(e) {
							u.closePopUpNow(), u.setTag()
						}))
					}
					t.appendChild(this.createButton("Show", {
						x: 542,
						y: r - 3,
						w: 105,
						h: 40
					}, function(e) {
						u.closePopUpNow(), u.showClanMembers(!0)
					}));
					var f = this.createMenuContainer(t, {
							x: 0,
							bottom: 0,
							w: 640,
							h: 120
						}),
						l = [{
							image: "bbuilder_newbutton_rename.png",
							text: "Rename",
							callback: function(e) {
								u.closePopUpNow(), u.showRenameClan("")
							}
						}];
					this.addMenuButtons(l, "manageclan"), this.addMenuItemsToDialog(f, l, {
						"float": "right"
					})
				}
				this.addClansBackButton(t)
			},
			setTag: function() {
				this.game.client && this.game.client.sendClanAction("settag", {
					clanid: this.selectedclan.clanid
				}), this.showClansMenu(!1)
			},
			clearTag: function() {
				this.game.client && this.game.client.sendClanAction("cleartag", {}), this.showClansMenu(!1)
			},
			showEditNews: function() {
				if (!this.selectedclan) return;
				var e = this.showPopUp({
						title: translate("Edit News of %s", [this.selectedclan.name]),
						hideclosebutton: !0,
						popupType: "editclannews"
					}),
					t = this;
				e.innerHTML = '<div style="font-size:24px"><br>' + translate("News:") + "<br>\n" + '<form id="editnewsform" action="" name="editnewsform" style="width:100%;">\n' + '<textarea type="text" id="editnewsnews" name="editnewsnews"' + ' style="position: absolute; top: 20px; left: 160px; width:432px; height:160px">' + this.selectedclan.news + "</textarea>\n" + '<br><input type="submit" value="' + translate("Update") + '"' + ' style="position: absolute; top: 200px; left: 270px; width: 200px; height: 40px;" class="inputbutton">\n' + "</form><div>";
				var n = gui.getDom("editnewsform");
				n.onsubmit = function(e) {
					return t.setNews(), !1
				}, this.addManageClansBackButton(e), gui.focus("editnewsnews")
			},
			setNews: function() {
				var e = document.editnewsform.editnewsnews.value.trim();
				this.closePopUpNow(), this.showWaitingScreen(translate("Edit News of %s", [this.selectedclan.name]), translate("Updating the news...")), this.game.client && this.game.client.sendClanAction("setnews", {
					clanid: this.selectedclan.clanid,
					news: e
				})
			},
			showClanMembers: function(e) {
				if (!this.selectedclan) return;
				e && this.game.client && this.game.client.sendClanAction("getclanmembers", {
					clanid: this.selectedclan.clanid
				});
				var t = this.showPopUp({
					title: translate("Members of %s", [this.selectedclan.name]),
					hideclosebutton: !0,
					popupType: "clanmembers"
				});
				if (this.clanmembers) {
					var n = [];
					for (var r in this.clanmembers) n.push(this.getClanMemberMenuItem(this.clanmembers[r]));
					this.addMenuItemsToDialog(t, n)
				}
				this.clanviewtype == "manageclan" ? this.addManageClansBackButton(t) : this.addClanInfoBackButton(t)
			},
			getClanMemberMenuItem: function(e) {
				var t = e.name.substring(0, 25),
					n = t.indexOf("(");
				n >= 0 && (t = t.substring(0, n).trim());
				var r = this;
				return {
					text: t,
					itemtype: "head",
					head: e.head,
					hat: e.hat,
					help: translate("View profile of %s!", [t]),
					callback: function(t) {
						r.getClanMemberInfo(e.userid)
					},
					badgeicon: e.isonline ? "../files/gui/bbuilder_onlineindicator.png" : null
				}
			},
			getClanMemberInfo: function(e) {
				this.game.client && this.game.client.sendClanAction("getmemberinfo", {
					clanid: this.selectedclan.clanid,
					userid: e
				})
			},
			showClanMemberInfo: function() {
				if (!this.clanmemberinfo) return;
				var e = this.clanmemberinfo.name,
					t = e.indexOf("(");
				t >= 0 && (e = e.substring(0, t).trim());
				var n = this.showPopUp({
						title: e,
						hideclosebutton: !0,
						popupType: "clanmemberinfo"
					}),
					r = [{
						x: 300,
						y: 10,
						itemtype: "head",
						head: this.game.animationmanager.expandGameFilename("head", this.clanmemberinfo.head)
					}];
				this.clanmemberinfo.hat && r.push({
					x: 300,
					y: -6,
					itemtype: "hat",
					hat: this.game.animationmanager.expandGameFilename("hat", this.clanmemberinfo.hat)
				});
				var i = this.getHTMLFromItemsWithOffset(r),
					s = this.clanmemberinfo.rights ? this.clanmemberinfo.rights : "",
					o = s.indexOf("l") >= 0;
				o && (i += '<div style="position:absolute; left:32px; top:65px;"><b>' + translate("Is the leader!") + "</b></div>");
				var u = this.clanmemberinfo.jointime ? new Date(this.clanmemberinfo.jointime) : null;
				i += '<div style="position:absolute; left:32px; top:105px;"><b>' + translate("Joined %s:", [this.clanmemberinfo.clanname]) + "</b> " + u.toLocaleDateString() + "</div>", i += '<div style="position:absolute; left:32px; top:145px; right:0px;">' + translate("Rank:") + " ", this.clanmemberinfo.caneditrank ? i += '<input type="text" name="clanrankfield" id="clanrankfield" style="position: absolute; width:480px; height:30px; right:32px;" value="' + this.clanmemberinfo.rank + '">' : i += this.clanmemberinfo.rank && this.clanmemberinfo.rank.length > 0 ? this.clanmemberinfo.rank : "-", i += "</div>", i += '<div style="position:absolute; left:32px; top:190px;">', i += "<b>" + translate("Rights:") + "</b> ", o ? i += translate("All (recruit members, kick members, edit news, ranks)") : (i += '<form name="rightsform" style="width:100%;">\n', i += '<label><input type="checkbox" id="checkboxrecruit" name="recruit"' + (s.indexOf("r") >= 0 ? " checked" : "") + (this.clanmemberinfo.caneditrights ? "" : ' disabled="disabled"') + ">" + translate("Recruit members") + "</label> ", i += '<label><input type="checkbox" id="checkboxkick" name="kick"' + (s.indexOf("k") >= 0 ? " checked" : "") + (this.clanmemberinfo.caneditrights ? "" : ' disabled="disabled"') + ">" + translate("Kick members") + "</label> ", i += '<label><input type="checkbox" id="checkboxnews" name="news"' + (s.indexOf("n") >= 0 ? " checked" : "") + (this.clanmemberinfo.caneditrights ? "" : ' disabled="disabled"') + ">" + translate("Edit news") + "</label>", i += '<label><input type="checkbox" id="checkboxranks" name="ranks"' + (s.indexOf("a") >= 0 ? " checked" : "") + (this.clanmemberinfo.caneditrights ? "" : ' disabled="disabled"') + ">" + translate("Edit ranks") + "</label>", i += "</form>"), i += "</div>", n.innerHTML = i;
				var a = this;
				if (this.clanmemberinfo.caneditrights) {
					var f = ["checkboxrecruit", "checkboxkick", "checkboxnews", "checkboxranks"];
					for (var t in f) {
						var l = gui.getDom(f[t]);
						l.onchange = function(e) {
							a.onMemberRightsChange(e.target)
						}
					}
				}
				this.clanmemberinfo.caneditrank && (gui.getDom("clanrankfield").onkeydown = function(e) {
					e.which == 13 && gui.blur("clanrankfield")
				}, gui.getDom("clanrankfield").onblur = function(e) {
					a.updateClanMemberRank()
				}), this.clanmemberinfo.cankick && n.appendChild(this.createButton("Kick Member", {
					x: 32,
					y: 300,
					w: 195,
					h: 40
				}, function(e) {
					a.closePopUpNow(), a.showKickClanMember()
				})), this.clanmemberinfo.cantransferleadership && n.appendChild(this.createButton("Make Leader", {
					x: 232,
					y: 300,
					w: 200,
					h: 40
				}, function(e) {
					a.closePopUpNow(), a.showTransferClanLeader()
				})), n.appendChild(this.createButton("View Profile", {
					x: 437,
					y: 300,
					w: 195,
					h: 40
				}, a.getClanMemberCallback(this.clanmemberinfo.userid, function(e) {
					a.closePopUpNow(), a.showClanMemberInfo()
				}))), this.addBackButton(n, "Go back to the member list", function(e) {
					a.closePopUpNow(), a.showClanMembers(!1)
				})
			},
			updateClanMemberRank: function() {
				var e = gui.getDom("clanrankfield").value.trim();
				e != this.clanmemberinfo.rank && (this.clanmemberinfo.rank = e, this.game.client && this.game.client.sendClanAction("setmemberrank", {
					clanid: this.clanmemberinfo.clanid,
					userid: this.clanmemberinfo.userid,
					rank: e
				}))
			},
			onMemberRightsChange: function(e) {
				var t = this.clanmemberinfo.rights ? this.clanmemberinfo.rights : "",
					n = e.name == "recruit" ? "r" : e.name == "kick" ? "k" : e.name == "ranks" ? "a" : "n",
					r = t.indexOf(n);
				e.checked ? r < 0 && (t += n) : r >= 0 && (t = t.substring(0, r) + t.substring(r + 1)), this.clanmemberinfo.rights = t, this.game.client && this.game.client.sendClanAction("setmemberrights", {
					userid: this.clanmemberinfo.userid,
					rights: t
				})
			},
			showKickClanMember: function() {
				var e = this.showPopUp({
					title: "Kick Clan Member",
					hideclosebutton: !0,
					popupType: "kickclanmember"
				});
				e.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Do you really want to kick this member from your clan?") + "</center><div>";
				var t = this;
				e.appendChild(this.createButton("Kick Member", {
					x: 232,
					y: 250,
					w: 200,
					h: 40
				}, function(e) {
					t.kickClanMember()
				})), this.addBackButton(e, "Go back to view the member info", function(e) {
					t.closePopUpNow(), t.showClanMemberInfo()
				})
			},
			kickClanMember: function() {
				this.closePopUpNow(), this.showWaitingScreen("Kick Member", "Kicking the member..."), this.game.client && this.game.client.sendClanAction("removemember", {
					clanid: this.selectedclan.clanid,
					userid: this.clanmemberinfo.userid
				})
			},
			showTransferClanLeader: function() {
				var e = this.showPopUp({
					title: "Make Clan Leader",
					hideclosebutton: !0,
					popupType: "transferclanleader"
				});
				e.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Do you really want to transfer the leadership of your clan to the member '%s'? This action cannot be undone.", [this.clanmemberinfo.name]) + "</center><div>";
				var t = this;
				e.appendChild(this.createButton("Make Leader", {
					x: 232,
					y: 250,
					w: 200,
					h: 40
				}, function(e) {
					t.transferClanLeadership()
				})), this.addBackButton(e, "Go back to view the member info", function(e) {
					t.closePopUpNow(), t.showClanMemberInfo()
				})
			},
			transferClanLeadership: function() {
				this.closePopUpNow(), this.showWaitingScreen("Make Clan Leader", "Transfering the clan leadership..."), this.game.client && this.game.client.sendClanAction("transferleadership", {
					userid: this.clanmemberinfo.userid
				})
			},
			showRenameClan: function(e) {
				var t = this.showPopUp({
						title: "Rename Clan",
						hideclosebutton: !0,
						popupType: "renameclan"
					}),
					n = this;
				t.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Rename your clan: it costs %d coins to rename your clan.", [this.game.app.config.clanrenameprice]) + "</center><br><br>\n" + '<center><form id="renameclanform" name="renameclanform" style="width:100%;">\n' + translate("New Name:") + ' <input type="text" name="clanname" style="width:360px; height:32px;" value="' + e + '">\n' + '<input type="submit" value="' + translate("Rename") + '" class="inputbutton"></center>\n' + "</form><div>";
				var r = gui.getDom("renameclanform");
				r.onsubmit = function(e) {
					return n.renameClan(), !1
				}, this.addManageClansBackButton(t)
			},
			renameClan: function() {
				var e = document.renameclanform.clanname.value.trim();
				if (e.length <= 0) return;
				this.closePopUpNow(), this.showWaitingScreen("Rename Clan", "Renaming the clan..."), this.game.client && this.game.client.sendClanAction("renameclan", {
					name: e
				})
			},
			showDisbandClan: function() {
				var e = this.showPopUp({
					title: "Disband Clan",
					hideclosebutton: !0,
					popupType: "disbandclan"
				});
				e.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Disbanding means that the clan, its allies and members are removed without a way to restore it. You can also rename it or transfer the leadership to someone else. When you disband your clan, you will receive %d coins back.", [this.game.app.config.clandisbandbonus]) + "</center><div>";
				var t = this;
				e.appendChild(this.createButton("Disband Clan", {
					x: 232,
					y: 280,
					w: 200,
					h: 40
				}, function(e) {
					t.disbandClan()
				})), this.addManageClansBackButton(e)
			},
			disbandClan: function() {
				this.closePopUpNow(), this.showWaitingScreen("Disbanding Clan", "Disbanding the clan..."), this.game.client && this.game.client.sendClanAction("disbandclan", {})
			},
			showJoinedClans: function() {
				this.clanlisttype = "joinedclans";
				var e = this.showPopUp({
					title: "Joined Clans",
					hideclosebutton: !0,
					popupType: "joinedclans"
				});
				if (this.joinedclans && this.joinedclans.length > 0) {
					var t = [];
					for (var n in this.joinedclans) t.push(this.getJoinedClanMenuItem(this.joinedclans[n].name, n));
					this.addMenuItemsToDialog(e, t)
				} else {
					var r = '<br><a href="javascript:void(0)" class="gamelink" id="createclanlink"><img src="../files/gui/bbuilder_newbutton_clans.png" width=64 height=64>',
						i = "</a>";
					e.innerHTML = '<div style="font-size:24px"><br><br><center>' + translate("You have not joined any clans yet<br>You can be recruited by other clan owners or%s Create a clan%s.", [r, i]) + "</center>" + "<div>";
					var s = this,
						o = gui.getDom("createclanlink");
					o.onclick = function(e) {
						s.closePopUp(), s.showCreateClan()
					}
				}
				this.addClansBackButton(e)
			},
			getJoinedClanMenuItem: function(e, t) {
				var n = this;
				return {
					text: e,
					image: "bbuilder_newbutton_clans.png",
					help: translate("View clan %s!", [e]),
					callback: function(e) {
						n.closePopUpNow(), n.selectJoinedClan(t)
					}
				}
			},
			selectJoinedClan: function(e) {
				this.selectedclan = this.joinedclans[e], this.showClanInfo()
			},
			showClanInfo: function() {
				if (!this.selectedclan) return;
				this.clanviewtype = "claninfo";
				var e = this.showPopUp({
						title: (this.game.player && this.game.player.isGameAdmin() ? this.selectedclan.clanid + ": " : "") + this.selectedclan.name,
						hideclosebutton: !0,
						popupType: "claninfo"
					}),
					t = "",
					n = new Date(this.selectedclan.created),
					r = this.selectedclan.jointime ? new Date(this.selectedclan.jointime) : null,
					i = 38,
					s = 0;
				if (this.selectedclan.leader && this.selectedclan.leadernick) {
					var o = this.selectedclan.leadernick,
						u = o.indexOf("(");
					u >= 0 && (o = o.substring(0, u).trim()), t += '<div style="position:absolute; left:332px; top:' + s + 'px; width:300px;">' + "<b>" + translate("Leader:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + '<a id="leadernicklink" href="javascript:void(0)" class="gamelink">' + o + "</a></div>" + "</div>", s += i
				}
				t += '<div style="position:absolute; left:332px; top:' + s + 'px; width:300px;">' + "<b>" + translate("Founded:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + n.toLocaleDateString() + "</div>" + "</div>", s += i, r && (t += '<div style="position:absolute; left:332px; top:' + s + 'px; width:300px;">' + "<b>" + translate("Joined:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + r.toLocaleDateString() + "</div>" + "</div>", s += i), t += '<div style="position:absolute; left:332px; top:' + s + 'px; width:300px;">' + "<b>" + translate("Castle:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + this.minutesToString(this.selectedclan.castle) + "</div><br>" + "</div>", s += i, t += '<div style="position:absolute; left:332px; top:' + s + 'px; width:300px;">' + "<b>" + translate("Kills:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + (this.selectedclan.kills | 0) + "</div>" + "</div>", s += i, this.selectedclan.sparwins && this.selectedclan.sparwins > 0 && (t += '<div style="position:absolute; left:332px; top:' + s + 'px; width:300px;">' + "<b>" + translate("Spars:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + (this.selectedclan.sparwins | 0) + "</div>" + "</div>", s += i);
				var a = s;
				t += '<div style="position:absolute; left:332px; top:' + s + "px; width:" + (this.selectedclan.membercount > 0 ? 180 : 300) + 'px;">' + "<b>" + translate("Members:") + '</b> <div style="position:absolute; top:0px; right:0px;">' + (this.selectedclan.membercount | 0) + "</div>" + "</div>", s += i, t += this.buildClanNewsBlock(this.selectedclan.news, !1), e.innerHTML = t;
				var f = this;
				try {
					if (this.selectedclan.leader && this.selectedclan.leadernick) {
						var l = gui.getDom("leadernicklink");
						gui.setClick(l, f.getClanMemberCallback(f.selectedclan.leader, function(e) {
							f.closePopUpNow(), f.showClanInfo()
						}))
					}
					if (this.game.player) {
						this.selectedclan.rights && (this.selectedclan.rights.indexOf("l") >= 0 || this.selectedclan.rights.indexOf("n") >= 0) && e.appendChild(this.createButton("Edit", {
							x: 230,
							y: 240,
							w: 80,
							h: 40
						}, function(e) {
							f.closePopUpNow(), f.showEditNews()
						}, !0));
						var c = this.game.app.config.enablenewgui;
						this.game.player.name.indexOf("(" + this.selectedclan.name + ")") >= 0 ? e.parentNode.appendChild(this.createButton("Clear Tag", {
							x: c ? 560 : 526,
							y: c ? 7 : -8,
							w: 145,
							h: 40
						}, function(e) {
							f.closePopUpNow(), f.clearTag()
						})) : this.selectedclan.ismember && e.parentNode.appendChild(this.createButton("Set Tag", {
							x: c ? 560 : 526,
							y: c ? 7 : -8,
							w: 145,
							h: 40
						}, function(e) {
							f.closePopUpNow(), f.setTag()
						}));
						var h = [];
						this.selectedclan.ismember && !(this.selectedclan.rights && this.selectedclan.rights.indexOf("l") >= 0) && h.push({
							image: "bbuilder_newbutton_leave.png",
							text: "Leave",
							callback: function(e) {
								f.closePopUpNow(), f.showConfirmLeaveClan()
							}
						}), this.addMenuButtons(h, "claninfo");
						if (h.length > 0) {
							var p = this.createMenuContainer(e, {
								x: 0,
								bottom: 0,
								w: 640,
								h: 120
							});
							this.addMenuItemsToDialog(p, h, {
								"float": "right"
							})
						}
					}
					this.selectedclan.membercount > 0 && e.appendChild(this.createButton("Show", {
						x: 542,
						y: a - 3,
						w: 105,
						h: i
					}, function(e) {
						f.closePopUpNow(), f.showClanMembers(!0)
					}))
				} catch (d) {}
				switch (this.clanlisttype) {
					case "searchedclans":
						this.addBackButton(e, "Go back to the search results", function(e) {
							f.closePopUpNow(), f.showSearchedClans()
						});
						break;
					case "clanscores":
						this.addBackButton(e, "Go back to the scores", function(e) {
							f.closePopUpNow(), f.showClanScores(!1)
						});
						break;
					case "playerprofile":
						this.addBackButton(e, "Go back to the player profile", function(e) {
							f.closePopUpNow(), f.showPlayerProfile()
						});
						break;
					default:
						this.addBackButton(e, "Go back to the clan list", function(e) {
							f.closePopUpNow(), f.showJoinedClans()
						})
				}
			},
			getClanMemberCallback: function(e, t) {
				var n = this;
				return function(r) {
					n.closePopUpNow(), n.showClanMemberProfile(e, t)
				}
			},
			showClanMemberProfile: function(e, t) {
				this.profilebackcallback = t, this.game.client && this.game.client.sendRequestDBPlayerProfile(e)
			},
			showConfirmLeaveClan: function() {
				var e = this.showPopUp({
					title: "Leave Clan",
					hideclosebutton: !0,
					popupType: "leaveclan"
				});
				e.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Do you really want to leave the clan?") + " (" + this.selectedclan.name + ")" + "</center><div>";
				var t = this;
				e.appendChild(this.createButton("Leave", {
					x: 232,
					y: 280,
					w: 200,
					h: 40
				}, function(e) {
					t.leaveClan()
				})), this.addClanInfoBackButton(e)
			},
			leaveClan: function() {
				this.closePopUpNow(), this.showWaitingScreen("Leaving Clan", "Leaving the clan..."), this.game.client && this.game.client.sendClanAction("leaveclan", {
					clanid: this.selectedclan.clanid
				})
			},
			buildClanNewsBlock: function(e, t) {
				return '<div style="position:absolute; left:0px; top:0px; width:300px; height:270px; overflow:hidden; border-style: solid; border-width: 2px; border-radius: 10px; padding: 5px 5px; ">' + (t ? "<i><center>" + translate("Clan News") + "</center></i>" : "") + "<br>" + e + "</div>"
			},
			showClanScores: function(e) {
				this.currentclanscoretype || (this.currentclanscoretype = "castle"), e && this.game.client && this.game.client.sendClanAction("getscores", {
					type: this.currentclanscoretype
				}), this.clanlisttype = "clanscores";
				var t = this.showPopUp({
						title: "Clan Scores",
						hideclosebutton: !0,
						popupType: "clanscores"
					}),
					n = '<div id="clanscorestext" class="scrollable" style="position:absolute;left:0px;top:50px;bottom:10px;right:0px;">';
				n += this.getScoreHTML(this.currentclanscoretype, this.clanscores), n += "</div>", t.innerHTML = n;
				if (this.clanscores && this.clanscores.length > 0)
					for (var r in this.clanscores) {
						var i = gui.getDom("playerscorelink" + r);
						i.onclick = this.getClanScoreLinkCallback(r)
					}
				var s = this;
				t.appendChild(this.createButton("Castles", {
					x: 125,
					y: 0,
					w: 140,
					h: 40
				}, function(e) {
					s.switchClanScoreType("castle")
				})), t.appendChild(this.createButton("Kills", {
					x: 265,
					y: 0,
					w: 140,
					h: 40
				}, function(e) {
					s.switchClanScoreType("kills")
				})), t.appendChild(this.createButton("Spar", {
					x: 405,
					y: 0,
					w: 140,
					h: 40
				}, function(e) {
					s.switchClanScoreType("spar")
				})), this.addClansBackButton(t)
			},
			getClanScoreLinkCallback: function(e) {
				var t = this;
				return function(n) {
					t.selectClanForScorePlace(e)
				}
			},
			minutesToString: function(e) {
				if (!e) return "-";
				var t = Math.floor(e / 60),
					n = "";
				return t > 0 && (n += t + "h", e -= t * 60), e > 0 && (n += (n.length > 0 ? " " : "") + e + "m"), n.length <= 0 && (n = "-"), n
			},
			switchClanScoreType: function(e) {
				if (this.currentclanscoretype == e) return;
				this.currentclanscoretype = e, this.closePopUpNow(), this.showClanScores(!0)
			},
			selectClanForScorePlace: function(e) {
				var t = this.clanscores[e].clanid;
				this.game.client && this.game.client.sendClanAction("getclaninfo", {
					clanid: t
				})
			},
			showPlayerScores: function(e) {
				this.currentplayerscoretype || (this.currentplayerscoretype = {
					type: "kills",
					days: 1
				}), e && this.game.client && this.game.client.sendGetScores(this.currentplayerscoretype.type, this.currentplayerscoretype.days);
				var t = this.showPopUp({
						title: "Player Scores",
						hideclosebutton: !0,
						popupType: "playerscores"
					}),
					n = '<div id="playerscorestext" class="scrollable" style="position:absolute;left:0px;top:50px;bottom:10px;right:0px;">';
				n += this.getScoreHTML(this.currentplayerscoretype.type, this.playerscores), n += "</div>", t.innerHTML = n;
				if (this.playerscores && this.playerscores.length > 0)
					for (var r in this.playerscores) {
						var i = gui.getDom("playerscorelink" + r);
						i.onclick = this.getPlayerScoreLinkCallback(r)
					}
				var s = this;
				t.appendChild(this.createButton("Kills", {
					x: 0,
					y: 0,
					w: 100,
					h: 40
				}, function(e) {
					s.switchPlayerScoreType("kills")
				})), t.appendChild(this.createButton("Mob-Kills", {
					x: 100,
					y: 0,
					w: 120,
					h: 40
				}, function(e) {
					s.switchPlayerScoreType("mobkills")
				})), t.appendChild(this.createButton("Spar", {
					x: 220,
					y: 0,
					w: 100,
					h: 40
				}, function(e) {
					s.switchPlayerScoreType("spar")
				})), t.appendChild(this.createButton("Today", {
					x: 360,
					y: 0,
					w: 75,
					h: 40
				}, function(e) {
					s.switchPlayerScoreDays(1)
				})), t.appendChild(this.createButton("Week", {
					x: 435,
					y: 0,
					w: 75,
					h: 40
				}, function(e) {
					s.switchPlayerScoreDays(7)
				})), t.appendChild(this.createButton("Month", {
					x: 510,
					y: 0,
					w: 75,
					h: 40
				}, function(e) {
					s.switchPlayerScoreDays(30)
				})), t.appendChild(this.createButton("Total", {
					x: 585,
					y: 0,
					w: 75,
					h: 40
				}, function(e) {
					s.switchPlayerScoreDays(1e6)
				})), this.addMainBackButton(t)
			},
			getScoreHTML: function(e, t) {
				var n = "";
				if (t && t.length > 0) {
					var r = e == "kills" ? translate("Kills") : e == "mobkills" ? translate("Mob-Kills") : e == "castle" ? translate("Castle Time") : translate("Spar");
					n += '<div style="position:absolute;text-align:center;left:232px;width:200px;top:-2px;height:30px;pointer-events:none;">' + r + "</div>", n += '<div style="height:160px;overflow:hidden;position:relative;pointer-events:none;">';
					for (var i = 0; i < 3 && i < t.length; i++) {
						var s = t[i],
							o = e == "castle" ? this.minutesToString(s.score) : s.score,
							u = i == 0 ? 250 : i == 1 ? 20 : 460,
							a = i == 0 ? 0 : 20;
						if (s.data && s.data.head) {
							var f = [{
								x: 20 + u / 2,
								y: a / 2 + 16,
								itemtype: "head",
								head: this.game.animationmanager.expandGameFilename("head", s.data.head)
							}];
							s.data.hat && f.push({
								x: 20 + u / 2,
								y: a / 2,
								itemtype: "hat",
								hat: this.game.animationmanager.expandGameFilename("hat", s.data.hat)
							}), n += '<div class="pixelimage" style="-ms-transform:scale(2); -webkit-transform:scale(2); transform:scale(2); position:absolute;">', n += this.getHTMLFromItemsWithOffset(f), n += "</div>"
						}
						n += '<div style="position:absolute;left:' + (u + 20) + "px;top:" + (a + 30) + 'px;font-size:44px;font-style:italic;"><b>' + (1 + i) + ".</b></div>", n += '<div style="position:absolute;left:' + (u + 120) + "px;top:" + (a + 86) + 'px;font-size:32px;">' + o + "</div>", n += '<a href="javascript:void(0)" class="gamelink" id="playerscorelink' + i + '"' + ' style="position:absolute;left:' + (u - 34) + "px;top:" + (a + 110) + 'px;width:240px;height:36px; text-align:center; overflow:hidden;pointer-events:auto;">' + s.name.substring(0, 25).trim() + "</a>"
					}
					n += "</div><hr>";
					for (var i = 3; i < t.length; i++) {
						var s = t[i],
							o = e == "castle" ? this.minutesToString(s.score) : s.score,
							f;
						s.data && s.data.head && (f = [{
							x: -4,
							y: -4,
							itemtype: "head",
							head: this.game.animationmanager.expandGameFilename("head", s.data.head)
						}], s.data.hat && f.push({
							x: -4,
							y: -20,
							itemtype: "hat",
							hat: this.game.animationmanager.expandGameFilename("hat", s.data.hat)
						})), n += '<div style="height:48px;pointer-events:none;"><div style="width:60px;float:left;margin-left:20px;text-align:center;font-size:36px;line-height:30px;"><b>' + (1 + (i | 0)) + ".</b></div> " + (f ? this.getHTMLFromItemsInFlow(f) : "") + '<a href="javascript:void(0)" class="gamelink" id="playerscorelink' + i + '" style="margin-left:46px;pointer-events:auto;">' + s.name.substring(0, 25).trim() + "</a>" + '<div style="width:' + (e == "castle" ? 180 : 140) + 'px;float:right;margin-right:50px;text-align:right;font-size:32px;">' + o + "</div> " + "</div>"
					}
				} else n += '<div style="font-size:24px">  <br><br><center>' + translate("There are no scores yet") + "<br>" + "</div>";
				return n
			},
			getPlayerScoreLinkCallback: function(e) {
				var t = this;
				return function(n) {
					t.selectPlayerForScorePlace(e)
				}
			},
			selectPlayerForScorePlace: function(e) {
				if (!this.game.client) return;
				var t = this;
				this.closePopUpNow(), this.profilebackcallback = function(e) {
					t.closePopUpNow(), t.showPlayerScores(!1)
				};
				var n = this.playerscores[e].userid;
				this.game.client.sendRequestDBPlayerProfile(n)
			},
			switchPlayerScoreType: function(e) {
				if (this.currentplayerscoretype.type == e) return;
				this.currentplayerscoretype.type = e, this.closePopUpNow(), this.showPlayerScores(!0)
			},
			switchPlayerScoreDays: function(e) {
				if (this.currentplayerscoretype.days == e) return;
				this.currentplayerscoretype.days = e, this.closePopUpNow(), this.showPlayerScores(!0)
			},
			setPlayerScores: function(e, t, n) {
				this.playerscores = n, this.getCurrentMenu() == "playerscores" && (this.closePopUpNow(), this.showPlayerScores(!1))
			},
			showSearchClans: function() {
				var e = this.showPopUp({
						title: "Search Clans",
						hideclosebutton: !0,
						popupType: "searchclans"
					}),
					t = this;
				e.innerHTML = '<div style="font-size:24px"><center><form id="searchclanform" name="searchclanform">\n' + translate("Clan Name:") + ' <input type="text" id="searchclanname" name="searchclanname" style="height: 32px;">\n' + '<input type="submit" value="' + translate("Search") + '" class="inputbutton"></center>\n' + "</form><div>";
				var n = gui.getDom("searchclanform");
				n.onsubmit = function(e) {
					return t.searchClan(), !1
				}, this.addClansBackButton(e), gui.focus("searchclanname")
			},
			searchClan: function() {
				var e = document.searchclanform.searchclanname.value.trim();
				if (e.length <= 0) return;
				this.closePopUpNow(), this.showWaitingScreen("Search Clan", "Searching for clans..."), this.game.client && this.game.client.sendClanAction("searchclan", {
					name: e
				})
			},
			showSearchedClans: function() {
				this.clanlisttype = "searchedclans";
				var e = this.showPopUp({
					title: "Search Result",
					hideclosebutton: !0,
					popupType: "searchedclans"
				});
				if (this.searchedclans && this.searchedclans.length > 0) {
					var t = [];
					for (var n in this.searchedclans) t.push(this.getSearchClanMenuItem(this.searchedclans[n].name, n));
					this.addMenuItemsToDialog(e, t)
				} else e.innerHTML = '<div style="font-size:24px"><br><br><center>' + translate("No clans with that name found!") + "<br>" + "<div>";
				var r = this;
				this.addBackButton(e, "Go back to the search screen", function(e) {
					r.closePopUpNow(), r.showSearchClans()
				})
			},
			getSearchClanMenuItem: function(e, t) {
				var n = this;
				return {
					text: e,
					image: "bbuilder_newbutton_clans.png",
					help: translate("View clan %s!", [e]),
					callback: function(e) {
						n.closePopUpNow(), n.selectSearchedClan(t)
					}
				}
			},
			selectSearchedClan: function(e) {
				var t = this.searchedclans[e].clanid;
				this.game.client && this.game.client.sendClanAction("getclaninfo", {
					clanid: t
				})
			},
			showClansHelp: function() {
				var e = this.showPopUp({
					title: "Clans Help",
					hideclosebutton: !0,
					popupType: "clanshelp"
				});
				e.innerHTML = '<div style="font-size:24px;">' + translate("Clans are groups of players who wear the same clan tag in their name and are protected against team kills:") + "<br><br>" + "&bull; " + translate("Creating a clan costs %d coins", [this.game.app.config.clancreateprice]) + "<br>" + "&bull; " + translate("A clan can have up to <b>%d</b> members", [this.game.app.config.clanmemberlimit]) + "<br>" + "&bull; " + translate("The clan leader can recruit new members") + "<br>" + "&bull; " + translate("You can identify members of a clan by seeing the clan tag at the end of the name like this: Willy (Hero Clan)") + "<br>" + "&bull; " + translate("Members of the same clan are protected against <b>swords</b> and <b>bombs</b> of team members") + "<br>" + "&bull; " + translate("Each clan has its own <b>clan island</b> where members can build houses") + "<br>" + "</div>", this.addClansBackButton(e)
			},
			handleClanAction: function(e, t) {
				switch (e) {
					case "joinedclans":
						this.setJoinedClans(t);
						break;
					case "searchclans":
						this.setSearchClans(t);
						break;
					case "scores":
						this.setClanScores(t);
						break;
					case "claninfo":
						this.setClanInfo(t);
						break;
					case "clanmembers":
						this.setClanMembers(t);
						break;
					case "memberinfo":
						this.setClanMemberInfo(t);
						break;
					case "createclanfailed":
					case "renameclanfailed":
					case "disbandclanfailed":
					case "setnewsfailed":
					case "leaveclanfailed":
					case "removememberfailed":
					case "transferleadershipfailed":
						this.game.showGeneralMessage(t.message);
						if (this.isShowingClansMenu()) {
							this.closePopUpNow();
							switch (e) {
								case "createclanfailed":
									this.showCreateClan(t.name);
									break;
								case "renameclanfailed":
									this.showRenameClan(t.name);
									break;
								case "disbandclanfailed":
									this.showDisbandClan();
									break;
								case "leaveclanfailed":
									this.showClanInfo();
									break;
								case "setnewsfailed":
									this.showManageClan();
									break;
								case "removememberfailed":
								case "transferleadershipfailed":
									this.showClanMemberInfo()
							}
						}
						break;
					case "createclansuccess":
					case "renameclansuccess":
					case "disbandclansuccess":
					case "leaveclansuccess":
					case "settagsuccess":
					case "settagfailed":
					case "cleartagsuccess":
					case "setnewssuccess":
					case "removemembersuccess":
					case "transferleadershipsuccess":
					case "setmemberranksuccess":
					case "setmemberrankfailed":
					case "setmemberrightssuccess":
					case "setmemberrightsfailed":
						this.game.showGeneralMessage(t.message)
				}
			},
			setJoinedClans: function(e) {
				this.joinedclans = e, this.checkHaveManagedClan(), this.isShowingClansMenu() && (this.closePopUpNow(), this.showClansMenu())
			},
			setSearchClans: function(e) {
				this.searchedclans = e, this.isShowingClansMenu() && (this.closePopUpNow(), this.showSearchedClans())
			},
			setClanScores: function(e) {
				this.clanscores = e, this.isShowingClansMenu() && (this.closePopUpNow(), this.showClanScores(!1))
			},
			setClanInfo: function(e) {
				this.selectedclan = e, this.closePopUpNow(), this.showClanInfo()
			},
			setClanMembers: function(e) {
				this.clanmembers = e, this.isShowingClansMenu() && (this.closePopUpNow(), this.showClanMembers(!1))
			},
			setClanMemberInfo: function(e) {
				this.clanmemberinfo = e, this.isShowingClansMenu() && (this.closePopUpNow(), this.showClanMemberInfo())
			},
			getCurrentMenu: function() {
				return gui.isVisible("newpopup") ? this.currentPopupType : null
			},
			isShowingClansMenu: function() {
				var e = this.getCurrentMenu();
				return e && (e == "waitingscreen" || e.indexOf("clan") >= 0)
			},
			checkHaveManagedClan: function() {
				this.managedclan = null;
				for (var e in this.joinedclans) {
					var t = this.joinedclans[e];
					if (t.rights.indexOf("l") >= 0) {
						this.managedclan = t;
						break
					}
				}
			},
			showPM: function(e, t) {
				this.closePopUpNow();
				if (e.type == "console") {
					!gui.isVisible("adminconsole") && this.game.client && (this.game.showConsole(), this.game.addConsoleText(e.message));
					return
				}
				this.displaypm = e;
				var n;
				switch (e.type) {
					case "invitation":
						e.data && (e.data.storyid || e.data.mapmarkers) ? n = e.message : n = "Invitation";
						break;
					case "clanmessage":
						n = e.senderlook.name;
						var r = n.indexOf("(");
						r >= 0 && (n = n.substring(0, r).trim()), n = translate("Clan Message by %s", [n]);
						break;
					default:
						n = e.senderlook.name
				}
				var i = this.game.app.config.enablenewgui,
					s = 400,
					o = 240,
					u, a = !1;
				e.data && e.data.storyid ? (u = "story", o = 440 + (i ? 10 : 0)) : e.data && e.data.mapmarkers && (u = "map", s = 600, o = 400, a = !0);
				var f;
				if (e.senderid) {
					var l = this;
					f = function(n) {
						l.closePopUpNow(), l.showClanMemberProfile(e.senderid, function(e) {
							l.closePopUpNow(), l.showPM(l.displaypm, t)
						})
					}
				}
				var c = this.showPopUp({
					title: n,
					titleCallback: f,
					closeCallback: t,
					width: s,
					height: o,
					popupType: "pm",
					showbadge: i && e.senderlook.isadmin,
					noborders: a
				});
				switch (u) {
					case "story":
						this.game.client && this.game.client.sendStoryAction("get", {
							id: e.data.storyid,
							target: "pm"
						}), c.innerHTML = this.game.storymanager.getStoryHTML("pmstorycanvas", 20, i ? 10 : 0);
						break;
					case "map":
						c.innerHTML = '<div id="pmmapimage" class="bigmapimage"></div>', e.data.mapmarkers.width && this.addMapMarkers(gui.getDom("pmmapimage"), e.data.mapmarkers);
						break;
					default:
						c.innerHTML = '<div style="font-size:24px;"><br><div id="pmcontent" class="scrollable" style="position:absolute; left:0;top:0;right:0;bottom:64px;padding: 12px 0px;"><div class="pmcontenttext" style="pointer-events:none;' + (e.type == "invitation" ? "text-align:center;" : "") + '">' + e.message + "</div>" + '<div class="pmtranslate">' + translate("Translate") + "</div>" + "</div></div>"
				}
				e.senderlook.head && this.addWindowIcon(c, e.senderlook);
				var i = this.game.app.config.enablenewgui,
					h = 140,
					p = 40,
					d = (s + 64) / 2,
					v = i ? 12 : 22,
					l = this;
				if (e.type == "invitation") c.appendChild(this.createButton("Yes", {
					x: d - h - 5,
					bottom: v,
					w: h,
					h: p
				}, function(t) {
					l.closePopUp(), l.game.acceptInvitation(e, !0)
				})), c.appendChild(this.createButton("No", {
					x: d + 5,
					bottom: v,
					w: h,
					h: p
				}, function(t) {
					l.closePopUp(), l.game.acceptInvitation(e, !1)
				}));
				else {
					var m = e.senderid > 0 || e.data && e.data.replyid;
					m && c.appendChild(this.createButton("Reply", {
						x: d - h - 5,
						bottom: v,
						w: h,
						h: p
					}, function(t) {
						l.writePMAsReply(e)
					}, !0));
					if (t) c.appendChild(this.createButton("Close", {
						x: m ? d + 5 : d - h / 2,
						bottom: v,
						w: h,
						h: p
					}, function(e) {
						l.closePopUpNow(), t()
					}, !0));
					else {
						var g = this.game.pms && this.game.pms.length > 0;
						c.appendChild(this.createButton(g ? "Next" : "Close", {
							x: m ? d + 5 : d - h / 2,
							bottom: v,
							w: h,
							h: p
						}, function(e) {
							l.closePM()
						}, !0))
					}
				}
				e && e.id != 0 && e.senderid && this.game.client && this.game.client.sendPMAction("getusermessages", {
					userid: e.senderid
				}), gui.setChildClick(c, ".pmtranslate", function(e) {
					l.translatePM(e)
				})
			},
			translatePM: function(e) {
				if (!e || !e.target || !e.target.parentNode) return;
				var t = e.target.parentNode.querySelector(".pmcontenttext");
				if (!t) return;
				gui.removeClass(e.target, "pmtranslate"), gui.addClass(e.target, "pmtranslated"), this.translateWithGoogle(e.target, t.textContent)
			},
			translateWithGoogle: function(e, t) {
				gui.setHTML(e, '<img src="../files/gui/bbuilder_spinner_translate.gif">');
				var n = window.navigator ? window.navigator.language || window.navigator.userLanguage : null;
				n ? n = n.split("-")[0] : n = "en";
				var r = "https://translate.googleapis.com/translate_a/single?client=gtx&ie=UTF-8&oe=UTF-8&sl=auto&tl=" + n + "&dt=t&q=" + encodeURI(t);
				gui.ajax(r, !0, function(t) {
					var n = "";
					for (var r = 0; r < t[0].length; r++) n += t[0][r][0];
					n.length > 0 ? gui.setHTML(e, n) : gui.setHTML(e, "<i>translation failed</i>"), e.style.pointerEvents = "none"
				})
			},
			setUserPMs: function(e, t) {
				if (this.getCurrentMenu() == "pm" && this.displaypm && this.displaypm.senderid == e) {
					var n = "";
					for (var r in t) {
						var i = t[r];
						n.length > 0 && (n += "<hr>");
						if (r > 0 || i.time >= 3600 || i.me) {
							var s = i.me ? translate("You") : this.displaypm.senderlook ? this.displaypm.senderlook.name : translate("Other"),
								o = s.indexOf("(");
							o >= 0 && (s = s.substring(0, o).trim()), n += translate("%s (%s ago):", [s, i.timestr]) + "<br>"
						}
						n += '<div><div class="pmcontenttext" style="pointer-events:none;">' + i.text + "</div>" + '<div class="pmtranslate">' + translate("Translate") + "</div></div>"
					}
					gui.setChildHTML("newpopup", "#pmcontent", n);
					var u = this;
					gui.setChildClick("newpopup", ".pmtranslate", function(e) {
						u.translatePM(e)
					})
				}
			},
			closePM: function(e) {
				this.closePopUpNow();
				var t = this.game.pms && this.game.pms.length > 0;
				t && this.game.showNextPM()
			},
			writePMAsReply: function(e) {
				e && this.writePM(e.senderid, e.senderlook.name + (e.senderlook.isonline ? "" : " (offline)"), e.data && e.data.replyid ? e.data.replyid : null)
			},
			writePM: function(e, t, n) {
				if (this.game.shop.hasExternInterfaceVersion(1.1) && Config_Extern["platform"] == "iphone") {
					this.game.shop.sendOpenTextField("pm:" + e, "", "");
					return
				}
				this.closePopUpNow();
				var r = this.showPopUp({
					title: "Write Message",
					width: 400,
					height: 240,
					popupType: "writepm"
				});
				r.innerHTML = '<div style="font-size:24px;">' + translate("To %s:", [t]) + '<form name="writepmform" style="width:100%;">\n' + '<textarea type="text" id="writepmmessage" name="writepmmessage" style="width:432px;height:160px;" class="scrollable"></textarea>\n' + "</form></div>";
				var i = this;
				r.appendChild(this.createButton("Send", {
					x: 87,
					y: 208,
					w: 140,
					h: 40
				}, function(t) {
					i.sendPM(e, n)
				})), r.appendChild(this.createButton("Cancel", {
					x: 237,
					y: 208,
					w: 140,
					h: 40
				}, function(e) {
					i.closePopUp()
				})), gui.focus("writepmmessage")
			},
			sendPM: function(e, t) {
				if (!document.writepmform) return;
				var n = document.writepmform.writepmmessage;
				if (!n || !n.value) return;
				var r = n.value.trim();
				if (r.length <= 0) return;
				r.length > 1024 && (r = r.substring(0, 1024)), this.closePopUp(), this.game.client && this.game.client.sendPMAction("sendpm", {
					userid: e,
					message: r,
					replyid: t
				})
			},
			writeClanMessage: function() {
				if (this.game.shop.hasExternInterfaceVersion(1.1) && Config_Extern["platform"] == "iphone") {
					this.game.shop.sendOpenTextField("clanmessage", "", ""), gui.blur("clanchatbutton");
					return
				}
				this.closePopUpNow();
				var e = this.showPopUp({
					title: "Write Clan Message",
					width: 400,
					height: 240,
					popupType: "writeclanmessage"
				});
				e.innerHTML = '<div style="font-size:24px;">' + translate("To your clan %s:", [this.game.player ? " " + this.game.player.clanname : ""]) + '<form name="writeclanmessageform" style="width:100%;">\n' + '<textarea type="text" id="writeclanmessage" name="writeclanmessage" style="width:432px;height:160px;"></textarea>\n' + "</form></div>";
				var t = this;
				e.appendChild(this.createButton("Send", {
					x: 87,
					y: 208,
					w: 140,
					h: 40
				}, function(e) {
					t.sendClanMessage()
				})), e.appendChild(this.createButton("Cancel", {
					x: 237,
					y: 208,
					w: 140,
					h: 40
				}, function(e) {
					t.closePopUp()
				})), gui.focus("writeclanmessage")
			},
			sendClanMessage: function() {
				var e = document.writeclanmessageform.writeclanmessage.value.trim();
				if (e.length <= 0) return;
				this.closePopUp(), this.game.client && this.game.client.sendPMAction("sendclanmessage", {
					message: e
				})
			},
			showMessageList: function(e, t, n) {
				var r = 24;
				e ? this.messagelist = e : (!this.messagelist || t) && this.game.client && this.game.client.sendPMAction("listmessages", {}), this.messagelistOffset = n;
				var i;
				if (this.messagelist && this.messagelist.length > r) {
					var s = 1 + Math.floor(n / r);
					i = translate("Messages") + ": " + translate("Page %s", [s])
				} else i = "Messages";
				var o = this.showPopUp({
					title: i,
					hideclosebutton: !0,
					popupType: "messagelist"
				});
				if (this.messagelist && this.messagelist.length > 0) {
					var u = [];
					for (var a = n; a < n + r && a < this.messagelist.length; a++) u.push(this.getPMMenuItem(this.messagelist[a]));
					this.addMenuItemsToDialog(o, u)
				} else this.messagelist && n == 0 && (o.innerHTML = '<div style="font-size:24px"><br><br><center>' + translate("There are no messages. Tap on players and click on PM to message them!") + "<br><div>");
				var f = this;
				this.messagelist && this.messagelist.length > r && (n > 0 && o.parentNode.appendChild(this.createButton("Prev", this.getPrevButtonPosition(), function(e) {
					f.showMessageList(null, !1, n - r)
				})), this.messagelist && this.messagelist.length > n + r && o.parentNode.appendChild(this.createButton("Next", this.getNextButtonPosition(), function(e) {
					f.showMessageList(null, !1, n + r)
				}))), this.addMainBackButton(o)
			},
			getPMMenuItem: function(e) {
				var t = e.senderlook.name.substring(0, 25),
					n = t.indexOf("(");
				n >= 0 && (t = t.substring(0, n).trim());
				var r = this;
				return {
					text: t,
					itemtype: "head",
					head: this.game.animationmanager.expandGameFilename("head", e.senderlook.head),
					hat: this.game.animationmanager.expandGameFilename("hat", e.senderlook.hat),
					cssclass: "menuitemsmall",
					help: translate("View Messages of %s!", [t]),
					callback: function(t) {
						r.removeFromPMButton(e), r.showPM(e, function() {
							r.closePopUpNow(), r.showMessageList(null, !1, r.messagelistOffset)
						})
					},
					badgeicon: e.isread ? null : "../files/gui/bbuilder_newindicator.png"
				}
			},
			removeFromPMButton: function(e) {
				if (!this.game.pms) return;
				var t = this.game.pms.length;
				for (var n = this.game.pms.length - 1; n >= 0; n--) {
					var r = this.game.pms[n];
					console.log("compare pms: ", e, r), r.type == e.type && r.senderid == e.senderid && r.id == e.id && this.game.pms.splice(n, 1)
				}
				var i = this.game.pms.length;
				i <= 0 ? gui.fadeOut("pmbutton") : i != t && gui.setChildHTML("pmbutton", "div.pmbadge", i)
			},
			showHomeMenu: function() {
				var e = this.showPopUp({
						title: translate("Go Back Home"),
						width: 400,
						height: 240,
						popupType: "homemenu"
					}),
					t = translate("If you are lost somewhere or just want to go back to the start, then click on this button!") + "<br><br>";
				if (this.game.mapmanager.currentmap) {
					var n, r = this.game.mapmanager.currentmap.templatename;
					r.indexOf("playerland") == 0 ? n = "on your house land" : r.indexOf("clanland") == 0 ? n = "on your clan land" : r == "main" || r == "newmap" ? n = "on the main land" : r.indexOf("inside") == 0 && (n = "in a house"), n && (t += translate("You are currently %s.", [translate(n)]) + "<br>")
				}
				t += "<i>" + translate("You can also type <b>/unstick</b>") + "</i>", e.innerHTML = t;
				var i = this;
				e.appendChild(this.createButton("Go Back", {
					x: 142,
					y: 200,
					w: 180,
					h: 40
				}, function(e) {
					i.closePopUp(), i.game.client.sendMapMove("unstick", 0, 0)
				}))
			},
			showEditFurniture: function(e) {
				this.editfurniture = e, this.editnpcfields = this.editfurniture ? this.editfurniture.editfields : null;
				var t = "canscript" in this.editfurniture && this.editfurniture.canscript,
					n = this.showPopUp({
						title: t ? "Edit Script NPC" : "Edit Furniture",
						popupType: "editfurniture"
					}),
					r = this;
				if (t) this.editnpcfields || (this.editnpcfields = [{
					label: "Image:",
					name: "image"
				}, {
					label: "Name:",
					name: "name"
				}, {
					label: "Chat:",
					name: "chat"
				}, {
					label: "Story:",
					name: "storyid"
				}]), this.addEditNPCAttributes(n, "<center>Edit or Delete the Script NPC!</center>\n", 60), this.editfurniture.clientscripting ? (n.appendChild(this.createButton("Delete", {
					x: 0,
					y: 340,
					w: 195,
					h: 40
				}, function(e) {
					r.deleteFurniture()
				})), n.appendChild(this.createButton("Edit Script", {
					x: 200,
					y: 340,
					w: 195,
					h: 40
				}, function(e) {
					r.editNPCScript(!1)
				})), n.appendChild(this.createButton("Client Script", {
					x: 400,
					y: 340,
					w: 195,
					h: 40
				}, function(e) {
					r.editNPCScript(!0)
				}))) : (n.appendChild(this.createButton("Delete", {
					x: 62,
					y: 340,
					w: 240,
					h: 40
				}, function(e) {
					r.deleteFurniture()
				})), n.appendChild(this.createButton("Edit Script", {
					x: 362,
					y: 340,
					w: 240,
					h: 40
				}, function(e) {
					r.editNPCScript(!1)
				})));
				else {
					var i = translate('You can put the furniture back into your inventory by clicking on the "Put Back In Inventory" button.<br><br>To place it somewhere else, open your inventory menu (or press Q on PC), select the furniture folder, and click on the furniture object.');
					if (!this.editnpcfields) {
						this.editnpcfields = [];
						var s = [{
							label: "Lock statue (keep current look)",
							name: "statuelocked",
							checkbox: !0
						}, {
							label: "Name:",
							name: "name"
						}, {
							label: "URL:",
							name: "displayurl"
						}, {
							label: "Player-ID:",
							name: "portalid"
						}, {
							label: "Story-ID:",
							name: "storyid"
						}];
						for (var o in s) {
							var u = s[o];
							u.name in this.editfurniture && this.editnpcfields.push(u)
						}
					}
					this.addEditNPCAttributes(n, i, 260);
					var a = "addsidekick" in this.editfurniture;
					n.appendChild(this.createButton("Put Back In Inventory", {
						x: a ? 87 : 212,
						y: 195,
						w: 240,
						h: 40
					}, function(e) {
						r.deleteFurniture()
					})), a && n.appendChild(this.createButton("Let the pet follow you", {
						x: 337,
						y: 195,
						w: 240,
						h: 40
					}, function(e) {
						r.addSidekick()
					}))
				}
			},
			deleteFurniture: function() {
				this.closePopUp(), this.game.client && this.game.client.sendNPCTrigger(this.editfurniture.id, "delete", {})
			},
			addEditNPCAttributes: function(e, t, n) {
				if (!this.editnpcfields || this.editnpcfields.length <= 0) {
					e.innerHTML = t;
					return
				}
				var t = t + '<div style="position:absolute;top:' + n + 'px;">' + '<form id="editnpcform" name="editnpcform" style="width:100%;">\n',
					r = 0;
				for (var i in this.editnpcfields) {
					var s = this.editnpcfields[i];
					t += '<label style="position:absolute;top:' + r + "px;width:" + (s.checkbox ? 660 : 150) + 'px;">', s.checkbox ? t += '<input type="checkbox" name="editnpc' + s.name + '"' + (this.editfurniture && this.editfurniture[s.name] ? " checked" : "") + ">" + translate(s.label) : t += translate(s.label) + '<input type="text" name="editnpc' + s.name + '"' + ' style="position:absolute;left:150px;width:480px;height:32px;" value="' + (this.editfurniture && this.editfurniture[s.name] ? this.editfurniture[s.name] : "") + '">', t += "</label>\n", r += 40
				}
				t += '<br><input type="submit" value="' + translate("Update") + '"' + ' style="position: absolute; top: ' + (r + 20) + 'px; left: 280px; width: 200px; height: 40px;" class="inputbutton">\n' + "</form><div>", e.innerHTML = t;
				var o = this,
					u = gui.getDom("editnpcform");
				u.onsubmit = function(e) {
					return o.updateNPCAttributes(), !1
				}
			},
			updateNPCAttributes: function() {
				var e = {};
				for (var t in this.editnpcfields) {
					var n = this.editnpcfields[t],
						r = document.editnpcform["editnpc" + n.name];
					r && (this.editfurniture[n.name] = e[n.name] = n.checkbox ? r.checked : r.value.trim())
				}
				this.closePopUp(), this.game.client && this.game.client.sendNPCTrigger(this.editfurniture.id, "setoptions", e)
			},
			addSidekick: function() {
				this.closePopUp(), this.game.client && this.game.client.sendNPCTrigger(this.editfurniture.id, "addsidekick", {})
			},
			editNPCScript: function(e) {
				this.closePopUpNow();
				var t = this.showResizableWindow({
					title: e ? "Edit NPC Client-Script" : "Edit NPC Script"
				});
				this.useaceeditor = !0, this.nextscriptid = this.nextscriptid ? this.nextscriptid + 1 : 1;
				var n = this.editfurniture.id,
					r = this.nextscriptid,
					i = this.editfurniture[e ? "clientscript" : "script"];
				this.scripteditors || (this.scripteditors = {}), t.innerHTML = '<form name="npcscriptform" style="width:100%;height:100%;">\n' + (this.useaceeditor ? '<div contenteditable    id="npcscriptfield' + r + '" name="npcscriptfield' + r + '" style="width:100%;height:100%;text-shadow:none;"></div>' : '<textarea type="text" id="npcscriptfield' + r + '" name="npcscriptfield' + r + '" style="width:100%;height:100%;font-size:17px;" class="scrollable">' + (i ? i : "") + "</textarea>\n") + "</form></div>";
				var s = this,
					o = this.createButton("Update", {
						w: 140,
						h: 26
					}, function(t) {
						s.saveNPCScript(n, r, e)
					});
				o.style.bottom = "-33px", o.style.right = "24px", t.appendChild(o), o = this.createButton("Docs", {
					w: 140,
					h: 26
				}, function(e) {
					s.game.shop.showURL(s.game.app.config.docsurl, "inside")
				}), o.style.bottom = "-33px", o.style.right = "178px", t.appendChild(o), this.useaceeditor && this.loadScriptEditorLib(r, e), t.parentNode.onmouseup = function(e) {
					s.scripteditors[r] && s.scripteditors[r].resize()
				}
			},
			showResizableWindow: function(e) {
				e = e || {};
				var t = translate(e.title) || "",
					n = e.width || 600,
					r = e.height || 400,
					i = gui.getDom("gamecontainer"),
					s = document.createElement("div");
				s.id = "resizablewindow", s.className = "resizablewindow", i.appendChild(s);
				var o = document.createElement("div");
				o.className = "resizablewindowtitle", o.onmousedown = function(e) {
					DragSystem.startMoving(this.parentElement, e)
				}, o.setAttribute("title", t), s.appendChild(o);
				if (!e.hideclosebutton) {
					var u = document.createElement("div");
					u.className = "resizablewindowclose", gui.setClick(u, function(e) {
						gui.remove(s)
					}), s.appendChild(u)
				}
				var a = document.createElement("div");
				return a.className = "resizablewindowcontent", s.appendChild(a), a
			},
			saveNPCScript: function(e, t, n) {
				var r;
				this.useaceeditor ? r = this.scripteditors[t].getValue() : r = document.npcscriptform["npcscriptfield" + t].value.trim();
				if (this.game.client) {
					var i = {};
					i[n ? "clientscript" : "script"] = r, this.game.client.sendNPCTrigger(e, "setoptions", i)
				}
			},
			loadScriptEditorLib: function(e, t) {
				if (window.ace) {
					this.onLoadedScriptEditor(e, t);
					return
				}
				var n = document.createElement("script"),
					r = this;
				n.onload = function() {
					r.onLoadedScriptEditor(e, t)
				}, n.src = "ace.js", document.head.appendChild(n)
			},
			onLoadedScriptEditor: function(e, t) {
				window.ace.require("ace/ext/language_tools");
				var n = window.ace.edit("npcscriptfield" + e);
				n.getSession().setTabSize(4), n.setFontSize(16), n.setOptions({
					enableBasicAutocompletion: !0,
					enableSnippets: !1,
					enableLiveAutocompletion: !1
				});
				var r = this.editfurniture[t ? "clientscript" : "script"];
				n.setValue(r ? r : ""), n.clearSelection(), n.getSession().setMode("ace/mode/javascript"), n.focus(), this.scripteditors[e] = n
			},
			showEditHouse: function(e) {
				this.edithouse = e;
				var t = this.showPopUp({
						title: "Edit House",
						popupType: "edithouse"
					}),
					n = this,
					r = translate('You can remove the house from your land by clicking on the "Remove from Land" button.<br><br>This is not destroying the house however, you can place it anytime at other places on your land and it will keep all of its furniture.'),
					i = 340;
				"name" in this.edithouse && (r += '<div style="position:absolute;top:' + i + 'px;">', r += '<form id="houseoptions" name="houseoptions" style="width:100%;">\n', r += translate("Name:") + ' <input type="text" name="name" style="width:400px; height:32px;" value="' + this.edithouse.name + '">\n' + '<input type="submit" value="' + translate("Update") + '" class="inputbutton"></center>\n', r += "</form></div>", i += 40), t.innerHTML = r;
				if ("name" in this.edithouse) {
					var s = gui.getDom("houseoptions");
					s.onsubmit = function(e) {
						return n.updateHouseName(), !1
					}
				}
				t.appendChild(this.createButton("Remove from Land", {
					x: 212,
					y: 220,
					w: 240,
					h: 40
				}, function(e) {
					n.removeHouseFromLand()
				}))
			},
			updateHouseName: function() {
				var e = document.houseoptions.name.value.trim();
				this.edithouse.name = e, this.closePopUp(), this.game.client && this.game.client.sendNPCTrigger(this.edithouse.id, "setoptions", {
					name: e
				})
			},
			removeHouseFromLand: function() {
				this.closePopUp(), this.game.client && this.game.client.sendNPCTrigger(this.edithouse.id, "delete", {})
			},
			showEventInfo: function(e) {
				this.eventinfo = e;
				var t = this.showPopUp({
						title: "Edit Event",
						popupType: "editevent"
					}),
					n = "<center>";
				e.canevent ? (n += '<label style="cursor:pointer;"><input type="checkbox" id="checkboxeventactive" name="eventactive" ' + (e.active ? "checked" : "") + ">Activate PK Event</label>", e.active && (n += "<hr>", n += '<h1 style="text-transform: uppercase;">' + this.game.mapmanager.currentmap.mapname + "</h1><br>", n += '<label style="cursor:pointer;"><input type="checkbox" id="checkboxignoretags" name="ignoretags" ' + (e.ignoretags ? "checked" : "") + ">Ignore clan tags</label><br>", n += '<label style="cursor:pointer;"><input type="checkbox" id="checkboxwarpdead" name="warpdead" ' + (e.warpdead ? "checked" : "") + ">Warp out when killed</label><br>")) : (e.ismainmap && (n += "This is the main map, spar events cannot be hold on this map yet.<br>"), e.zonename && (n += "This is battle zone / base " + e.zonename + ".<br>")), n += "</center>", t.innerHTML = n;
				if (e.canevent) {
					var r = this,
						i = gui.getDom("checkboxeventactive");
					i.onchange = function(e) {
						r.onActivatePKEvent(e.target)
					}, e.active && (e.pk ? t.appendChild(this.createButton("Stop PK", {
						x: 212,
						y: 320,
						w: 240,
						h: 40
					}, function(e) {
						r.stopPKEvent()
					})) : t.appendChild(this.createButton("Start PK!", {
						x: 212,
						y: 320,
						w: 240,
						h: 40
					}, function(e) {
						r.startPKEvent()
					})), i = gui.getDom("checkboxignoretags"), i.onchange = function(e) {
						r.onToggleIgnoreTags(e.target)
					}, i = gui.getDom("checkboxwarpdead"), i.onchange = function(e) {
						r.onToggleWarpDead(e.target)
					}, t.appendChild(this.createButton("Remove Players", {
						x: 27,
						y: 230,
						w: 200,
						h: 40
					}, function(e) {
						r.removePKEventPlayers()
					})), t.appendChild(this.createButton("Invite Players", {
						x: 237,
						y: 230,
						w: 200,
						h: 40
					}, function(e) {
						r.invitePKEventPlayers()
					})), t.appendChild(this.createButton("Invite Clans", {
						x: 447,
						y: 230,
						w: 200,
						h: 40
					}, function(e) {
						r.showEventClanInvite()
					})))
				}
			},
			onActivatePKEvent: function(e) {
				e.checked ? (this.eventinfo = {
					active: !0,
					pk: !1,
					ignoretags: !0,
					warpdead: !0
				}, this.closePopUp(), this.game.client && this.game.client.sendEventInfo(this.eventinfo)) : (this.eventinfo = {
					active: !1
				}, this.closePopUp(), this.game.client && this.game.client.sendEventInfo(this.eventinfo))
			},
			onToggleIgnoreTags: function(e) {
				this.eventinfo.ignoretags = e.checked ? !0 : !1, this.closePopUp(), this.game.client && this.game.client.sendEventInfo(this.eventinfo)
			},
			onToggleWarpDead: function(e) {
				this.eventinfo.warpdead = e.checked ? !0 : !1, this.closePopUp(), this.game.client && this.game.client.sendEventInfo(this.eventinfo)
			},
			startPKEvent: function() {
				this.eventinfo.pk = !0, this.closePopUp(), this.game.client && this.game.client.sendEventInfo(this.eventinfo)
			},
			stopPKEvent: function() {
				this.eventinfo.pk = !1, this.closePopUp(), this.game.client && this.game.client.sendEventInfo(this.eventinfo)
			},
			removePKEventPlayers: function() {
				this.game.client && this.game.client.sendEventInfo({
					removeplayers: !0
				})
			},
			invitePKEventPlayers: function() {
				this.game.client && this.game.client.sendEventInfo({
					inviteplayers: !0
				})
			},
			showEventClanInvite: function() {
				this.closePopUpNow();
				var e = this.showPopUp({
						title: "Invite Clans",
						popupType: "inviteeventclans"
					}),
					t = this;
				e.innerHTML = '<div style="font-size:24px"><br><center>Type the clan names to invite, comma-separated.</center><br><br>\n<center><form id="inviteclansform" name="inviteclansform" style="width:100%;">\n' + translate("Clans:") + ' <input type="text" id="inviteclannames" name="inviteclannames" style="width:360px; height:32px;" >\n' + '<input type="submit" value="' + translate("Invite") + '" class="inputbutton"></center>\n' + "</form><div>";
				var n = gui.getDom("inviteclansform");
				n.onsubmit = function(e) {
					return t.inviteEventClans(), !1
				}, this.addBackButton(e, "Go back to the events screen", function(e) {
					t.closePopUpNow(), t.showEventInfo(t.eventinfo)
				}), gui.focus("inviteclannames")
			},
			inviteEventClans: function() {
				var e = document.inviteclansform.inviteclannames.value.trim();
				if (e.length <= 0) return;
				this.closePopUp(), this.game.client && this.game.client.sendEventInfo({
					inviteclans: e
				})
			},
			showConfirmLogout: function() {
				var e = this.showPopUp({
					title: "Logout from Account",
					width: 400,
					height: 240,
					popupType: "confirmlogout"
				});
				e.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Do you really want to logout from your account? (you will need to login again to play)") + "</center><div>";
				var t = this;
				e.appendChild(this.createButton("Logout", {
					x: 142,
					y: 200,
					w: 200,
					h: 40
				}, function(e) {
					t.logoutFromAccount()
				}))
			},
			logoutFromAccount: function() {
				if (!(this.game.player && !this.game.player.ghost && Config_Extern && Config_Extern["platform"] == "web")) return;
				this.closePopUpNow(), this.game.storage.resetData(), this.game.storage.save(), this.game.app.reconnect()
			}
		});
		return e
	}), define("shop", [], function() {
		var e = Class.extend({
			init: function(e) {
				this.game = e, this.gamecontainerURL = "file://";
				var t = this;
				window.addEventListener("message", function(e) {
					if (e.origin != "file://" && e.origin != "https://iappsbeats.com") return;
					t.gamecontainerURL = e.origin, t.handleContainerMessage(e)
				})
			},
			showBuyCoinsDialog: function(e, t) {
				if (this.game && this.game.player && this.game.player.userid == 195235 && this.game.app.config.gamename == "Avalonia") {
					this.game.showShortMessage("Sorry you cannot purchase coins anymore.");
					return
				}!t && this.coinsdialogparameters ? (e = this.coinsdialogparameters.quantity, t = this.coinsdialogparameters.frommenu) : this.coinsdialogparameters = {
					quantity: e,
					frommenu: t
				};
				var n = Config_Extern && Config_Extern["platform"] == "iphone" && !this.hasExternInterfaceVersion(2.3);
				this.game.client && this.game.client.sendTrackAction("showdialog", "buycoins" + (n ? "iphone" : ""), t == "buyitem" && this.buyitemdata ? this.buyitemdata.itemid : t);
				if (n) {
					this.initMobileStore();
					return
				}
				var r = !1,
					i = !1,
					s = Config_Extern && Config_Extern["platform"] == "web",
					o = this.game.app.config.inapp;
				if (r && e && e > 0)
					for (var u in o)
						if (o[u].coins >= e || u >= o.length - 1) {
							this.startBuyCoinsPackage(o[u], 1);
							return
						}
				this.game.menu.closePopUpNow();
				var a = this.game.menu.showPopUp({
						title: "Get Coins",
						hideclosebutton: t == "buyitem" || t == "mainmenu",
						popupType: "coinspackages"
					}),
					f = "";
				t == "buyitem" || t == "clientbuycoins" ? f = translate("You need more coins for that. Choose one of the following packages!") : (f = translate("Choose one of the following packages to get coins for weapons, outfits or houses!"), f += " " + translate("Thanks! :-)")), s && (f += '<div id="webpaymentcontainer" style="position:absolute;left:80px;top:250px;right:100px;bottom:10px;"></div>'), a.innerHTML = f;
				var l = [];
				for (var u in o) {
					if (s) {
						if (o[u].price < 4.99) continue;
						o[u].localprice = "$" + o[u].price
					}(!e || o[u].coins >= e || u >= o.length - 1) && l.push(this.getCoinsMenuItem(o[u]))
				}
				var c = this.game.menu.createMenuContainer(a, {
					x: s ? 80 : 0,
					y: i || s ? 80 : 100,
					w: 664 - (s ? 80 : 0),
					h: 160
				});
				this.game.menu.addMenuItemsToDialog(c, l), i && (this.offers ? this.showOffers(this.offers, a) : this.game.client.sendGetOffers());
				switch (t) {
					case "buyitem":
						var h = this;
						this.game.menu.addBackButton(a, "Go back to buy the item", function(e) {
							h.game.menu.closePopUpNow(), h.askBuyItem()
						});
						break;
					case "mainmenu":
						this.game.menu.addMainBackButton(a)
				}
			},
			getCoinsMenuItem: function(e) {
				var t = this,
					n = Config_Extern && Config_Extern["platform"] == "web",
					r = translate("%d Coins", [e.coins]),
					i = translate("Get %s!", [r]);
				return e.localprice && (r += '<br><span style="color:lightgreen;">' + e.localprice + "</span>"), {
					text: r,
					image: "bbuilder_newbutton_buycoins.png",
					help: i,
					textfont: (n ? "22px" : "30px") + " Coolvetica",
					callback: function(n) {
						t.startBuyCoinsPackage(e, 1, n.target)
					}
				}
			},
			showOffers: function(e, t) {
				e && (this.offers = e), t || (t = gui.getDom("newpopup_dialog"));
				var n = [];
				for (var r in this.offers) r < 6 && n.push(this.getOfferMenuItem(this.offers[r]));
				try {
					var i = this.game.menu.createMenuContainer(t, {
						x: 0,
						y: 240,
						w: 664,
						h: 160
					});
					this.game.menu.addMenuItemsToDialog(i, n)
				} catch (s) {}
			},
			getOfferMenuItem: function(e) {
				var t = this;
				return {
					text: e.coins + " Coins",
					image: e.image,
					help: e.name,
					textfont: "30px Coolvetica",
					callback: function(n) {
						t.game.menu.closePopUpNow(), t.showOfferDescription(e)
					},
					cssclass: "offer"
				}
			},
			showOfferDescription: function(e) {
				var t = this.game.menu.showPopUp({
						title: e.name,
						hideclosebutton: !0,
						popupType: "offerdescription"
					}),
					n = '<img src="' + e.image + '" style="float:left; padding-right:10px;" >' + '<p style="font-size:21px;">' + e.description + "</p>";
				t.innerHTML = n;
				var r = this;
				this.addBigButton(t, 284, 240, translate("Complete Offer"), "bbuilder_newbutton_buycoins.png", "", "", function(t) {
					r.showBuyCoinsDialog(), r.game.client.sendTrackAction("clickoffer", e.id, e.hash), r.showURL(e.url, "outside")
				}), this.game.menu.addBackButton(t, "Go back to the coins dialog", function(e) {
					r.game.menu.closePopUpNow(), r.showBuyCoinsDialog()
				})
			},
			startBuyCoinsPackage: function(e, t, n) {
				if (Config_Extern) switch (Config_Extern.platform) {
					case "iphone":
						this.game.client && this.game.client.sendTrackAction("purchase", "iphone", e.ios), this.buyInAppItem(e.ios);
						return;
					case "android":
						this.game.client && this.game.client.sendTrackAction("purchase", "android", e.ios), this.buyInAppItemWithPayload(e.ios.toLowerCase(), this.hash(64));
						return;
					case "web":
						if (!window.paypal) return;
						this.game.client && this.game.client.sendTrackAction("purchase", "web", e.ios), n && gui.setChildClass(n.parentNode, "selected", ".menuitem", n);
						var r = this;
						gui.setHTML("webpaymentcontainer", ""), paypal.Buttons({
							style: {
								height: 45,
								color: "blue",
								shape: "pill",
								label: "pay"
							},
							createOrder: function(t, n) {
								return n.order.create({
									purchase_units: [{
										reference_id: e.ios,
										amount: {
											value: "" + e.price
										},
										description: e.coins + " Coins"
									}]
								})
							},
							onApprove: function(t, n) {
								r.game.registerPayment("paypal", 1, t.orderID, JSON.stringify(t), e.ios), r.game.menu.closePopUpNow()
							},
							onError: function(e) {
								window.console && console.log("Paypal error:", e), gui.alert("There was a problem with Paypal. Please try again later.")
							}
						}).render("#webpaymentcontainer");
						return
				}
				if (typeof FB == "undefined") return;
				this.lastFacebookPaymentURL = e.productid, this.game.client && this.game.client.sendTrackAction("purchase", "facebook", e.productid);
				var r = this;
				FB.ui({
					method: "pay",
					action: "purchaseitem",
					product: e.productid,
					request_id: this.hash(64),
					quantity: t
				}, function(e) {
					r.verifyPayment(e)
				})
			},
			verifyPayment: function(e) {
				if (!e) {
					gui.alert("There was an error processing your payment. Please try again!");
					return
				}
				if (e.error_code) {
					e.error_code != 1383010 && gui.alert("There was an error processing your payment." + e.error_message + " Error code:" + e.error_code);
					return
				}
				this.game.registerPayment("facebook", e.quantity, e.payment_id, e.signed_request, this.lastFacebookPaymentURL)
			},
			hash: function(e) {
				return typeof e == "number" && e === parseInt(e, 10) && (e = (new Array(e + 1)).join("x")), e.replace(/x/g, function() {
					var e = Math.round(Math.random() * 61) + 48;
					return e = e > 57 ? e + 7 > 90 ? e + 13 : e + 7 : e, String.fromCharCode(e)
				})
			},
			askBuyItem: function(e) {
				if (!this.game.player) return;
				this.game.menu.getCurrentMenu() == "buyitem" && this.game.menu.closePopUpNow(), e && (this.buyitemdata = e);
				var t = this.game.menu.showPopUp({
						title: this.buyitemdata.name + (this.game.player.isGameAdmin() || this.game.player.isEventAdmin() ? " (" + this.buyitemdata.itemid + ")" : ""),
						height: 340,
						popupType: "buyitem"
					}),
					n = this.buyitemdata.price && this.buyitemdata["price"] != 0,
					r = this.buyitemdata.pricestring ? this.buyitemdata.pricestring : this.buyitemdata.currency && this.buyitemdata["currency"] == "eggs" ? this.buyitemdata.price + " eggs" : this.buyitemdata.currency && this.buyitemdata["currency"] == "eventgem" ? this.buyitemdata.price + " event gems" : this.buyitemdata.price + " coins",
					i = this.game.menu.getImageForItem(this.buyitemdata),
					s = this.game.menu.getImageClipForItem(this.buyitemdata);
				s = s.length > 0 ? "position:absolute;" + (this.buyitemdata["itemtype"] == "mount" ? "left:-32px;top:-40px;" : this.buyitemdata["itemtype"] == "hat" ? "left:0px;top:-28px;" : ["head", "armor"].indexOf(this.buyitemdata.itemtype) >= 0 ? "left:0px;top:-10px;" : "left:0px;top:0px;") + "clip:" + s + ";" : "margin-top:16px; max-height:76px;";
				var o = this.buyitemdata["itemtype"] != "mount" || this.buyitemdata["mounttype"] != "car",
					u = "";
				this.buyitemdata["itemtype"] == "weapon" && this.buyitemdata.level && this.buyitemdata.level > 1 && (u += translate("Weapon Level %d", [this.buyitemdata.level])), this.buyitemdata.clanname && (u = this.addToDescription(u, translate("Only for %s members", [this.buyitemdata.clanname]))), this.buyitemdata["itemtype"] == "armor" && this.buyitemdata.level && this.buyitemdata.level > 1 && (u = this.addToDescription(u, translate("Armor Level %d", [this.buyitemdata.level]))), this.buyitemdata.description && (u = this.addToDescription(u, translate(this.buyitemdata.description))), u.length <= 0 && (u = this.addToDescription(u, this.buyitemdata.name));
				var a = translate("Price:") + " " + r,
					f = this.buyitemdata.price && parseInt(this.buyitemdata.price) > 0 && this.buyitemdata["currency"] != "eggs" && this.buyitemdata["currency"] != "eventgem" && this.game.player.coins < this.buyitemdata.price,
					l = f ? this.buyitemdata.price - this.game.player.coins : 0;
				f && (a += '<br><div style="color:lime;font:italic 18px Coolvetica;">' + translate("You need %d more coins", [l]) + "</div>");
				var c = "";
				c += '<div class="pixelimage" style="position:absolute;top:40px;' + (o ? "left:180px; width:180px; -ms-transform:scale(3); -webkit-transform:scale(3); transform:scale(3);" : "") + '"><img src="' + i + '" style="' + s + '"></div>', c += '<div style="position:absolute;left:200px;top:20px;width:400px;"><div class="pmcontenttext">' + u + "</div>" + '<div class="pmtranslate" style="font-size: 22px;">' + translate("Translate") + "</div>Â© iAppsBeats LTD</div>", !this.buyitemdata.isdisplay && (n || this.buyitemdata.minkills || this.buyitemdata.minsparwins || this.buyitemdata.minonlinetime) && (c += '<div style="position:absolute;left:200px;top:240px;width:240px;">' + a + "</div>"), t.innerHTML = c;
				var h = this;
				gui.setChildClick(t, ".pmtranslate", function(e) {
					h.game.menu.translatePM(e)
				}), ["head", "hat", "armor"].indexOf(this.buyitemdata.itemtype) >= 0 && (line = document.createElement("div"), line.innerHTML = this.game.menu.getSmallCharacterPreview(this.buyitemdata.armor ? this.buyitemdata.armor : this.game.player.armor, this.buyitemdata.head ? this.buyitemdata.head : this.game.player.head, this.buyitemdata.hat, 0, 150), line.style.pointerEvents = "none", t.appendChild(line)), this.buyitemdata.isdisplay || this.addBigButton(t, 484, 220, null, "bbuilder_newbutton_buy.png", '<div style="position:absolute;font-size:30px;top:30px;width:100%;text-align:center;">' + (n ? translate("Buy") : translate("Get")) + "</div>", "", function(e) {
					h.game.menu.closePopUpNow(), f ? h.showBuyCoinsDialog(l, "buyitem") : h.game.client.sendBuyItem({
						itemid: h.buyitemdata.itemid,
						replyid: h.buyitemdata.replyid,
						count: 1
					})
				});
				if (!this.buyitemdata.isdisplay && this.game.client) {
					var p = "buyitem_" + (f ? "paymoney" : n ? this.buyitemdata["curreny"] == "eggs" ? "payeggs" : "paycoins" : "free");
					this.game.client.sendTrackAction("showdialog", p, this.buyitemdata.itemid)
				}
			},
			addToDescription: function(e, t) {
				return e.length > 0 && (e.substring(e.length - 1) == "." ? e += " " : e += ", "), e + t
			},
			addBigButton: function(e, t, n, r, i, s, o, u) {
				var a = this,
					f = document.createElement("div");
				f.className = "itembuybutton" + (r ? " tooltip" : ""), f.style.backgroundImage = "url('../files/gui/" + i + "')", f.style.left = t + "px", f.style.top = n + "px", r && f.setAttribute("help", r), gui.setClick(f, u), e.appendChild(f), f.innerHTML = "<center>" + s + '<div style="position:absolute;left:-200px;top:100px;width:496px;font-size:30px;">' + (r ? r : "") + o + "</div></center>"
			},
			showSellItems: function(e) {
				this.sellitems = e, this.game.menu.getCurrentMenu() == "sellitems" && this.game.menu.closePopUpNow();
				var t = this.game.menu.showPopUp({
						title: "ðŸ’°" + translate("Sell items") + "ðŸ’°",
						popupType: "sellitems"
					}),
					n = "";
				n += '<div style="position:absolute;width:100%;bottom:30px;height:40px;"><center>', n += translate("Choose an item to sell!"), n += "</center></div>", t.innerHTML = n;
				if (this.sellitems.length > 0) {
					var r = [];
					for (var i in this.sellitems) r.push(this.getSellItemMenuItem(this.sellitems[i], i));
					this.game.menu.addMenuItemsToDialog(t, r)
				} else {
					var n = "<br><br><center>" + translate("You don't have any items yet to sell here.") + "</center>";
					t.innerHTML = n
				}
			},
			getSellItemMenuItem: function(e, t) {
				var n = this;
				return e.help = translate("Sell %d x %s!", [e.nr, e.name]), e.callback = function(e) {
					n.game.menu.closePopUpNow(), n.sellItem(t)
				}, e.text = "<font color=lime>$" + e.price + "</font> " + e.name + "s", e
			},
			sellItem: function(e) {
				var t = this.sellitems[e];
				this.game.menu.closePopUp(), this.game.client.sendSellItem(t.itemid, t.nr)
			},
			showFurnitureShops: function() {
				var e = this.game.menu.showPopUp({
						title: "Visit Furniture Shops",
						popupType: "furnitureshops"
					}),
					t = this,
					n = [{
						help: "General furniture shop with beds, chairs, tables",
						image: "bbuilder_newbutton_furniture2.png",
						text: "Furniture",
						callback: function(e) {
							t.game.menu.closePopUpNow(), t.goToShopHouse("inside_furnitureshop", 14, 13)
						}
					}, {
						help: "Pet shop",
						image: "bbuilder_newbutton_pets.png",
						text: "Pets",
						callback: function(e) {
							t.game.menu.closePopUpNow(), t.goToShopHouse("inside_petshop", 14, 13)
						}
					}, {
						help: "Nature shop",
						image: "bbuilder_newbutton_trees.png",
						text: "Nature",
						callback: function(e) {
							t.game.menu.closePopUpNow(), t.goToShopHouse("inside_nature", 14, 13)
						}
					}];
				this.game.menu.addMenuItemsToDialog(e, n)
			},
			goToShopHouse: function(e, t, n) {
				this.game.menu.closePopUp(), this.game.client.sendMapMove(e, t, n), this.game.sounds.play("teleport")
			},
			sendMessageToGameContainer: function(e, t) {
				if (!Config_Extern || !window.parent) return;
				var n = {
					type: e,
					data: t
				};
				window.parent.postMessage(n, this.gamecontainerURL)
			},
			initMobileStore: function() {
				this.sendMessageToGameContainer("initstore")
			},
			handleContainerMessage: function(e) {
				switch (e.data.type) {
					case "boughtitem":
						var t = e.data.data.order,
							n = Config_Extern && Config_Extern.platform ? Config_Extern.platform : "iphone";
						this.game.registerPayment(n, 1, t.transaction.id, t.transaction.receipt, t.id);
						break;
					case "inapppurchaseinfo":
						var r = e.data.data,
							i = this.game.app.config.inapp;
						for (var s in i) {
							var o = i[s];
							if (o.ios.toLowerCase() == r.sku.toLowerCase()) {
								o.price = r.price, o.title = r.title, o.description = r.description, o.localprice = r.localprice;
								break
							}
						}
						break;
					case "gameoptions":
						Config_Extern = e.data.data, this.game && this.game.app.tryStartGame();
						break;
					case "receivedpushtoken":
						this.game && this.game.client.sendPushToken(e.data.data.token);
						break;
					case "textfieldclosed":
						var u = e.data.data.purpose,
							a = e.data.data.text;
						if (this.game && this.game.client && a && a.length > 0) {
							var f = (new Date).getTime();
							if (!this.lastchat || !this.lastchattime || f > this.lastchattime + 200) {
								this.lastchat = a, this.lastchattime = f, a.length > 1024 && (a = a.substring(0, 1024));
								if (u.indexOf("pm:") == 0) this.game.client.sendPMAction("sendpm", {
									userid: parseInt(u.substring(3)),
									message: a
								});
								else switch (u) {
									case "chat":
										this.game.player && this.game.say(a, !0);
										break;
									case "clanmessage":
										this.game.client.sendPMAction("sendclanmessage", {
											message: a
										})
								}
							}
						}
						this.game.client.sendIsTalking(!1)
				}
			},
			requestPushNotifications: function() {
				this.hasExternInterfaceVersion(1.1) && this.sendMessageToGameContainer("requestpushnotifications")
			},
			hasExternInterfaceVersion: function(e) {
				return Config_Extern && Config_Extern.version && Config_Extern.version >= e
			},
			logoutFromFacebook: function() {
				this.sendMessageToGameContainer("logoutfromfacebook")
			},
			logoutToStart: function() {
				this.game.client.connection && this.game.client.connection.close(), this.sendMessageToGameContainer("logouttostart")
			},
			sendConnectedToServer: function() {
				this.hasExternInterfaceVersion(1.1) && this.sendMessageToGameContainer("connectedtoserver")
			},
			sendNameUpdated: function(e) {
				this.hasExternInterfaceVersion(1.1) && this.sendMessageToGameContainer("nameupdated", {
					name: e
				})
			},
			sendOpenTextField: function(e, t, n) {
				this.sendMessageToGameContainer("opentextfield", {
					purpose: e,
					text: t,
					keyboardtype: n
				})
			},
			sendFinishTransaction: function(e) {
				this.sendMessageToGameContainer("finishtransaction", {
					transactionid: e
				})
			},
			sendCookie: function(e, t) {
				this.sendMessageToGameContainer("logincookies", {
					cookie: e,
					cookie2: t
				})
			},
			buyInAppItemWithPayload: function(e, t) {
				this.sendMessageToGameContainer("buyinappitemwithpayload", {
					sku: e,
					payload: t
				})
			},
			buyInAppItem: function(e) {
				this.sendMessageToGameContainer("buyinappitem", {
					sku: e
				})
			},
			sendOpenURL: function(e, t) {
				this.sendMessageToGameContainer("openurl", {
					url: e,
					target: t
				})
			},
			showURL: function(e, t) {
				this.hasExternInterfaceVersion(2.3) && Config_Extern.platform != "web" ? this.sendOpenURL(e, t) : window.open(e, "_blank")
			},
			sendOpenAppStore: function(e) {
				this.sendMessageToGameContainer("openappstore", {
					id: e
				})
			},
			shareMessenger: function() {
				this.sendMessageToGameContainer("sharemessenger")
			},
			shareFacebook: function(e) {
				this.sendMessageToGameContainer("sharefacebook", {
					url: e
				})
			}
		});
		return e
	}), define("storymanager", ["animationmanager", "character", "renderer", "newmap", "newnpc"], function(e, t, n, r, i) {
		var s = Class.extend({
			init: function(e) {
				this.game = e
			},
			showStoryMenu: function(e) {
				var t = 10;
				e && e.stories ? (this.stories = e.stories, this.storieseoffset = e.offset ? e.offset : 0) : (e && e.forceload && this.game.client && this.game.player && (this.game.client.sendStoryAction("list", e.userid ? {
					userid: e.userid
				} : {}), this.storyuserid = e.userid ? e.userid : null), e && e.offset !== undefined && (this.storiesoffset = e.offset));
				var n = this.game.menu.showPopUp({
					title: "Stories" + (this.storyuserid ? " of Player " + this.storyuserid : ""),
					hideclosebutton: !0,
					popupType: "storylist"
				});
				n.innerHTML = "";
				if (this.stories && this.stories.length > 0) {
					var r = [];
					for (var i = this.storiesoffset; i < this.stories.length && i < this.storiesoffset + t; i++) r.push(this.getStoryMenuItem(this.stories[i], !1));
					var s = this.game.menu.createMenuContainer(n, {
						x: 0,
						y: 120,
						w: 664,
						h: 280
					});
					s.className = "storymenu", this.game.menu.addMenuItemsToDialog(s, r)
				}
				var o = this;
				this.storyuserid || (n.appendChild(this.game.menu.createButton("Create Story", {
					x: 127,
					y: 40,
					w: 200,
					h: 40
				}, function(e) {
					o.game.menu.closePopUpNow(), o.showStoryInterface()
				})), n.appendChild(this.game.menu.createButton("Youtube / Insta", {
					x: 337,
					y: 40,
					w: 200,
					h: 40
				}, function(e) {
					o.game.menu.closePopUpNow(), o.showCreateYoutubeStory()
				}))), this.stories && (this.storiesoffset > 0 && n.parentNode.appendChild(this.game.menu.createButton("Prev", this.game.menu.getPrevButtonPosition(), function(e) {
					o.showStoryMenu({
						offset: o.storiesoffset - t
					})
				})), this.stories.length > this.storiesoffset + t && n.parentNode.appendChild(this.game.menu.createButton("Next", this.game.menu.getNextButtonPosition(), function(e) {
					o.showStoryMenu({
						offset: o.storiesoffset + t
					})
				}))), this.storyuserid ? this.game.menu.addAdminActionsBackButton(n) : this.game.menu.addMainBackButton(n)
			},
			getStoryMenuItem: function(e, t) {
				var n = this,
					r = t && this.playlist.indexOf(e) == this.playlistselected;
				return {
					cssid: "menustory" + e.id,
					cssclass: r ? "selectedstory" : "",
					itemcssclass: e["type"] != "game" ? "storymenuimage" : "",
					text: e.title,
					subtitle: translate("%s ago", [e.timestr]),
					itemtype: e["type"] == "game" ? "head" : null,
					head: e["type"] == "game" ? e.look.head : null,
					hat: e["type"] == "game" ? e.look.hat : null,
					image: e["type"] == "youtube" ? "youtube_social_squircle_red.png" : e["type"] == "instagram" ? "instagram_logo.png" : e["type"] == "facebook" ? "facebook_logo.png" : e["type"] == "twitch" ? "twitch_logo.png" : null,
					help: "View Story",
					callback: function(r) {
						t ? n.game.client.sendStoryAction("get", {
							id: e.id,
							target: "playlist"
						}) : (n.game.menu.closePopUpNow(), n.showStory(e, !0))
					}
				}
			},
			showCreateYoutubeStory: function() {
				var e = this.game.menu.showPopUp({
						title: "Create Youtube / Insta Story",
						hideclosebutton: !0,
						popupType: "createyoutubestory"
					}),
					t = '<div style="font-size:24px"><br>' + translate("Enter a youtube video, instagram post or Facebook post url to show in your story. Only public and suitable content.") + "<br>\n" + '<label style="position:absolute;top:200px;width:100%">URL:' + '<input type="text" id="editstoryurl" name="editstoryurl"' + ' style="position:absolute;left:80px;width:572px;height:32px;font-size:18px;" value=""></label>' + "<div>";
				e.innerHTML = t;
				var n = this,
					r = this.game.menu.createButton("Create Story", {
						x: 275,
						y: 276,
						w: 200,
						h: 40
					}, function(e) {
						n.createYoutubeStory()
					}, !0);
				r.id = "playlistwaypointsbutton", e.appendChild(r), gui.focus("editstoryurl"), this.game.menu.addMainBackButton(e)
			},
			createYoutubeStory: function() {
				var e = gui.getDom("editstoryurl");
				if (!e) return;
				var t = e.value.trim();
				if (!t || t.length <= 0) return;
				var n = this.game.player,
					r = {
						map: this.game.mapmanager.currentmap.mapname,
						template: this.game.mapmanager.currentmap.templatename,
						length: 10,
						data: [{
							ani: n.getAnimation(!0),
							armor: n.armor,
							dir: n.dir,
							hat: n.hat,
							head: n.head,
							name: n.name,
							weapon: n.weapon,
							x: n.gridX,
							y: n.gridY
						}]
					};
				if (t.indexOf("youtu") >= 0) {
					var i = this.getYoutubeIDFromURL(t);
					if (!i) return;
					r.type = "youtube", r.data[0].youtube = i, r.data[0].chat = "Youtube"
				} else if (t.indexOf("instagram") >= 0) {
					var i = this.getInstagramIDFromURL(t);
					if (!i) return;
					r.type = "instagram", r.data[0].instagram = i, r.data[0].chat = "Instagram"
				} else {
					if (!(t.indexOf("facebook.com/") >= 0)) return;
					var i = this.getFacebookIDFromURL(t);
					if (!i) return;
					r.type = "facebook", r.data[0].facebook = i, r.data[0].chat = "Facebook"
				}
				this.game.menu.closePopUpNow(), this.recording = r, this.showStoryPublish()
			},
			getYoutubeIDFromURL: function(e) {
				if (!e) return e;
				var t;
				return (t = e.match(/(\?|&)v=([^&#]+)/)) ? t.pop() : (t = e.match(/(\.be\/)+([^\/]+)/)) ? t.pop() : (t = e.match(/(\embed\/)+([^\/]+)/)) ? t.pop().replace("?rel=0", "") : e && e.length < 16 ? e : null
			},
			getInstagramIDFromURL: function(e) {
				if (!e) return e;
				var t;
				return (t = e.match(/p\/(.*?)\/(.*)$/)) ? t[1].replace("/embed", "") : e && e.length < 16 ? e : null
			},
			getFacebookIDFromURL: function(e) {
				if (!e) return e;
				var t;
				return (t = e.match(/(facebook\.com\/)+([^?]+)/)) ? encodeURIComponent(t.pop()) : null
			},
			showStoryPlayList: function(e, t, n) {
				!e && t && this.game.client && this.game.client.sendStoryAction("listlocation", {
					location: t,
					userid: n
				}), this.playlist = e, t && (this.playlistname = t);
				var r = this.playlistname == "news" ? "News Stories" : this.playlistname == "guide" ? "Guides" : "Playlist " + this.playlistname,
					i = this.game.menu.showPopUp({
						title: r,
						hideclosebutton: !0,
						popupType: "playlist"
					}),
					s = this.playlistname == "news" && this.game.app.config.facebookpage,
					o = this;
				if (this.playlist) {
					var u = this.getStoryHTML("playlistcanvas", 0, 10);
					u += '<label style="position:absolute;left:420px;top:8px;right:10px;text-align:center;">' + (this.playlistname == "guide" ? translate("Next Guides") : this.playlistname == "news" ? translate("Next News") : translate("Next Stories")) + "</label>\n", i.innerHTML = u;
					if (this.playlist.length > 0) {
						this.playlistprevbutton = this.game.menu.createButton("Prev", {
							x: 434,
							y: s ? 320 : undefined,
							bottom: s ? undefined : 5,
							w: 110,
							h: 40
						}, function(e) {
							o.scrollPlayList(!1)
						}), this.playlistnextbutton = this.game.menu.createButton("Next", {
							x: 554,
							y: s ? 320 : undefined,
							bottom: s ? undefined : 5,
							w: 110,
							h: 40
						}, function(e) {
							o.scrollPlayList(!0)
						}), i.appendChild(this.playlistprevbutton), i.appendChild(this.playlistnextbutton);
						if (this.game.app.config.enablesharebutton) {
							var a = this.game.menu.createButton("", {
								x: 315,
								y: 365,
								w: 38,
								h: 38
							}, function(e) {
								o.shareStoryFaceBook(o.displayedstory.hash)
							}, !0);
							a.id = "playlistsharefbbutton", a.style.backgroundColor = "transparent", a.style.backgroundImage = "url(../files/gui/bbuilder_share_facebook.png)", a.style.backgroundSize = "contain", a.style.border = "none", i.appendChild(a), gui.hide(a), a = this.game.menu.createButton("", {
								x: 355,
								y: 365,
								w: 38,
								h: 38
							}, function(e) {
								o.shareStoryTwitter(o.displayedstory.hash, o.displayedstory.title)
							}, !0), a.id = "playlistsharetwbutton", a.style.backgroundColor = "transparent", a.style.backgroundImage = "url(../files/gui/bbuilder_share_twitter.png)", a.style.backgroundSize = "contain", a.style.border = "none", i.appendChild(a), gui.hide(a)
						}
						var f = this.game.player && this.game.player.isGameAdmin(),
							l;
						f && (l = this.game.menu.createButton("ðŸ—’", {
							x: 275,
							y: 365,
							w: 38,
							h: 38
						}, function(e) {
							o.showStoryWaypoints(o.displayedstory.data)
						}, !0), l.id = "playlistwaypointsbutton", i.appendChild(l), gui.hide(l)), l = this.game.menu.createButton("âœï¸", {
							x: 355,
							y: 325,
							w: 38,
							h: 38
						}, function(e) {
							o.closePopUpNow(), o.editPlayListStory()
						}, !0), l.id = "playlisteditstorybutton", i.appendChild(l), gui.hide(l);
						var c = this.game.menu.createMenuContainer(i, {
							x: 420,
							y: 40,
							w: 260,
							h: 260
						});
						c.id = "playlistcontainer", c.className = "storymenu", this.playlistoffset = 0, this.playlistselected = 0, this.playliststoriesperpage = 4, this.updatePlayListItems(), this.game.client.sendStoryAction("get", {
							id: this.playlist[this.playlistselected].id,
							target: "playlist"
						})
					}
				} else i.innerHTML = "<center><i>Loading...</i></center>";
				s && i.appendChild(this.game.menu.createButton("News on Facebook", {
					x: 434,
					bottom: 5,
					w: 230,
					h: 40
				}, function(e) {
					o.game.shop.showURL(o.game.app.config.facebookpage, "inside")
				}));
				if (this.game.player && this.game.player.isGameAdmin()) {
					var h = this.game.app.config.enablenewgui;
					i.parentNode.appendChild(this.createButton("Add", {
						x: h ? 625 : 588,
						y: h ? 7 : -8,
						w: 80,
						h: 40
					}, function(e) {
						o.game.menu.closePopUpNow(), o.showStoryMenu({
							forceload: !0,
							offset: 0
						})
					}))
				}
				this.playlistname == "profile" ? this.addBackButton(i, "Go back to the player profile", function(e) {
					o.game.menu.closePopUpNow(), o.game.menu.showPlayerProfile()
				}) : this.game.menu.addMainBackButton(i)
			},
			updatePlayListItems: function() {
				if (!this.playlist) return;
				var e = [];
				for (var t = this.playlistoffset; t < this.playlist.length && t < this.playlistoffset + this.playliststoriesperpage; t++) e.push(this.getStoryMenuItem(this.playlist[t], !0));
				var n = gui.getDom("playlistcontainer");
				n && (n.innerHTML = "", this.game.menu.addMenuItemsToDialog(n, e)), this.playlistoffset + this.playliststoriesperpage < this.playlist.length ? gui.show(this.playlistnextbutton) : gui.hide(this.playlistnextbutton), this.playlistoffset > 0 ? gui.show(this.playlistprevbutton) : gui.hide(this.playlistprevbutton)
			},
			editPlayListStory: function() {
				this.showStory(this.displayedstory, !0, !0)
			},
			scrollPlayList: function(e) {
				if (!this.playlist) return;
				e ? this.playlistoffset + this.playliststoriesperpage < this.playlist.length && (this.playlistoffset += this.playliststoriesperpage, this.updatePlayListItems()) : this.playlistoffset > 0 && (this.playlistoffset = Math.max(0, this.playlistoffset - this.playliststoriesperpage), this.updatePlayListItems())
			},
			showPlayListStory: function(e) {
				this.displayedstory = e;
				if (!e) return;
				var t = this.playlistselected >= this.playlistoffset && this.playlistselected < this.playlistoffset + this.playliststoriesperpage;
				for (var n in this.playlist) {
					var r = this.playlist[n];
					if (r["id"] == e["id"]) {
						this.playlistselected = parseInt(n);
						break
					}
				}
				var i = this.playlistselected >= this.playlistoffset && this.playlistselected < this.playlistoffset + this.playliststoriesperpage;
				if (t || i) this.playlistoffset = Math.floor(this.playlistselected / this.playliststoriesperpage) * this.playliststoriesperpage, this.updatePlayListItems();
				gui.setChildHTML("newpopup", "div.titletext", e.title), this.playlistgame && this.stopDrawStoryInCanvas(this.playlistgame), this.playlistgame = this.drawStoryInCanvas("playlistcanvas", null, e), e.canedit ? gui.show("playlisteditstorybutton") : gui.hide("playlisteditstorybutton"), e["type"] == "game" && e.data ? (gui.show("playlistwaypointsbutton"), gui.show("playlistsharefbbutton"), gui.show("playlistsharetwbutton")) : (gui.hide("playlistwaypointsbutton"), gui.hide("playlistsharefbbutton"), gui.hide("playlistsharetwbutton"))
			},
			switchToNextNewsStory: function() {
				if (!this.playlist || this.playlist.length <= 1 || !this.game.client) return !1;
				var e = this.playlistselected + 1;
				e >= this.playlist.length && (e = 0), this.game.client.sendStoryAction("get", {
					id: this.playlist[e].id,
					target: "playlist"
				})
			},
			showStoryInterface: function() {
				gui.show("recordinterface"), gui.show("recordstartbutton"), gui.hide("recordstopbutton")
			},
			closeRecordStory: function() {
				this.isRecording = !1, gui.hide("recordinterface"), gui.removeClass("recordborder", "recording")
			},
			startRecordStory: function() {
				if (!this.game.player) return;
				gui.hide("recordstartbutton"), gui.show("recordstopbutton"), gui.addClass("recordborder", "recording"), this.recordingStringAttr = ["name", "chat", "armor", "head", "hat", "weapon", "bow", "mount", "shield", "chat", "arg1", "arg2", "arg3", "arg4", "arg5", "arg6", "arg7", "arg8", "arg9", "sidekick", "emoticonfile"], this.recordingAttr = this.recordingStringAttr.concat(["x", "y", "ani", "dir", "speed", "angle", "weaponimage", "bowimage", "zoom"]);
				var e = this.game.player,
					t = this.getRecordingState(this.game.player, !0);
				this.recording = {
					type: "game",
					state: t,
					stateFrame: 0,
					totalFrame: 0,
					action: null,
					tilesRectangle: this.getVisibleRectangle(),
					data: [t],
					newmap: this.game.mapmanager.currentmap,
					map: this.game.mapmanager.currentmap.mapname,
					template: this.game.mapmanager.currentmap.templatename
				}, this.isRecording = !0
			},
			getRecordingState: function(e, t) {
				var n = {
					x: Math.floor(e.gridX * 100) / 100,
					y: Math.floor(e.gridY * 100) / 100,
					ani: e.getAnimation(!0),
					dir: e.dir,
					speed: e.currentSpeed,
					zoom: e.zoom
				};
				for (var r in this.recordingStringAttr) {
					var s = this.recordingStringAttr[r];
					e[s] && e[s].length > 0 && (n[s] = e[s])
				}
				e.weaponimage && e["weaponimage"] != this.game.animationmanager.expandGameFilename("sword", e["weapon"]) && (n.weaponimage = e.weaponimage), e.bowimage && e["bowimage"] != this.game.animationmanager.expandGameFilename("bow", e["bow"]) && (n.bowimage = e.bowimage), e.angle && e.angle != 0 && (n.angle = Math.floor(e.angle * 100) / 100);
				if (t) {
					var o = this.getVisibleRectangle(),
						u = this.game.renderer,
						a = {
							gridX: Math.floor(o.x / u.tilesize),
							gridY: Math.floor(o.y / u.tilesize),
							gridW: Math.ceil((o.w + 16) / u.tilesize),
							gridH: Math.ceil(o.h + 16) / u.tilesize
						},
						f = this;
					this.game.forEachVisibleEntityByDepth(a, function(e) {
						if (!(e instanceof i)) return;
						var t = null;
						e.image && e.image.length > 0 ? t = {
							id: e.id,
							image: e.image
						} : e.animationInfo.animation && (t = {
							id: e.id,
							ani: e.animationInfo.animation
						});
						if (!t) return;
						for (var r in f.recordingAttr) {
							var s = f.recordingAttr[r];
							e[s] && (s != "zoom" || e[s] != 1) && (t[s] = e[s == "x" ? "gridX" : s == "y" ? "gridY" : s])
						}
						n.objects || (n.objects = []), n.objects.push(t)
					})
				}
				return n
			},
			updateRecordStory: function() {
				if (!this.isRecording || !this.game.player) return;
				if (this.game.mapmanager.currentmap.mapname != this.recording.map || this.recording.totalFrame >= 300 * this.game.fps) {
					this.stopRecordStory();
					return
				}
				var e = this.recording.data[this.recording.data.length - 1],
					t = this.getRecordingState(this.game.player, !0);
				"objects" in t && (this.addObjectsToFirstFrame(t.objects), delete t.objects);
				var n, r = 0;
				for (var i in this.recordingAttr) {
					var s = this.recordingAttr[i];
					t[s] != this.recording.state[s] && (n || (n = {}), n[s] = t[s], r++)
				}
				this.recording.action && (n || (n = {}), n.action = this.recording.action, this.recording.action = null, r++), this.recording.sound && (n || (n = {}), n.sound = this.recording.sound, this.recording.sound = null, r++), this.recording.data.length > 1 && r == 1 && ("x" in n && "x" in e && !("y" in e) ? (e.x = n.x, n = null, this.recording.stateFrame = 0) : "y" in n && "y" in e && !("x" in e) && (e.y = n.y, n = null, this.recording.stateFrame = 0)), this.recording.data.length > 1 && r == 2 && "x" in n && "y" in n && "x" in e && "y" in e && (e.x = n.x, e.y = n.y, n = null, this.recording.stateFrame = 0), n && (this.recording.stateFrame >= 2 && (e.pause = this.recording.stateFrame / this.game.fps), this.recording.data.push(n), this.recording.stateFrame = 0), this.recording.state = t;
				if (n || !this.game.player.talk && !this.game.menu.getCurrentMenu()) this.recording.stateFrame++, this.recording.totalFrame++;
				this.expandTilesRectangle()
			},
			addObjectsToFirstFrame: function(e) {
				if (this.recording.data.length <= 0) return;
				var t = this.recording.data[0];
				if (!("objects" in t)) {
					t.objects = e;
					return
				}
				var n = [];
				for (var r in t.objects) n.push(t.objects[r].id);
				for (var r in e) {
					var i = e[r];
					n.indexOf(i.id) < 0 && t.objects.push(i)
				}
			},
			addRecordAction: function(e, t) {
				if (!this.isRecording) return;
				if (e == "shoot") {
					this.recording.action = e;
					var n = this.game.mapmanager.currentmap,
						r = n.projectiles.getProjectileSound(t);
					r && (this.recording.sound = r)
				}
			},
			getRecordingTiles: function() {
				var e = this.game.renderer,
					t = this.recording.newmap,
					n = this.recording.tilesRectangle,
					r = {
						header: {
							offsetx: n.x,
							offsety: n.y,
							width: n.w,
							height: n.h,
							layers: [],
							properties: {}
						},
						zones: []
					},
					i = t._getUsedLayers(n);
				for (var s in i) {
					var o = i[s],
						u = Math.floor(n.x / o.tilewidth),
						a = Math.floor(n.y / o.tileheight),
						f = {
							layer: o.layer,
							offsetx: u * o.tilewidth,
							offsety: a * o.tileheight,
							width: Math.ceil((n.x + n.w) / o.tilewidth) - u,
							height: Math.ceil((n.y + n.h) / o.tileheight) - a,
							tilewidth: o.tilewidth,
							tileheight: o.tileheight,
							tilesinrow: o.tilesinrow,
							tileset: o.tilesetbase,
							tilesetwidth: o.tilesetwidth
						};
					o.collision && (f.collision = o.collision), o.drawover && (f.drawover = o.drawover), o.water && (f.water = o.water);
					var l = {
							layer: o.layer,
							x: 0,
							y: 0,
							w: f.width,
							h: f.height,
							tiles: new Array(f.width * f.height)
						},
						c = null,
						h = null,
						p = null,
						d = null;
					for (var v = 0; v < l.w; v++)
						for (var m = 0; m < l.h; m++) {
							var g = u + v - Math.floor(o.offsetx / o.tilewidth) + (a + m - Math.floor(o.offsety / o.tileheight)) * o.width,
								y = g >= 0 && g < o.tiles.length && o.tiles[g] != undefined ? o.tiles[g] : -1;
							l.tiles[v + m * l.w] = y, y >= 0 && (c == null ? (c = h = v, p = d = m) : (c = Math.min(v, c), p = Math.min(m, p), h = Math.max(v, h), d = Math.max(m, d)))
						}
					if (c == null) continue;
					if (c > 0 || p > 0 || h + 1 < l.width || d + 1 < l.height) {
						var b = h + 1 - c,
							w = d + 1 - p,
							E = {
								layer: o.layer,
								x: 0,
								y: 0,
								w: b,
								h: w,
								tiles: new Array(b * w)
							};
						for (var v = 0; v < b; v++)
							for (var m = 0; m < w; m++) E.tiles[v + m * b] = l.tiles[c + v + (p + m) * l.w];
						l = E, f.offsetx += c * o.tilewidth, f.offsety += p * o.tilewidth, f.width = b, f.height = w
					}
					r.header.layers.push(f), r.zones.push(l)
				}
				return r
			},
			expandTilesRectangle: function() {
				var e = this.recording.tilesRectangle,
					t = this.getVisibleRectangle();
				this.recording.tilesRectangle = {
					x: Math.min(e.x, t.x),
					y: Math.min(e.y, t.y),
					w: Math.max(e.x + e.w, t.x + t.w) - Math.min(e.x, t.x),
					h: Math.max(e.y + e.h, t.y + t.h) - Math.min(e.y, t.y)
				}
			},
			getVisibleRectangle: function() {
				var e = this.game.player,
					t = 256,
					n = 32;
				return {
					x: Math.floor((e.x - t / 2 - n) / 16) * 16,
					y: Math.floor((e.y - t / 2 - n) / 16) * 16,
					w: t + n * 2,
					h: t + n * 2
				}
			},
			stopRecordStory: function() {
				if (!this.isRecording) return;
				this.isRecording = !1;
				if (this.recording.stateFrame >= 2) {
					var e = this.recording.data[this.recording.data.length - 1];
					e.pause = this.recording.stateFrame / this.game.fps
				}
				this.recording.length = this.recording.totalFrame / this.game.fps, this.recording.tiles = this.getRecordingTiles(), gui.hide("recordinterface"), gui.removeClass("recordborder", "recording"), this.showStoryPublish()
			},
			showStoryPublish: function() {
				var e = this.game.menu.showPopUp({
						title: "Publish Story",
						popupType: "publishstory"
					}),
					t = (this.recording.length ? this.recording.length : 2) + " s",
					n = this.getStoryHTML("publishcanvas", 0, 10);
				n += '<label style="position:absolute;left:420px;top:10px;right:10px;">' + translate("Title:") + "</label>\n", n += '<input type="text" id="editstorytitle" name="editstorytitle" style="position:absolute;left:420px;top:50px;right:10px;height:32px;">\n', this.recording["type"] == "game" && (n += '<label style="position:absolute;left:420px;top:100px;right:10px;">â° ' + t + "</label>\n");
				var r = [{
					id: "public",
					name: "Public",
					checked: !0
				}, {
					id: "profile",
					name: "Profile",
					checked: !1
				}, {
					id: "showattop",
					name: "At top",
					checked: !1
				}];
				for (var i in r) {
					var s = r[i];
					n += '<label style="position:absolute; left:420px; top:' + (150 + 35 * i) + 'px; right: 10px;"><input type="checkbox"' + ' id="checkboxpublish' + s.id + '" name="checkboxpublish' + s.id + '" ' + (s.checked ? " checked" : "") + (s.id == "profile" && this.recording["type"] != "game" ? " disabled" : "") + ">" + translate(s.name) + "</label>\n"
				}
				this.recording["type"] == "game" && (n += '<label style="position:absolute;left:420px;top:265px;right:10px;font-size:20px;">' + translate("This saves it to your stories. Object movements, projectiles and players are not recorded yet.") + "</label>"), e.innerHTML = n, gui.getDom("editstorytitle").value = this.suggestRecordingTitle(), this.drawStoryInCanvas("publishcanvas", null, this.recording);
				var o = this;
				e.appendChild(this.game.menu.createButton("Publish", {
					x: 434,
					bottom: 5,
					w: 230,
					h: 40
				}, function(e) {
					o.publishStory(), o.game.menu.closePopUpNow()
				})), this.recording["type"] == "game" && this.game.player && this.game.player.isGameAdmin() && e.appendChild(this.game.menu.createButton("ðŸ—’", {
					x: 355,
					y: 365,
					w: 38,
					h: 38
				}, function(e) {
					o.showStoryWaypoints(o.recording.data)
				}))
			},
			suggestRecordingTitle: function() {
				for (var e in this.recording.data) {
					var t = this.recording.data[e];
					if ("chat" in t && t.chat.length > 0) return t.chat.substr(0, 250)
				}
				var n = this.game.mapmanager.currentmap;
				return n && n.isSpar() ? "Spar" : n && n.isEvent() ? "Event" : this.game.player && this.game.player.weaponData && (!this.game.player.weaponData.weapontype || this.game.player.weaponData["weapontype"] != "sword") ? this.game.player.weaponData.name : "My Story"
			},
			publishStory: function() {
				if (!this.game.client || !this.recording || !this.recording.data) return;
				var e = gui.getDom("editstorytitle").value.trim();
				this.game.client.sendStoryAction("publish", {
					title: e,
					type: this.recording.type,
					length: this.recording.length,
					data: this.recording.data,
					tiles: this.recording.tiles,
					"public": gui.getDom("checkboxpublishpublic").checked,
					inprofile: gui.getDom("checkboxpublishprofile").checked,
					showattop: gui.getDom("checkboxpublishshowattop").checked
				})
			},
			showStory: function(e, t, n) {
				this.displayedstory = e, t && this.game.client && this.game.client.sendStoryAction("get", {
					id: e.id,
					target: "story"
				}), t && (this.displayedstroyfromlist = n);
				var r = this.game.menu.showPopUp({
						title: e.title + " (" + e.id + ")",
						hideclosebutton: !0,
						popupType: "story"
					}),
					i = this;
				if (e.data && e.data.length > 0) {
					var s = this.getStoryHTML("storycanvas", 0, 10);
					s += '<label style="position:absolute;left:420px;top:10px;right:10px;">' + translate("Title:") + "</label>\n", s += '<input type="text" id="editstorytitle" name="editstorytitle" style="position:absolute;left:420px;top:50px;right:10px;height:32px;" value="' + e.title + '">\n', e["type"] == "game" && (s += '<div style="position:absolute;left:420px;top:100px;right:10px;height:40px;">â° ' + e.length + "s</div>");
					var o = [{
						id: "public",
						name: "Public",
						checked: e["public"]
					}, {
						id: "profile",
						name: "Profile",
						checked: e.inprofile
					}, {
						id: "news",
						name: "News",
						checked: e["location"] == "news"
					}, {
						id: "guide",
						name: "Guide",
						checked: e["location"] == "guide"
					}, {
						id: "showattop",
						name: "At top",
						checked: e.showattop
					}];
					for (var u in o) {
						var a = o[u];
						if (!e["can" + a.id]) continue;
						s += '<label style="position:absolute; left:420px; top:' + (150 + 35 * u) + 'px; right: 10px;"><input type="checkbox"' + ' id="checkboxstory' + a.id + '" name="checkboxstory' + a.id + '" ' + (a.checked ? " checked" : "") + ">" + translate(a.name) + "</label>\n"
					}
					r.innerHTML = s;
					if (e["type"] == "game" && this.game.app.config.enablesharebutton) {
						var f = this.game.menu.createButton("", {
							x: 315,
							y: 365,
							w: 38,
							h: 38
						}, function(e) {
							i.shareStoryFaceBook(i.displayedstory.hash)
						});
						f.style.backgroundColor = "transparent", f.style.backgroundImage = "url(../files/gui/bbuilder_share_facebook.png)", f.style.backgroundSize = "contain", f.style.border = "none", r.appendChild(f), f = this.game.menu.createButton("", {
							x: 355,
							y: 365,
							w: 38,
							h: 38
						}, function(e) {
							i.shareStoryTwitter(i.displayedstory.hash, i.displayedstory.title)
						}), f.style.backgroundColor = "transparent", f.style.backgroundImage = "url(../files/gui/bbuilder_share_twitter.png)", f.style.backgroundSize = "contain", f.style.border = "none", r.appendChild(f)
					}
					if (e["type"] == "game" && e.data && this.game.player && this.game.player.isGameAdmin()) {
						var l = this.game.menu.createButton("ðŸ—’ ", {
							x: 275,
							y: 365,
							w: 38,
							h: 38
						}, function(e) {
							i.showStoryWaypoints(i.displayedstory.data)
						});
						r.appendChild(l)
					}
					for (var u in o) {
						var a = o[u],
							c = gui.getDom("checkboxstory" + a.id);
						c && (c.onchange = function(e) {
							i.onStoryCheckbox(e.target)
						})
					}
					gui.getDom("editstorytitle").onkeydown = function(e) {
						e.which == 13 && gui.blur("editstorytitle")
					}, gui.getDom("editstorytitle").onblur = function(e) {
						i.updateStoryTitle()
					}, this.drawStoryInCanvas("storycanvas", null, e)
				} else r.innerHTML = "<i>Loading...</i>";
				e.candelete && r.appendChild(this.createButton("Delete", {
					x: 449,
					bottom: 5,
					w: 200,
					h: 40
				}, function(e) {
					i.game.menu.closePopUpNow(), i.showConfirmDeleteStory()
				})), this.displayedstroyfromlist ? this.game.menu.addBackButton(r, "Go back to the playlist", function() {
					i.game.menu.closePopUpNow(), i.showStoryPlayList(i.playlist)
				}) : this.game.menu.addBackButton(r, "Go back to story list", function() {
					i.game.menu.closePopUpNow(), i.showStoryMenu()
				})
			},
			shareStoryFaceBook: function(e) {
				var t = this.game.app.config.storyshareurl + e;
				if (this.game.shop.hasExternInterfaceVersion(2.7) && Config_Extern.platform != "web") {
					this.game.shop.shareFacebook(t);
					return
				}
				if (typeof FB == "undefined") {
					var n = "https://www.facebook.com/dialog/share?app_id=1202613603185807&href=" + encodeURIComponent(t);
					this.game.shop.showURL(n, "inside");
					return
				}
				FB.ui({
					method: "feed",
					link: t
				}, function(e) {
					window.console && console.log("facebook share:", e)
				})
			},
			shareStoryTwitter: function(e, t) {
				var n = this.game.app.config.storyshareurl + e,
					r = "https://twitter.com/intent/tweet?text=" + encodeURIComponent(t) + "&via=" + this.game.app.config.twitteraccount + "&hashtags=" + this.game.app.config.twitterhashtags + "&url=" + encodeURIComponent(n);
				this.game.shop.showURL(r, "inside")
			},
			showPublishedStoryShare: function(e) {
				var t = this.game.menu.showPopUp({
						title: "Share Story Video",
						popupType: "sharepublishedstory",
						width: 440,
						height: 240
					}),
					n = "<center>" + translate("Your story has been published! Story-ID: %d", [e.id]) + "</center>";
				t.innerHTML = n;
				var r = this;
				t.appendChild(this.game.menu.createButton("Share on Facebook", {
					x: 102,
					y: 75,
					w: 300,
					h: 45
				}, function(t) {
					r.shareStoryFaceBook(e.hash)
				})), t.appendChild(this.game.menu.createButton("Twitter", {
					x: 102,
					y: 135,
					w: 300,
					h: 45
				}, function(t) {
					r.shareStoryTwitter(e.hash, e.title)
				})), t.appendChild(this.game.menu.createButton("Show My Stories", {
					x: 102,
					y: 195,
					w: 300,
					h: 45
				}, function(e) {
					r.closePopUpNow(), r.showStoryMenu({
						forceload: !0,
						offset: 0
					})
				}))
			},
			showStoryWaypoints: function(e) {
				if (!e || e.length <= 0) return;
				var t = JSON.parse(JSON.stringify(e));
				for (var n in t) delete t[n].objects;
				var r = this.game.menu.showResizableWindow({
					title: "Waypoints"
				});
				r.innerHTML = '<form id="editwaypointsform" name="editwaypointsform" style="width:100%;height:100%;">\n<textarea id="editwaypointsscript" name="editwaypointsscript" type="text" style="width:100%;height:100%;font-size:17px;" class="scrollable">' + JSON.stringify(t).replace(/},{/g, "},\n  {").replace("[{", "[\n  {").replace("}]", "}\n]") + "</textarea>\n" + "</form>" + '<label style="position:absolute; left:175px; bottom:-30px; pointer-events:none; color:white;">or copy to Tiled and scripts</label>';
				var i = this,
					s = this.createButton("Add as NPC", {
						x: 5,
						y: 360,
						w: 160,
						h: 26
					}, function(e) {
						i.addWaypointsAsNPC(t), gui.remove(r.parentNode)
					});
				s.style.top = "initial", s.style.bottom = "-33px", r.appendChild(s)
			},
			addWaypointsAsNPC: function() {
				var e = document.editwaypointsform.editwaypointsscript.value.trim(),
					t = {
						script: "function onCreated() {\n    this.waypoints = " + e + ";\n}\n"
					};
				this.game.client && this.game.client.sendAddNPC(t), this.game.menu.closePopUpNow()
			},
			updateStoryTitle: function() {
				if (!this.displayedstory || !this.game.client) return;
				var e = gui.getDom("editstorytitle").value.trim();
				e != this.displayedstory["title"] && (this.displayedstory.title = e, this.game.client.sendStoryAction("settitle", {
					id: this.displayedstory.id,
					title: e
				}), gui.setChildHTML("newpopup", "div.titletext", this.displayedstory.title + " (" + this.displayedstory.id + ")"))
			},
			showProfileStory: function(e) {
				var t = gui.getDom("profilecharacter");
				if (!t) return;
				t.style.cssText = " position:absolute;left:164px;top:35px;", t.innerHTML = '<canvas id="profilecanvas" width=160 height=160 style="width:320px;height:320px;"></canvas>';
				var n = this.drawStoryInCanvas("profilecanvas", null, e);
				n && (n.isDrawingNames = function() {
					return !1
				})
			},
			showPMStory: function(e) {
				var t = this.game.menu.displaypm;
				if (t && t.data && e && e.data && e.data.length >= 1)
					for (var n in t.data) e.data[0][n] = t.data[n];
				this.drawStoryInCanvas("pmstorycanvas", null, e), t && t.type != "invitation" && t.senderlook.name == "Server" && gui.setChildHTML("newpopup", "div.titletext", e.title)
			},
			showMinimapStory: function(e) {
				if (this.game.minimap.showingStory) return;
				this.game.minimap.onStoryStarted(e), this.drawStoryInCanvas("minimapcanvas", null, e)
			},
			getStoryHTML: function(e, t, n) {
				var r = "";
				return r += '<div id="' + e + 'container" class="storycanvas" style="display:inline-block; overflow:hidden; ' + "position:absolute;left:" + t + "px;top:" + n + 'px;width:400px;height:400px;">', r += '  <canvas id="' + e + 'back" style="width:500px;height:500px;" width=320 height=320></canvas>', r += '  <div id="' + e + 'embed" style="width:100%; height:100%;"></div>', r += "</div>", r += '<canvas id="' + e + '" style="position:absolute;' + "left:" + (t + 4) + "px;top:" + (n + 4) + 'px;width:400px;height:400px;" width=256 height=256></canvas>', r += '<img id="' + e + 'logo" src="../files/gui/bbuilder_logosingle.png" style="position:absolute;left:' + (t + 10) + "px;top:" + (n + 350) + 'px;" height=40>', r
			},
			getYoutubeStoryHTML: function(e, t) {
				if (!this.game.app.config.story || !t) return "";
				var n = this.game.app.config.story[e + "link"];
				return n ? translate(n, [t]) : ""
			},
			onStoryCheckbox: function(e) {
				if (!this.displayedstory || !this.game.client) return;
				switch (e.name) {
					case "checkboxstorypublic":
						this.game.client.sendStoryAction("setpublic", {
							id: this.displayedstory.id,
							"public": e.checked
						});
						break;
					case "checkboxstoryprofile":
						this.game.client.sendStoryAction("showinprofile", {
							id: this.displayedstory.id,
							inprofile: e.checked
						});
						break;
					case "checkboxstorynews":
						this.game.client.sendStoryAction("setlocation", {
							id: this.displayedstory.id,
							location: e.checked ? "news" : "profile"
						}), e.checked && (gui.getDom("checkboxstoryguide").checked = !1);
						break;
					case "checkboxstoryguide":
						this.game.client.sendStoryAction("setlocation", {
							id: this.displayedstory.id,
							location: e.checked ? "guide" : "profile"
						}), e.checked && (gui.getDom("checkboxstorynews").checked = !1);
						break;
					case "checkboxstoryshowattop":
						this.game.client.sendStoryAction("setshowattop", {
							id: this.displayedstory.id,
							showattop: e.checked
						})
				}
			},
			showConfirmDeleteStory: function() {
				var e = this.showPopUp({
					title: "Delete Story",
					hideclosebutton: !0,
					popupType: "deletestory"
				});
				e.innerHTML = '<div style="font-size:24px"><br><br><center>' + translate("Do you really want to delete the story '%s'?", [this.displayedstory.title]) + "</center><div>";
				var t = this;
				e.appendChild(this.createButton("Delete", {
					x: 232,
					y: 280,
					w: 200,
					h: 40
				}, function(e) {
					t.game.menu.closePopUpNow(), t.deleteStory()
				})), this.game.menu.addBackButton(e, "Go back to the story", function() {
					t.game.menu.closePopUpNow(), t.showStory(t.displayedstory, !1)
				})
			},
			deleteStory: function() {
				this.displayedstory && this.game.client && this.game.client.sendStoryAction("delete", {
					id: this.displayedstory.id,
					sendlist: !0
				})
			},
			drawStoryInCanvas: function(e, t, n) {
				var r = gui.getDom(e),
					i = gui.getDom(e + "back"),
					s = gui.getDom(e + "embed"),
					o = gui.getDom(e + "logo");
				if (n && n["type"] != "game" && n.data && n.data.length > 0) {
					r && (r.style.display = "none"), i && (i.style.display = "none"), o && (o.style.display = "none"), s && (s.style.display = "block", s.innerHTML = this.getYoutubeStoryHTML(n.type, n.data[0][n.type]));
					return
				}
				s && (s.style.display = "none", s.innerHTML = "");
				if (!r) return null;
				r.style.display = "block", o && (o.style.display = "block"), i && (i.style.display = "block");
				var u = this.setupGameEnvironmentForStory(n, r, i),
					a = this.updateStoryInCanvas(n, u);
				return t ? this.addStoryCharacterClickDir(u.player, t) : a && r && !this.game.minimap.canvas && this.addStoryPauseClick(a, r), u
			},
			stopDrawStoryInCanvas: function(e) {
				e.renderer.canvas = null, e.renderer.backcanvas = null
			},
			setupGameEnvironmentForStory: function(t, r, i) {
				var s = {
					app: {
						config: this.game.app.config
					},
					currentTime: (new Date).getTime(),
					gameVisible: !0,
					sounds: this.game.sounds,
					entities: {},
					fps: this.game.fps,
					mapmanager: {
						drawTiles: function() {
							this.currentmap.drawTiles()
						},
						getTimeHash: function() {
							return 1
						},
						isHalfTile: function() {
							return !1
						}
					},
					isDrawingNames: function() {
						return !0
					},
					getClanFromName: this.game.getClanFromName,
					forEachVisibleEntityByDepth: this.game.forEachVisibleEntityByDepth
				};
				return s.renderer = new n(s, r, i, !1), s.animationmanager = new e(s), this.setupPlayerForStory(t, s), this.setupObjectsForStory(t, s), this.setupTilesForStory(t, s), s.renderer.zoom = gui.getWidth(r) / r.width, s.renderer.rescale(), s
			},
			setupTilesForStory: function(e, t) {
				if (!t.renderer.backcanvas) return;
				if (!e.tiles || typeof e["tiles"] != "object" || !("header" in e.tiles)) {
					var n = t.renderer.context.backcontext;
					n && n.clearRect(0, 0, n.canvas.width, n.canvas.height);
					return
				}
				var i = new r(t, e.map, e.template);
				i.addStreamData(e.tiles), t.mapmanager.currentmap = i, i.isHouseInside = function() {
					return !0
				}
			},
			setupObjectsForStory: function(e, t) {
				var n = e.data[0];
				if (!("objects" in n) || n.objects.length <= 0) return;
				for (var r in n.objects) {
					var s = n.objects[r];
					entity = new i(s.id), entity.game = t, entity.setExtendedData(s), entity.setGridPosition(s.x, s.y), entity.idle(), t.entities[s.id] = entity
				}
			},
			setupPlayerForStory: function(e, n) {
				var r = e.data[0],
					i = new t(1, Types.Entities.GENERAL);
				i.game = n, n.player = i, r && "x" in r && "y" in r ? i.setGridPosition(r.x, r.y) : i.setGridPosition(n.renderer.canvas.width / 2 / n.renderer.tilesize, n.renderer.canvas.height / 2 / n.renderer.tilesize), this.copyPlayAttrFromWaypoint(i, r, !0)
			},
			copyPlayAttrFromWaypoint: function(e, t, n) {
				var r = ["name", "head", "armor", "hat", "dir", "angle", "zoom", "chat", "weapon", "weaponimage", "bow", "bowimage", "mount", "sidekick", "arg1", "arg2", "arg3", "arg4", "arg5", "arg6", "arg7", "arg8", "arg9"];
				for (var i in r) {
					var s = r[i];
					t[s] && (e[s] = t[s])
				}
				n && ("x" in t || "y" in t) && e.setGridPosition("x" in t ? t.x : e.gridX, "y" in t ? t.y : e.gridY), "ani" in t && e.animate(t.ani)
			},
			updateStoryInCanvas: function(e, t) {
				var n = {
						target: e.target,
						points: e.data,
						currentPoint: 0,
						currentPointFrame: 1,
						speed: e.data[0].speed ? parseFloat(e.data[0].speed) : 5
					},
					r = this,
					i = setInterval(function() {
						if (!t.renderer.canvas || t.renderer.canvas.getBoundingClientRect().width <= 0) {
							clearInterval(i);
							return
						}
						t.currentTime = (new Date).getTime(), t.renderer.backcanvas && t.renderer.updateTiles(), t.renderer.camera.lookAt(t.player), t.renderer.context.setupForRender(), t.renderer.backcanvas && t.renderer.drawEntities(), t.player.prepareDrawAnimation(), t.player.drawName();
						if (t.player.currentAnimation) {
							var e;
							t.player.zoom && t.player.zoom != 1 && (e = t.renderer.context.setupObjectZoom(t.player.x + t.renderer.tilesize / 2, t.player.y + t.renderer.tilesize - 4, t.player.zoom)), t.player.currentAnimation.drawAnimation(t.player, t.player.animationInfo), n.paused || t.player.onAnimate(), e && t.renderer.context.restoreZoom(e)
						}
						t.player.chat && t.player.drawChat(), t.renderer.context.cleanUpRender(), r.moveToNextWaypoint(n, t)
					}, 1e3 / this.game.fps);
				return n
			},
			moveToNextWaypoint: function(e, t) {
				if (!e) return;
				if (e.paused) return;
				var n = e.points[e.currentPoint];
				if ("x" in n || "y" in n) {
					var r = {
							x: "x" in n ? n.x - t.player.gridX : 0,
							y: "y" in n ? n.y - t.player.gridY : 0
						},
						i = Math.sqrt(r.x * r.x + r.y * r.y);
					if (i >= 1 / 64) {
						var s = Math.min(1 / this.game.fps * e.speed, i);
						t.player.setGridPosition(t.player.gridX + r.x * s / i, t.player.gridY + r.y * s / i);
						return
					}
				}
				if ("pause" in n) {
					var o = Math.min(n.pause, 5);
					o < 2 && this.game.menu.getCurrentMenu() == "playlist" && e.currentPoint == e.points.length - 1 && (o = 2);
					if (e.currentPointFrame / this.game.fps < o) {
						e.currentPointFrame++;
						return
					}
				}
				if (e.currentPoint < e.points.length - 1) e.currentPoint++;
				else {
					if (this.game.menu.getCurrentMenu() == "playlist" && this.switchToNextNewsStory()) {
						e.paused = !0;
						return
					}
					if (e.target == "minimap") {
						t.renderer.canvas = null, this.game.minimap.onStoryFinished();
						return
					}
					e.currentPoint = 0
				}
				e.currentPointFrame = 1, n = e.points[e.currentPoint], this.copyPlayAttrFromWaypoint(t.player, n, e.currentPoint == 0), "speed" in n && (e.speed = n.speed), "sound" in n && this.game.sounds.play(n.sound)
			},
			addStoryCharacterClickDir: function(e, t) {
				gui.setClick(t, function(t, n, r) {
					var i = n - 170,
						s = r - 170,
						o = Math.abs(i) > Math.abs(s) ? i > 0 ? Types.Orientations.RIGHT : Types.Orientations.LEFT : s > 0 ? Types.Orientations.DOWN : Types.Orientations.UP;
					e.dir = o
				})
			},
			addStoryPauseClick: function(e, t) {
				var n = this;
				gui.setClick(t, function() {
					e.paused = !e.paused
				})
			},
			handleStoryAction: function(e, t) {
				switch (e) {
					case "stories":
						this.showStoryMenu({
							stories: t
						});
						break;
					case "story":
						var n = t.target ? t.target : this.game.menu.getCurrentMenu();
						switch (n) {
							case "playerprofile":
								this.showProfileStory(t);
								break;
							case "playlist":
								this.showPlayListStory(t);
								break;
							case "story":
								this.showStory(t, !1);
								break;
							case "pm":
								this.showPMStory(t);
								break;
							case "minimap":
								this.showMinimapStory(t)
						}
						break;
					case "published":
						this.game.app.config.enablesharebutton && t && "hash" in t && t["type"] == "game" ? this.showPublishedStoryShare(t) : this.showStoryMenu({
							forceload: !0,
							offset: 0
						});
						break;
					case "locationstories":
						this.showStoryPlayList(t, null)
				}
			}
		});
		return s
	}), define("tradingmanager", [], function() {
		var e = Class.extend({
			init: function(e) {
				this.game = e, this.trademenus = ["trade", "searchitem", "itemsearchresult", "changetradecoins", "changetradeitem"], this.inventorymenus = ["inventory", "category"]
			},
			handleTradeAction: function(e, t) {
				switch (e) {
					case "starttrade":
						this.lastTradeUpdate = this.game.currentTime, delete this.game.menu.inventoryitems, this.showTradeMenu(t);
						break;
					case "stoptrade":
						if (!this.tradeinfo) return;
						this.tradeinfo = null, this.trademenus.indexOf(this.game.menu.getCurrentMenu()) >= 0 && this.game.menu.closePopUp();
						break;
					case "items":
						if (!this.tradeinfo) return;
						this.lastTradeUpdate = this.game.currentTime, this.tradeinfo.mode = t.mode, this.tradeinfo.items = t.items, this.tradeinfo.coins = t.coins, this.tradeinfo.otheritems = t.otheritems, this.tradeinfo.othercoins = t.othercoins, this.tradeinfo.chat = t.chat, this.showTradeMenu(this.tradeinfo);
						break;
					case "chat":
						if (!this.tradeinfo) return;
						this.tradeinfo.chat = this.tradeinfo.chat ? this.tradeinfo.chat + t.text : t.text, gui.appendAndScroll("tradechattext", t.text, !0);
						break;
					case "history":
						this.showTradeHistory(t.trades, !1, t.offset);
						break;
					case "adminhistory":
						t["userid"] == this.game.menu.playerprofiledata["userid"] && this.showTradeHistory(t.trades, !1, t.offset, !0)
				}
			},
			showTradeMenu: function(e) {
				this.tradeinfo = e;
				if (!this.tradeinfo) return;
				this.game.menu.closePopUpNow("trade");
				var t = this.game.menu.showPopUp({
						title: translate("Trade with %s", [this.tradeinfo.name]),
						popupType: "trade"
					}),
					n = [];
				for (var r in this.tradeinfo.otheritems) n.push(this.getTradeItemForMenu(this.tradeinfo.otheritems[r], !1));
				this.tradeinfo.othercoins && this.tradeinfo["othercoins"] != 0 && n.push(this.getTradeItemForMenu({
					image: "bbuilder_coin_big.png",
					name: "Coins",
					nr: this.tradeinfo.othercoins,
					itemid: "coins"
				}, !1));
				var i = this.game.menu.createMenuContainer(t, {
					x: 0,
					y: -4,
					w: 500,
					h: 200
				});
				n.length < 6 && (i.innerHTML = '<div class="tradeplayername">' + translate("Items of %s", [this.tradeinfo.name]) + "</div>"), this.game.menu.addMenuItemsToDialog(i, n);
				var s = [];
				for (var r in this.tradeinfo.items) s.push(this.getTradeItemForMenu(this.tradeinfo.items[r], !0));
				this.tradeinfo.coins && this.tradeinfo["coins"] != 0 && s.push(this.getTradeItemForMenu({
					image: "bbuilder_coin_big.png",
					name: "Coins",
					nr: this.tradeinfo.coins,
					itemid: "coins"
				}, !0)), i = this.game.menu.createMenuContainer(t, {
					x: 0,
					y: 200,
					w: 500,
					h: 200
				}), s.length < 6 && (i.innerHTML = '<div class="tradeplayername">' + translate("Your items") + "</div>"), this.game.menu.addMenuItemsToDialog(i, s);
				var o = gui.getHeight(t),
					u = this.game.app.config.enablenewgui;
				i = this.game.menu.createMenuContainer(t, {
					x: 500,
					y: 0,
					w: 140,
					h: o - (u ? 32 : 18) - 120 - 15
				}), i.id = "tradechat", i.innerHTML = '<div id="tradechattext"></div><div id="tradechatinputcontainer">    <input id="tradechatinput" type="text" placeholder="Chat"></div>', gui.appendAndScroll("tradechattext", this.tradeinfo.chat, !1);
				var a = this;
				gui.getDom("tradechatinput").onkeydown = function(e) {
					if (e.which == 13) {
						e.preventDefault();
						var t = this.value.trim();
						this.value = "", a.game && a.game.client && t.length > 0 && a.game.client.sendTradeAction("chat", {
							text: t
						})
					}
				}, i = this.game.menu.createMenuContainer(t, {
					x: 500,
					y: o - (u ? 32 : 18) - 120,
					w: 140,
					h: 120
				}), i.id = "tradebuttons";
				switch (this.tradeinfo.mode) {
					case "askconfirm":
						i.appendChild(this.game.menu.createButton("Confirm Trade", {
							x: 0,
							y: 80,
							w: 140,
							h: 40
						}, function(e) {
							a.sendConfirmTrade()
						}));
						break;
					case "waitconfirm":
						i.innerHTML = "<i>" + translate("Waiting for other side to confirm...") + "</i>";
						break;
					case "additems":
						if (s.length < 8) {
							var f = [{
								help: "Add Item",
								image: "bbuilder_newbutton_additem.png",
								cssclass: "tradebutton",
								callback: function(e) {
									a.game.menu.closePopUpNow("searchitem"), a.game.menu.showSearchItem(!0)
								}
							}, {
								help: "Add Coins",
								image: "bbuilder_newbutton_buycoins.png",
								cssclass: "tradebutton",
								callback: function(e) {
									a.game.menu.closePopUpNow("changetradecoins"), a.showChangeTradeCoins()
								}
							}];
							this.game.menu.addMenuItemsToDialog(i, f)
						}
						i.appendChild(this.game.menu.createButton("Finish Trade", {
							x: 0,
							y: 80,
							w: 140,
							h: 40
						}, function(e) {
							a.sendFinishTrade()
						}))
				}
			},
			getTradeItemForMenu: function(e, t) {
				e = JSON.parse(JSON.stringify(e)), this.game.menu.prepareItemAttributes(e), e.cssclass = "tradeitem", e.text = e.help = (e.nr && e.nr > 1 ? e.nr + " x " : "") + e.name;
				if (t) {
					e.badgeicon = "../files/gui/bbuilder_settingsbadge.png";
					var n = this;
					e.callback = function(t) {
						n.showChangeTradeItem(e, !1)
					}
				}
				return e
			},
			showChangeTradeCoins: function() {
				var e = this.game.menu.showPopUp({
						title: "Add or Remove Coins",
						hideclosebutton: !0,
						popupType: "changetradecoins"
					}),
					t = this;
				e.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Change the amount of coins you want to give away!") + "</center><br><br>\n" + '<center><form id="changecoinsform" name="changecoinsform" style="width:100%;">\n' + translate("Coins:") + ' <input type="number" id="changecointsamount" name="changecoinsamount" style="width:360px; height:32px;" value="' + this.tradeinfo.coins + '">\n' + '<input type="submit" value="' + translate("Update") + '" class="inputbutton"></center>\n' + "</form><div>";
				var n = gui.getDom("changecoinsform");
				n.onsubmit = function(e) {
					return t.updateTradeCoins(), !1
				}, this.game.menu.addBackButton(e, "Go back to trading", function(e) {
					t.game.menu.closePopUpNow("trade"), t.showTradeMenu(t.tradeinfo)
				}), gui.focus("changecointsamount")
			},
			updateTradeCoins: function() {
				var e = parseInt(document.changecoinsform.changecointsamount.value.trim());
				if (e < 0) return;
				var t = this.tradeinfo.coins ? this.tradeinfo.coins : 0;
				this.game.client && e != t && this.game.client.sendTradeAction("additem", {
					itemid: "coins",
					nr: e - t
				}), this.game.menu.closePopUpNow("trade"), this.showTradeMenu(this.tradeinfo)
			},
			showChangeTradeItem: function(e, t) {
				this.game.menu.closePopUpNow("changetradeitem");
				var n = this.game.menu.showPopUp({
						title: "Add or Remove Item",
						hideclosebutton: !0,
						popupType: "changetradeitem"
					}),
					r = this;
				n.innerHTML = '<div style="font-size:24px"><br><center>' + translate("Change how many of '%s' you want to give away!", [e.name]) + "</center><br><br>\n" + '<center><form id="changeitemform" name="changeitemform" style="width:100%;">\n' + translate("Nr.:") + ' <input type="number" id="changeitemamount" name="changeitemamount" style="width:360px; height:32px;" value="' + e.nr + '">\n' + '<input type="submit" value="' + translate("Update") + '" class="inputbutton"></center>\n' + "</form><div>";
				var i = gui.getDom("changeitemform");
				i.onsubmit = function(n) {
					return r.updateTradeItem(e, t), !1
				}, n.appendChild(this.game.menu.createButton("Delete", {
					x: 180,
					y: 200,
					w: 195,
					h: 40
				}, function(n) {
					r.deleteTradeItem(e, t)
				})), this.game.menu.addBackButton(n, "Go back to trading", function(e) {
					r.game.menu.closePopUpNow("trade"), r.showTradeMenu(r.tradeinfo)
				})
			},
			updateTradeItem: function(e, t) {
				var n = parseInt(document.changeitemform.changeitemamount.value.trim());
				if (n < 0) return;
				var r = !t && e.nr ? e.nr : 0;
				this.game.client && n != r && this.game.client.sendTradeAction("additem", {
					itemid: e.itemid,
					nr: n - r
				}), this.game.menu.closePopUpNow("trade"), this.showTradeMenu(this.tradeinfo)
			},
			addTradeItem: function(e, t) {
				this.game.client && this.game.client.sendTradeAction("additem", {
					itemid: e,
					nr: t
				}), this.showTradeMenu(this.tradeinfo)
			},
			deleteTradeItem: function(e, t) {
				!t && this.game.client && this.game.client.sendTradeAction("additem", {
					itemid: e.itemid,
					nr: e.nr ? -e.nr : -1
				}), this.game.menu.closePopUpNow("trade"), this.showTradeMenu(this.tradeinfo)
			},
			sendFinishTrade: function() {
				if (!(this.tradeinfo.items && this.tradeinfo.items.length > 0) && !(this.tradeinfo.coins && this.tradeinfo.coins > 0) && !(this.tradeinfo.otheritems && this.tradeinfo.otheritems.length > 0) && !(this.tradeinfo.othercoins && this.tradeinfo.othercoins > 0)) {
					gui.alert(translate("Add some items first!"));
					return
				}
				if (!this.lastTradeUpdate || this.game.currentTime < this.lastTradeUpdate + 5e3) {
					gui.alert(translate("Wait a little bit before finishing!"));
					return
				}
				this.game.client && this.game.client.sendTradeAction("finishtrade", {
					state: this.tradeinfo
				}), gui.setHTML("tradebuttons", translate("Waiting for other side to confirm..."))
			},
			sendConfirmTrade: function() {
				if (!this.lastTradeUpdate || this.game.currentTime < this.lastTradeUpdate + 1e4) {
					gui.alert(translate("Wait a little bit before confirming!"));
					return
				}
				this.game.client && this.game.client.sendTradeAction("confirmtrade", {
					state: this.tradeinfo
				}), gui.setHTML("tradebuttons", translate("Confirming trade..."))
			},
			checkStopTradeOnMenuClose: function(e) {
				this.tradeinfo && this.trademenus.indexOf(this.game.menu.getCurrentMenu()) >= 0 && this.trademenus.indexOf(e) < 0 && (this.tradeinfo = null, this.game.client && this.game.client.sendTradeAction("stoptrade", {})), this.game.player && this.game.player.canSetAnimation() && (this.game.menu.getCurrentMenu() == "map" && e != "map" && this.game.player._stopAndAnimate("map_close"), this.game.app.config.enablebackpackani && this.inventorymenus.indexOf(this.game.menu.getCurrentMenu()) >= 0 && this.inventorymenus.indexOf(e) < 0 && this.game.player._stopAndAnimate("backpack_close"))
			},
			showTradeHistory: function(e, t, n, r) {
				var i = 24;
				e ? this.tradehistory = e : (!this.tradehistory || t) && this.game.client && (r ? this.game.client.sendTradeAction("adminhistory", {
					userid: this.game.menu.playerprofiledata.userid,
					offset: n,
					limit: i + 1
				}) : this.game.client.sendTradeAction("loadhistory", {
					offset: n,
					limit: i + 1
				})), this.tradehistoryOffset = n, this.tradehistoryIsAdmin = r;
				var s = this.game.menu.showPopUp({
					title: "Trade History" + (r ? " of " + this.game.menu.playerprofiledata.name : ""),
					popupType: "tradehistory",
					hideclosebutton: !0
				});
				if (this.tradehistory && this.tradehistory.length > 0) {
					var o = [];
					for (var u = 0; u < i && u < this.tradehistory.length; u++) o.push(this.getTradeHistoryMenuItem(this.tradehistory[u]));
					this.game.menu.addMenuItemsToDialog(s, o)
				} else this.tradehistory && n == 0 && (s.innerHTML = '<div style="font-size:24px"><br><br><center>' + (r ? translate("There are no trades yet.") : translate("There are no trades yet. Tap on players and invite them to trades!")) + "<br><div>");
				var a = this;
				n > 0 && s.parentNode.appendChild(this.game.menu.createButton("Prev", this.game.menu.getPrevButtonPosition(), function(e) {
					a.showTradeHistory(null, !0, n - i, r)
				})), this.tradehistory && this.tradehistory.length > i && s.parentNode.appendChild(this.game.menu.createButton("Next", this.game.menu.getNextButtonPosition(), function(e) {
					a.showTradeHistory(null, !0, n + i, r)
				})), r ? a.game.menu.addAdminActionsBackButton(s) : this.game.menu.addBackButton(s, "Go back to items", function(e) {
					a.game.menu.closePopUpNow("inventory"), a.game.menu.showInventory(!1, a.game.menu.inventoryfromgame)
				})
			},
			getTradeHistoryMenuItem: function(e) {
				var t = e.otherlook.name.substring(0, 25),
					n = t.indexOf("(");
				n >= 0 && (t = t.substring(0, n).trim());
				var r = this;
				return {
					text: e.time.substr(0, 10) + ":<br>" + t,
					itemtype: "head",
					head: this.game.animationmanager.expandGameFilename("head", e.otherlook.head),
					hat: this.game.animationmanager.expandGameFilename("hat", e.otherlook.hat),
					cssclass: "tradehistoryitem",
					help: translate("View Trade with %s!", [t]),
					callback: function(t) {
						r.game.menu.closePopUpNow("tradedetails"), r.showTradeDetails(e)
					}
				}
			},
			showTradeDetails: function(e) {
				var t = translate("Trade with %s", [e.otherlook.name]);
				this.game.player && this.game.player.isGameAdmin() && "otherid" in e && (t += " (" + e.otherid + ")");
				var n = this.game.menu.showPopUp({
						title: t,
						popupType: "tradedetails",
						hideclosebutton: !0
					}),
					r = [];
				for (var i in e.otheritems) r.push(this.getTradeItemForMenu(e.otheritems[i], !1));
				e.othercoins && e["othercoins"] != 0 && r.push(this.getTradeItemForMenu({
					image: "bbuilder_coin_big.png",
					name: "Coins",
					nr: e.othercoins,
					itemid: "coins"
				}, !1));
				var s = this.game.menu.createMenuContainer(n, {
					x: 0,
					y: -4,
					w: 664,
					h: 200
				});
				s.innerHTML = '<div class="tradeplayername">' + translate("Items of %s", [e.otherlook.name]) + "</div>", this.game.menu.addMenuItemsToDialog(s, r), r = [];
				for (var i in e.items) r.push(this.getTradeItemForMenu(e.items[i], !1));
				e.coins && e["coins"] != 0 && r.push(this.getTradeItemForMenu({
					image: "bbuilder_coin_big.png",
					name: "Coins",
					nr: e.coins,
					itemid: "coins"
				}, !1)), s = this.game.menu.createMenuContainer(n, {
					x: 0,
					y: 200,
					w: 664,
					h: 200
				}), s.innerHTML = '<div class="tradeplayername">' + (this.tradehistoryIsAdmin ? translate("Items of %s", [this.game.menu.playerprofiledata.name]) : translate("Your items")) + "</div>", this.game.menu.addMenuItemsToDialog(s, r);
				var o = this;
				this.game.menu.addBackButton(n, "Go back to trades", function(e) {
					o.game.menu.closePopUpNow("tradehistory"), o.showTradeHistory(null, !1, o.tradehistoryOffset, o.tradehistoryIsAdmin)
				})
			}
		});
		return e
	}), define("minimap", ["player", "newnpc", "newmap"], function(e, t, n) {
		var r = Class.extend({
			init: function(e, t, n) {
				this.game = e, this.showingStory = null, this.context = t && t.getContext ? t.getContext("2d") : null, this.canvas = t, this.winnercontext = n && n.getContext ? n.getContext("2d") : null, this.winnercanvas = n, this.area = this.game.app.config.minimaparea, this.context.font = "bold 14px Verdana", this.context.textAlign = "center", this.context.fillStyle = "#FFFFFF", this.context.strokeStyle = "#373737", this.context.lineWidth = 5, this.playericon = this.createGUIImage("bbuilder_playericon.png"), this.houseicon = this.createGUIImage("bbuilder_icon_house_small.png"), this.shoparrow_weapons = this.createGUIImage("bbuilder_shoparrow_weapons.png"), this.shoparrow_heads = this.createGUIImage("bbuilder_shoparrow_heads.png"), this.shoparrow_hats = this.createGUIImage("bbuilder_shoparrow_hats.png"), this.shoparrow_furniture = this.createGUIImage("bbuilder_shoparrow_furniture.png"), this.maparrow = this.createGUIImage("bbuilder_maparrow.png")
			},
			createGUIImage: function(e) {
				var t = new Image;
				return t.src = "../files/gui/" + e, t
			},
			getWidth: function() {
				return this.canvas.width
			},
			getHeight: function() {
				return this.canvas.height
			},
			clear: function() {
				this.context.clearRect(0, 0, this.getWidth(), this.getHeight())
			},
			_drawPlayerCount: function(e, t) {
				var n = this.game.getPlayerCountClock(e, t),
					r = Math.floor(this.getWidth() / 2),
					i = 23;
				this.context.strokeText(n, r, i + .5), this.context.fillText(n, r, i)
			},
			_mapPosition: function(e) {
				var t = this.getWidth(),
					n = this.getHeight(),
					r = {
						x: Math.max(8, Math.min((e.x - this.area.x) * t / this.area.w, t - 8)),
						y: Math.max(8, Math.min((e.y - this.area.y) * n / this.area.h, n - 8))
					};
				return r
			},
			_drawPlayerDots: function(e) {
				for (var t in e) {
					var n = this._mapPosition(e[t]);
					n && this.context.drawImage(this.playericon, Math.floor(n.x - 7), Math.floor(n.y - 7))
				}
				if (this.game.player) {
					var r = this.game.mapmanager.currentmap,
						i = r && r.mapname == this.game.mapmanager.getDefaultOutsideMap();
					if (i) {
						var n = this._mapPosition({
							x: this.game.player.gridX,
							y: this.game.player.gridY
						});
						n && (this.context.drawImage(this.playericon, Math.floor(n.x - 7), Math.floor(n.y - 7)), this.context.drawImage(this.maparrow, Math.floor(n.x - 9), Math.floor(n.y - 25)))
					}
				}
			},
			_drawHouseIcons: function(e) {
				var t = this;
				_.each(e, function(e) {
					var n = t._mapPosition(e);
					n && t.context.drawImage(t.houseicon, 0, 0, 8, 8, Math.floor(n.x - 4), Math.floor(n.y - 4), 8, 8)
				})
			},
			_drawShopArrows: function(e) {
				var t = this;
				_.each(e, function(e) {
					var n = t["shoparrow_" + e.type];
					if (!n) return;
					var r = t._mapPosition(e);
					r && t.context.drawImage(n, Math.floor(r.x - 14), Math.floor(r.y - 35))
				})
			},
			update: function(e) {
				if (this.game.settings.hideminimap || this.showingStory) return;
				if (!this.playericon.complete || !this.houseicon.complete || !this.maparrow.complete) return;
				if (!this._checkNeedUpdate()) return;
				this.clear(), this.mapinfo && this.mapinfo.shops && (this._drawHouseIcons(this.mapinfo.shops), this._drawShopArrows(this.mapinfo.shops)), this.mapinfo && this.mapinfo.dots && this._drawPlayerDots(this.mapinfo.dots), this.mapinfo && this.mapinfo.count && this._drawPlayerCount(this.mapinfo.count, this.mapinfo.hour)
			},
			_checkNeedUpdate: function() {
				var e = this.game.renderer.camera,
					t = Math.floor(e.x / 256) + "-" + Math.floor(e.y / 256);
				return this.lastdatasignature == t ? !1 : (this.lastdatasignature = t, !0)
			},
			setMapInfo: function(e) {
				this.lastdatasignature = null, this.mapinfo = e
			},
			drawWinner: function(e, t) {
				if (!e || !t) return;
				this.winneruserid = e.userid;
				if (!this.tryDrawWinner(e, t)) {
					var n = this,
						r = 0;
					this.winnerinterval && clearInterval(this.winnerinterval), this.winnerinterval = setInterval(function() {
						r++, (n.tryDrawWinner(e, t) || r >= 10) && clearInterval(n.winnerinterval)
					}, 500)
				}
			},
			tryDrawWinner: function(e, t) {
				var n = this.game.animationmanager,
					r = this.game.renderer,
					i = r.getImage(n.getGraphic(e, "HEAD")),
					s = r.getImage(n.getGraphic(e, "HAT")),
					o = r.getImage(n.getGraphic(t, "HEAD")),
					u = r.getImage(n.getGraphic(t, "HAT")),
					a = r.getImage(n.getGraphic(e, "../gui/bbuilder_x_red.png")),
					f = e.icon ? "../files/npcs/" + e.icon : e.image ? "../files/npcs/" + e.image : n.getGraphic(e, e.weapontype.toUpperCase()),
					l = r.getImage(f);
				if (!i || !o || !l || !a || e.hat && e.hat.length > 0 && !s || t.hat && t.hat.length > 0 && !u) return !1;
				gui.fadeIn("winnercanvas");
				var c = this.winnercontext;
				c.clearRect(0, 0, this.winnercanvas.width, this.winnercanvas.height), c.drawImage(i.image, 0, 0, 48, 48, 0, 10, 48, 48), s && c.drawImage(s.image, 0, 6, 48, 54, 0, 0, 48, 54), c.drawImage(o.image, 0, 0, 48, 48, 70, 10, 48, 48), u && c.drawImage(u.image, 0, 6, 48, 54, 70, 0, 48, 54), c.drawImage(a.image, 70, 10), c.save(), c.translate(20, 48), c.rotate(-Math.PI / 4), c.drawImage(l.image, 0, 0), c.restore();
				var h = this;
				return this.winnerhidetimeout && clearTimeout(this.winnerhidetimeout), this.winnerhidetimeout = setTimeout(function() {
					gui.fadeOut("winnercanvas")
				}, 5e3), !0
			},
			showStoryPM: function(e) {
				return this.showingStory || !this.game.player || this.game.player.ghost || !this.game.client || !e || !e.data || !e.data.storyid ? !1 : this.game.settings && this.game.settings.noministories ? !1 : (this.storyPM = e, this.game.client.sendStoryAction("get", {
					id: e.data.storyid,
					target: "minimap"
				}), !0)
			},
			onClick: function() {
				this.showingStory ? this.storyPM && this.game.showSinglePM(this.storyPM) : this.game.menu.showMap()
			},
			onStoryStarted: function(e) {
				this.showingStory = e, gui.show("minimapbackcontainer"), gui.show("minimap"), this.clear()
			},
			onStoryFinished: function() {
				this.showingStory = null, gui.hide("minimapbackcontainer"), this.game.settings.hideminimap && gui.fadeOut("minimap")
			}
		});
		return r
	}),
	function(e, t) {
		typeof exports == "object" && typeof module != "undefined" ? t(exports) : typeof define == "function" && define.amd ? define("lib/acorn", ["exports"], t) : t(e.acorn = {})
	}(this, function(e) {
		"use strict";

		function c(e, t) {
			var n = 65536;
			for (var r = 0; r < t.length; r += 2) {
				n += t[r];
				if (n > e) return !1;
				n += t[r + 1];
				if (n >= e) return !0
			}
		}

		function h(e, t) {
			return e < 65 ? e === 36 : e < 91 ? !0 : e < 97 ? e === 95 : e < 123 ? !0 : e <= 65535 ? e >= 170 && u.test(String.fromCharCode(e)) : t === !1 ? !1 : c(e, f)
		}

		function p(e, t) {
			return e < 48 ? e === 36 : e < 58 ? !0 : e < 65 ? !1 : e < 91 ? !0 : e < 97 ? e === 95 : e < 123 ? !0 : e <= 65535 ? e >= 170 && a.test(String.fromCharCode(e)) : t === !1 ? !1 : c(e, f) || c(e, l)
		}

		function v(e, t) {
			return new d(e, {
				beforeExpr: !0,
				binop: t
			})
		}

		function b(e, t) {
			return t === void 0 && (t = {}), t.keyword = e, y[e] = new d(e, t)
		}

		function x(e, t) {
			return e === 10 || e === 13 || !t && (e === 8232 || e === 8233)
		}

		function A(e, t) {
			return k.call(e, t)
		}

		function D(e, t) {
			for (var n = 1, r = 0;;) {
				S.lastIndex = r;
				var i = S.exec(e);
				if (!(i && i.index < t)) return new M(n, t - r);
				++n, r = i.index + i[0].length
			}
		}

		function H(e) {
			var t = {};
			for (var n in P) t[n] = e && A(e, n) ? e[n] : P[n];
			t.ecmaVersion >= 2015 && (t.ecmaVersion -= 2009), t.allowReserved == null && (t.allowReserved = t.ecmaVersion < 5);
			if (O(t.onToken)) {
				var r = t.onToken;
				t.onToken = function(e) {
					return r.push(e)
				}
			}
			return O(t.onComment) && (t.onComment = B(t, t.onComment)), t
		}

		function B(e, t) {
			return function(n, r, i, s, o, u) {
				var a = {
					type: n ? "Block" : "Line",
					value: r,
					start: i,
					end: s
				};
				e.locations && (a.loc = new _(this, o, u)), e.ranges && (a.range = [i, s]), t.push(a)
			}
		}

		function F(e) {
			return new RegExp("^(?:" + e.replace(/ /g, "|") + ")$")
		}

		function U() {
			this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1
		}

		function tt(e, t, n, r) {
			return e.type = t, e.end = n, this.options.locations && (e.loc.end = r), this.options.ranges && (e.range[1] = n), e
		}

		function at(e) {
			return e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode((e >> 10) + 55296, (e & 1023) + 56320))
		}

		function ft(e) {
			return e === 36 || e >= 40 && e <= 43 || e === 46 || e === 63 || e >= 91 && e <= 94 || e >= 123 && e <= 125
		}

		function lt(e) {
			return h(e, !0) || e === 36 || e === 95
		}

		function ct(e) {
			return p(e, !0) || e === 36 || e === 95 || e === 8204 || e === 8205
		}

		function ht(e) {
			return e >= 65 && e <= 90 || e >= 97 && e <= 122
		}

		function pt(e) {
			return e >= 0 && e <= 1114111
		}

		function dt(e) {
			return e === 100 || e === 68 || e === 115 || e === 83 || e === 119 || e === 87
		}

		function vt(e) {
			return ht(e) || e === 95
		}

		function mt(e) {
			return vt(e) || gt(e)
		}

		function gt(e) {
			return e >= 48 && e <= 57
		}

		function yt(e) {
			return e >= 48 && e <= 57 || e >= 65 && e <= 70 || e >= 97 && e <= 102
		}

		function bt(e) {
			return e >= 65 && e <= 70 ? 10 + (e - 65) : e >= 97 && e <= 102 ? 10 + (e - 97) : e - 48
		}

		function wt(e) {
			return e >= 48 && e <= 55
		}

		function xt(e) {
			return e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode((e >> 10) + 55296, (e & 1023) + 56320))
		}

		function Ct(e, t) {
			return (new I(t, e)).parse()
		}

		function kt(e, t, n) {
			var r = new I(n, e, t);
			return r.nextToken(), r.parseExpression()
		}

		function Lt(e, t) {
			return new I(t, e)
		}

		function At(t, n, r) {
			e.parse_dammit = t, e.LooseParser = n, e.pluginsLoose = r
		}
		var t = {
				3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
				5: "class enum extends super const export import",
				6: "enum",
				strict: "implements interface let package private protected public static yield",
				strictBind: "eval arguments"
			},
			n = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",
			r = {
				5: n,
				6: n + " const class extends export import super"
			},
			i = /^in(stanceof)?$/,
			s = "ÂªÂµÂºÃ€-Ã–Ã˜-Ã¶Ã¸-ËË†-Ë‘Ë -Ë¤Ë¬Ë®Í°-Í´Í¶Í·Íº-Í½Í¿Î†Îˆ-ÎŠÎŒÎŽ-Î¡Î£-ÏµÏ·-ÒÒŠ-Ô¯Ô±-Õ–Õ™Õ -Öˆ×-×ª×¯-×²Ø -ÙŠÙ®Ù¯Ù±-Û“Û•Û¥Û¦Û®Û¯Ûº-Û¼Û¿ÜÜ’-Ü¯Ý-Þ¥Þ±ßŠ-ßªß´ßµßºà €-à •à šà ¤à ¨à¡€-à¡˜à¡ -à¡ªà¢ -à¢´à¢¶-à¢½à¤„-à¤¹à¤½à¥à¥˜-à¥¡à¥±-à¦€à¦…-à¦Œà¦à¦à¦“-à¦¨à¦ª-à¦°à¦²à¦¶-à¦¹à¦½à§Žà§œà§à§Ÿ-à§¡à§°à§±à§¼à¨…-à¨Šà¨à¨à¨“-à¨¨à¨ª-à¨°à¨²à¨³à¨µà¨¶à¨¸à¨¹à©™-à©œà©žà©²-à©´àª…-àªàª-àª‘àª“-àª¨àªª-àª°àª²àª³àªµ-àª¹àª½à«à« à«¡à«¹à¬…-à¬Œà¬à¬à¬“-à¬¨à¬ª-à¬°à¬²à¬³à¬µ-à¬¹à¬½à­œà­à­Ÿ-à­¡à­±à®ƒà®…-à®Šà®Ž-à®à®’-à®•à®™à®šà®œà®žà®Ÿà®£à®¤à®¨-à®ªà®®-à®¹à¯à°…-à°Œà°Ž-à°à°’-à°¨à°ª-à°¹à°½à±˜-à±šà± à±¡à²€à²…-à²Œà²Ž-à²à²’-à²¨à²ª-à²³à²µ-à²¹à²½à³žà³ à³¡à³±à³²à´…-à´Œà´Ž-à´à´’-à´ºà´½àµŽàµ”-àµ–àµŸ-àµ¡àµº-àµ¿à¶…-à¶–à¶š-à¶±à¶³-à¶»à¶½à·€-à·†à¸-à¸°à¸²à¸³à¹€-à¹†àºàº‚àº„àº‡àºˆàºŠàºàº”-àº—àº™-àºŸàº¡-àº£àº¥àº§àºªàº«àº­-àº°àº²àº³àº½à»€-à»„à»†à»œ-à»Ÿà¼€à½€-à½‡à½‰-à½¬à¾ˆ-à¾Œá€€-á€ªá€¿á-á•áš-áá¡á¥á¦á®-á°áµ-á‚á‚Žá‚ -áƒ…áƒ‡áƒáƒ-áƒºáƒ¼-á‰ˆá‰Š-á‰á‰-á‰–á‰˜á‰š-á‰á‰ -áŠˆáŠŠ-áŠáŠ-áŠ°áŠ²-áŠµáŠ¸-áŠ¾á‹€á‹‚-á‹…á‹ˆ-á‹–á‹˜-áŒáŒ’-áŒ•áŒ˜-ášáŽ€-áŽáŽ -áµá¸-á½á-á™¬á™¯-á™¿áš-áššáš -á›ªá›®-á›¸áœ€-áœŒáœŽ-áœ‘áœ -áœ±á€-á‘á -á¬á®-á°áž€-áž³áŸ—áŸœá  -á¡¸á¢€-á¢¨á¢ªá¢°-á£µá¤€-á¤žá¥-á¥­á¥°-á¥´á¦€-á¦«á¦°-á§‰á¨€-á¨–á¨ -á©”áª§á¬…-á¬³á­…-á­‹á®ƒ-á® á®®á®¯á®º-á¯¥á°€-á°£á±-á±á±š-á±½á²€-á²ˆá²-á²ºá²½-á²¿á³©-á³¬á³®-á³±á³µá³¶á´€-á¶¿á¸€-á¼•á¼˜-á¼á¼ -á½…á½ˆ-á½á½-á½—á½™á½›á½á½Ÿ-á½½á¾€-á¾´á¾¶-á¾¼á¾¾á¿‚-á¿„á¿†-á¿Œá¿-á¿“á¿–-á¿›á¿ -á¿¬á¿²-á¿´á¿¶-á¿¼â±â¿â‚-â‚œâ„‚â„‡â„Š-â„“â„•â„˜-â„â„¤â„¦â„¨â„ª-â„¹â„¼-â„¿â……-â…‰â…Žâ… -â†ˆâ°€-â°®â°°-â±žâ± -â³¤â³«-â³®â³²â³³â´€-â´¥â´§â´­â´°-âµ§âµ¯â¶€-â¶–â¶ -â¶¦â¶¨-â¶®â¶°-â¶¶â¶¸-â¶¾â·€-â·†â·ˆ-â·Žâ·-â·–â·˜-â·žã€…-ã€‡ã€¡-ã€©ã€±-ã€µã€¸-ã€¼ã-ã‚–ã‚›-ã‚Ÿã‚¡-ãƒºãƒ¼-ãƒ¿ã„…-ã„¯ã„±-ã†Žã† -ã†ºã‡°-ã‡¿ã€-ä¶µä¸€-é¿¯ê€€-ê’Œê“-ê“½ê”€-ê˜Œê˜-ê˜Ÿê˜ªê˜«ê™€-ê™®ê™¿-êšêš -ê›¯êœ—-êœŸêœ¢-êžˆêž‹-êž¹êŸ·-ê ê ƒ-ê …ê ‡-ê Šê Œ-ê ¢ê¡€-ê¡³ê¢‚-ê¢³ê£²-ê£·ê£»ê£½ê£¾ê¤Š-ê¤¥ê¤°-ê¥†ê¥ -ê¥¼ê¦„-ê¦²ê§ê§ -ê§¤ê§¦-ê§¯ê§º-ê§¾ê¨€-ê¨¨ê©€-ê©‚ê©„-ê©‹ê© -ê©¶ê©ºê©¾-êª¯êª±êªµêª¶êª¹-êª½ê«€ê«‚ê«›-ê«ê« -ê«ªê«²-ê«´ê¬-ê¬†ê¬‰-ê¬Žê¬‘-ê¬–ê¬ -ê¬¦ê¬¨-ê¬®ê¬°-ê­šê­œ-ê­¥ê­°-ê¯¢ê°€-íž£íž°-íŸ†íŸ‹-íŸ»ï¤€-ï©­ï©°-ï«™ï¬€-ï¬†ï¬“-ï¬—ï¬ï¬Ÿ-ï¬¨ï¬ª-ï¬¶ï¬¸-ï¬¼ï¬¾ï­€ï­ï­ƒï­„ï­†-ï®±ï¯“-ï´½ïµ-ï¶ï¶’-ï·‡ï·°-ï·»ï¹°-ï¹´ï¹¶-ï»¼ï¼¡-ï¼ºï½-ï½šï½¦-ï¾¾ï¿‚-ï¿‡ï¿Š-ï¿ï¿’-ï¿—ï¿š-ï¿œ",
			o = "â€Œâ€Â·Ì€-Í¯Î‡Òƒ-Ò‡Ö‘-Ö½Ö¿××‚×„×…×‡Ø-ØšÙ‹-Ù©Ù°Û–-ÛœÛŸ-Û¤Û§Û¨Ûª-Û­Û°-Û¹Ü‘Ü°-ÝŠÞ¦-Þ°ß€-ß‰ß«-ß³ß½à –-à ™à ›-à £à ¥-à §à ©-à ­à¡™-à¡›à£“-à£¡à££-à¤ƒà¤º-à¤¼à¤¾-à¥à¥‘-à¥—à¥¢à¥£à¥¦-à¥¯à¦-à¦ƒà¦¼à¦¾-à§„à§‡à§ˆà§‹-à§à§—à§¢à§£à§¦-à§¯à§¾à¨-à¨ƒà¨¼à¨¾-à©‚à©‡à©ˆà©‹-à©à©‘à©¦-à©±à©µàª-àªƒàª¼àª¾-à«…à«‡-à«‰à«‹-à«à«¢à«£à«¦-à«¯à«º-à«¿à¬-à¬ƒà¬¼à¬¾-à­„à­‡à­ˆà­‹-à­à­–à­—à­¢à­£à­¦-à­¯à®‚à®¾-à¯‚à¯†-à¯ˆà¯Š-à¯à¯—à¯¦-à¯¯à°€-à°„à°¾-à±„à±†-à±ˆà±Š-à±à±•à±–à±¢à±£à±¦-à±¯à²-à²ƒà²¼à²¾-à³„à³†-à³ˆà³Š-à³à³•à³–à³¢à³£à³¦-à³¯à´€-à´ƒà´»à´¼à´¾-àµ„àµ†-àµˆàµŠ-àµàµ—àµ¢àµ£àµ¦-àµ¯à¶‚à¶ƒà·Šà·-à·”à·–à·˜-à·Ÿà·¦-à·¯à·²à·³à¸±à¸´-à¸ºà¹‡-à¹Žà¹-à¹™àº±àº´-àº¹àº»àº¼à»ˆ-à»à»-à»™à¼˜à¼™à¼ -à¼©à¼µà¼·à¼¹à¼¾à¼¿à½±-à¾„à¾†à¾‡à¾-à¾—à¾™-à¾¼à¿†á€«-á€¾á€-á‰á–-á™áž-á á¢-á¤á§-á­á±-á´á‚‚-á‚á‚-á‚á-áŸá©-á±áœ’-áœ”áœ²-áœ´á’á“á²á³áž´-áŸ“áŸáŸ -áŸ©á ‹-á á -á ™á¢©á¤ -á¤«á¤°-á¤»á¥†-á¥á§-á§šá¨—-á¨›á©•-á©žá© -á©¼á©¿-áª‰áª-áª™áª°-áª½á¬€-á¬„á¬´-á­„á­-á­™á­«-á­³á®€-á®‚á®¡-á®­á®°-á®¹á¯¦-á¯³á°¤-á°·á±€-á±‰á±-á±™á³-á³’á³”-á³¨á³­á³²-á³´á³·-á³¹á·€-á·¹á·»-á·¿â€¿â€â”âƒ-âƒœâƒ¡âƒ¥-âƒ°â³¯-â³±âµ¿â· -â·¿ã€ª-ã€¯ã‚™ã‚šê˜ -ê˜©ê™¯ê™´-ê™½êšžêšŸê›°ê›±ê ‚ê †ê ‹ê £-ê §ê¢€ê¢ê¢´-ê£…ê£-ê£™ê£ -ê£±ê£¿-ê¤‰ê¤¦-ê¤­ê¥‡-ê¥“ê¦€-ê¦ƒê¦³-ê§€ê§-ê§™ê§¥ê§°-ê§¹ê¨©-ê¨¶ê©ƒê©Œê©ê©-ê©™ê©»-ê©½êª°êª²-êª´êª·êª¸êª¾êª¿ê«ê««-ê«¯ê«µê«¶ê¯£-ê¯ªê¯¬ê¯­ê¯°-ê¯¹ï¬žï¸€-ï¸ï¸ -ï¸¯ï¸³ï¸´ï¹-ï¹ï¼-ï¼™ï¼¿",
			u = new RegExp("[" + s + "]"),
			a = new RegExp("[" + s + o + "]");
		s = o = null;
		var f = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 190, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 26, 230, 43, 117, 63, 32, 0, 257, 0, 11, 39, 8, 0, 22, 0, 12, 39, 3, 3, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 68, 12, 0, 67, 12, 65, 1, 31, 6129, 15, 754, 9486, 286, 82, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541],
			l = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 280, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239],
			d = function(t, n) {
				n === void 0 && (n = {}), this.label = t, this.keyword = n.keyword, this.beforeExpr = !!n.beforeExpr, this.startsExpr = !!n.startsExpr, this.isLoop = !!n.isLoop, this.isAssign = !!n.isAssign, this.prefix = !!n.prefix, this.postfix = !!n.postfix, this.binop = n.binop || null, this.updateContext = null
			},
			m = {
				beforeExpr: !0
			},
			g = {
				startsExpr: !0
			},
			y = {},
			w = {
				num: new d("num", g),
				regexp: new d("regexp", g),
				string: new d("string", g),
				name: new d("name", g),
				eof: new d("eof"),
				bracketL: new d("[", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				bracketR: new d("]"),
				braceL: new d("{", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				braceR: new d("}"),
				parenL: new d("(", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				parenR: new d(")"),
				comma: new d(",", m),
				semi: new d(";", m),
				colon: new d(":", m),
				dot: new d("."),
				question: new d("?", m),
				arrow: new d("=>", m),
				template: new d("template"),
				invalidTemplate: new d("invalidTemplate"),
				ellipsis: new d("...", m),
				backQuote: new d("`", g),
				dollarBraceL: new d("${", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				eq: new d("=", {
					beforeExpr: !0,
					isAssign: !0
				}),
				assign: new d("_=", {
					beforeExpr: !0,
					isAssign: !0
				}),
				incDec: new d("++/--", {
					prefix: !0,
					postfix: !0,
					startsExpr: !0
				}),
				prefix: new d("!/~", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				}),
				logicalOR: v("||", 1),
				logicalAND: v("&&", 2),
				bitwiseOR: v("|", 3),
				bitwiseXOR: v("^", 4),
				bitwiseAND: v("&", 5),
				equality: v("==/!=/===/!==", 6),
				relational: v("</>/<=/>=", 7),
				bitShift: v("<</>>/>>>", 8),
				plusMin: new d("+/-", {
					beforeExpr: !0,
					binop: 9,
					prefix: !0,
					startsExpr: !0
				}),
				modulo: v("%", 10),
				star: v("*", 10),
				slash: v("/", 10),
				starstar: new d("**", {
					beforeExpr: !0
				}),
				_break: b("break"),
				_case: b("case", m),
				_catch: b("catch"),
				_continue: b("continue"),
				_debugger: b("debugger"),
				_default: b("default", m),
				_do: b("do", {
					isLoop: !0,
					beforeExpr: !0
				}),
				_else: b("else", m),
				_finally: b("finally"),
				_for: b("for", {
					isLoop: !0
				}),
				_function: b("function", g),
				_if: b("if"),
				_return: b("return", m),
				_switch: b("switch"),
				_throw: b("throw", m),
				_try: b("try"),
				_var: b("var"),
				_const: b("const"),
				_while: b("while", {
					isLoop: !0
				}),
				_with: b("with"),
				_new: b("new", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				_this: b("this", g),
				_super: b("super", g),
				_class: b("class", g),
				_extends: b("extends", m),
				_export: b("export"),
				_import: b("import"),
				_null: b("null", g),
				_true: b("true", g),
				_false: b("false", g),
				_in: b("in", {
					beforeExpr: !0,
					binop: 7
				}),
				_instanceof: b("instanceof", {
					beforeExpr: !0,
					binop: 7
				}),
				_typeof: b("typeof", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				}),
				_void: b("void", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				}),
				_delete: b("delete", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				})
			},
			E = /\r\n?|\n|\u2028|\u2029/,
			S = new RegExp(E.source, "g"),
			T = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,
			N = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,
			C = Object.prototype,
			k = C.hasOwnProperty,
			L = C.toString,
			O = Array.isArray || function(e) {
				return L.call(e) === "[object Array]"
			},
			M = function(t, n) {
				this.line = t, this.column = n
			};
		M.prototype.offset = function(t) {
			return new M(this.line, this.column + t)
		};
		var _ = function(t, n, r) {
				this.start = n, this.end = r, t.sourceFile !== null && (this.source = t.sourceFile)
			},
			P = {
				ecmaVersion: 7,
				sourceType: "script",
				onInsertedSemicolon: null,
				onTrailingComma: null,
				allowReserved: null,
				allowReturnOutsideFunction: !1,
				allowImportExportEverywhere: !1,
				allowAwaitOutsideFunction: !1,
				allowHashBang: !1,
				locations: !1,
				onToken: null,
				onComment: null,
				ranges: !1,
				program: null,
				sourceFile: null,
				directSourceFile: null,
				preserveParens: !1,
				plugins: {}
			},
			j = {},
			I = function(n, i, s) {
				this.options = n = H(n), this.sourceFile = n.sourceFile, this.keywords = F(r[n.ecmaVersion >= 6 ? 6 : 5]);
				var o = "";
				if (!n.allowReserved) {
					for (var u = n.ecmaVersion;; u--)
						if (o = t[u]) break;
					n.sourceType === "module" && (o += " await")
				}
				this.reservedWords = F(o);
				var a = (o ? o + " " : "") + t.strict;
				this.reservedWordsStrict = F(a), this.reservedWordsStrictBind = F(a + " " + t.strictBind), this.input = String(i), this.containsEsc = !1, this.loadPlugins(n.plugins), s ? (this.pos = s, this.lineStart = this.input.lastIndexOf("\n", s - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(E).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = w.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = !0, this.inModule = n.sourceType === "module", this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.inFunction = this.inGenerator = this.inAsync = !1, this.yieldPos = this.awaitPos = 0, this.labels = [], this.pos === 0 && n.allowHashBang && this.input.slice(0, 2) === "#!" && this.skipLineComment(2), this.scopeStack = [], this.enterFunctionScope(), this.regexpState = null
			};
		I.prototype.isKeyword = function(t) {
			return this.keywords.test(t)
		}, I.prototype.isReservedWord = function(t) {
			return this.reservedWords.test(t)
		}, I.prototype.extend = function(t, n) {
			this[t] = n(this[t])
		}, I.prototype.loadPlugins = function(t) {
			var n = this;
			for (var r in t) {
				var i = j[r];
				if (!i) throw new Error("Plugin '" + r + "' not found");
				i(n, t[r])
			}
		}, I.prototype.parse = function() {
			var t = this.options.program || this.startNode();
			return this.nextToken(), this.parseTopLevel(t)
		};
		var q = I.prototype,
			R = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)"|;)/;
		q.strictDirective = function(e) {
			var t = this;
			for (;;) {
				N.lastIndex = e, e += N.exec(t.input)[0].length;
				var n = R.exec(t.input.slice(e));
				if (!n) return !1;
				if ((n[1] || n[2]) === "use strict") return !0;
				e += n[0].length
			}
		}, q.eat = function(e) {
			return this.type === e ? (this.next(), !0) : !1
		}, q.isContextual = function(e) {
			return this.type === w.name && this.value === e && !this.containsEsc
		}, q.eatContextual = function(e) {
			return this.isContextual(e) ? (this.next(), !0) : !1
		}, q.expectContextual = function(e) {
			this.eatContextual(e) || this.unexpected()
		}, q.canInsertSemicolon = function() {
			return this.type === w.eof || this.type === w.braceR || E.test(this.input.slice(this.lastTokEnd, this.start))
		}, q.insertSemicolon = function() {
			if (this.canInsertSemicolon()) return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), !0
		}, q.semicolon = function() {
			!this.eat(w.semi) && !this.insertSemicolon() && this.unexpected()
		}, q.afterTrailingComma = function(e, t) {
			if (this.type === e) return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), t || this.next(), !0
		}, q.expect = function(e) {
			this.eat(e) || this.unexpected()
		}, q.unexpected = function(e) {
			this.raise(e != null ? e : this.start, "Unexpected token")
		}, q.checkPatternErrors = function(e, t) {
			if (!e) return;
			e.trailingComma > -1 && this.raiseRecoverable(e.trailingComma, "Comma is not permitted after the rest element");
			var n = t ? e.parenthesizedAssign : e.parenthesizedBind;
			n > -1 && this.raiseRecoverable(n, "Parenthesized pattern")
		}, q.checkExpressionErrors = function(e, t) {
			if (!e) return !1;
			var n = e.shorthandAssign,
				r = e.doubleProto;
			if (!t) return n >= 0 || r >= 0;
			n >= 0 && this.raise(n, "Shorthand property assignments are valid only in destructuring patterns"), r >= 0 && this.raiseRecoverable(r, "Redefinition of __proto__ property")
		}, q.checkYieldAwaitInDefaultParams = function() {
			this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value")
		}, q.isSimpleAssignTarget = function(e) {
			return e.type === "ParenthesizedExpression" ? this.isSimpleAssignTarget(e.expression) : e.type === "Identifier" || e.type === "MemberExpression"
		};
		var z = I.prototype;
		z.parseTopLevel = function(e) {
			var t = this,
				n = {};
			e.body || (e.body = []);
			while (this.type !== w.eof) {
				var r = t.parseStatement(!0, !0, n);
				e.body.push(r)
			}
			return this.adaptDirectivePrologue(e.body), this.next(), this.options.ecmaVersion >= 6 && (e.sourceType = this.options.sourceType), this.finishNode(e, "Program")
		};
		var W = {
				kind: "loop"
			},
			X = {
				kind: "switch"
			};
		z.isLet = function() {
			if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return !1;
			N.lastIndex = this.pos;
			var e = N.exec(this.input),
				t = this.pos + e[0].length,
				n = this.input.charCodeAt(t);
			if (n === 91 || n === 123) return !0;
			if (h(n, !0)) {
				var r = t + 1;
				while (p(this.input.charCodeAt(r), !0)) ++r;
				var s = this.input.slice(t, r);
				if (!i.test(s)) return !0
			}
			return !1
		}, z.isAsyncFunction = function() {
			if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return !1;
			N.lastIndex = this.pos;
			var e = N.exec(this.input),
				t = this.pos + e[0].length;
			return !E.test(this.input.slice(this.pos, t)) && this.input.slice(t, t + 8) === "function" && (t + 8 === this.input.length || !p(this.input.charAt(t + 8)))
		}, z.parseStatement = function(e, t, n) {
			var r = this.type,
				i = this.startNode(),
				s;
			this.isLet() && (r = w._var, s = "let");
			switch (r) {
				case w._break:
				case w._continue:
					return this.parseBreakContinueStatement(i, r.keyword);
				case w._debugger:
					return this.parseDebuggerStatement(i);
				case w._do:
					return this.parseDoStatement(i);
				case w._for:
					return this.parseForStatement(i);
				case w._function:
					return !e && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(i, !1);
				case w._class:
					return e || this.unexpected(), this.parseClass(i, !0);
				case w._if:
					return this.parseIfStatement(i);
				case w._return:
					return this.parseReturnStatement(i);
				case w._switch:
					return this.parseSwitchStatement(i);
				case w._throw:
					return this.parseThrowStatement(i);
				case w._try:
					return this.parseTryStatement(i);
				case w._const:
				case w._var:
					return s = s || this.value, !e && s !== "var" && this.unexpected(), this.parseVarStatement(i, s);
				case w._while:
					return this.parseWhileStatement(i);
				case w._with:
					return this.parseWithStatement(i);
				case w.braceL:
					return this.parseBlock();
				case w.semi:
					return this.parseEmptyStatement(i);
				case w._export:
				case w._import:
					return this.options.allowImportExportEverywhere || (t || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), r === w._import ? this.parseImport(i) : this.parseExport(i, n);
				default:
					if (this.isAsyncFunction()) return e || this.unexpected(), this.next(), this.parseFunctionStatement(i, !0);
					var o = this.value,
						u = this.parseExpression();
					return r === w.name && u.type === "Identifier" && this.eat(w.colon) ? this.parseLabeledStatement(i, o, u) : this.parseExpressionStatement(i, u)
			}
		}, z.parseBreakContinueStatement = function(e, t) {
			var n = this,
				r = t === "break";
			this.next(), this.eat(w.semi) || this.insertSemicolon() ? e.label = null : this.type !== w.name ? this.unexpected() : (e.label = this.parseIdent(), this.semicolon());
			var i = 0;
			for (; i < this.labels.length; ++i) {
				var s = n.labels[i];
				if (e.label == null || s.name === e.label.name) {
					if (!(s.kind == null || !r && s.kind !== "loop")) break;
					if (e.label && r) break
				}
			}
			return i === this.labels.length && this.raise(e.start, "Unsyntactic " + t), this.finishNode(e, r ? "BreakStatement" : "ContinueStatement")
		}, z.parseDebuggerStatement = function(e) {
			return this.next(), this.semicolon(), this.finishNode(e, "DebuggerStatement")
		}, z.parseDoStatement = function(e) {
			return this.next(), this.labels.push(W), e.body = this.parseStatement(!1), this.labels.pop(), this.expect(w._while), e.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(w.semi) : this.semicolon(), this.finishNode(e, "DoWhileStatement")
		}, z.parseForStatement = function(e) {
			this.next();
			var t = this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual("await") ? this.lastTokStart : -1;
			this.labels.push(W), this.enterLexicalScope(), this.expect(w.parenL);
			if (this.type === w.semi) return t > -1 && this.unexpected(t), this.parseFor(e, null);
			var n = this.isLet();
			if (this.type === w._var || this.type === w._const || n) {
				var r = this.startNode(),
					i = n ? "let" : this.value;
				return this.next(), this.parseVar(r, !0, i), this.finishNode(r, "VariableDeclaration"), (this.type === w._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && r.declarations.length === 1 && (i === "var" || !r.declarations[0].init) ? (this.options.ecmaVersion >= 9 && (this.type === w._in ? t > -1 && this.unexpected(t) : e.await = t > -1), this.parseForIn(e, r)) : (t > -1 && this.unexpected(t), this.parseFor(e, r))
			}
			var s = new U,
				o = this.parseExpression(!0, s);
			return this.type === w._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? (this.options.ecmaVersion >= 9 && (this.type === w._in ? t > -1 && this.unexpected(t) : e.await = t > -1), this.toAssignable(o, !1, s), this.checkLVal(o), this.parseForIn(e, o)) : (this.checkExpressionErrors(s, !0), t > -1 && this.unexpected(t), this.parseFor(e, o))
		}, z.parseFunctionStatement = function(e, t) {
			return this.next(), this.parseFunction(e, !0, !1, t)
		}, z.parseIfStatement = function(e) {
			return this.next(), e.test = this.parseParenExpression(), e.consequent = this.parseStatement(!this.strict && this.type === w._function), e.alternate = this.eat(w._else) ? this.parseStatement(!this.strict && this.type === w._function) : null, this.finishNode(e, "IfStatement")
		}, z.parseReturnStatement = function(e) {
			return !this.inFunction && !this.options.allowReturnOutsideFunction && this.raise(this.start, "'return' outside of function"), this.next(), this.eat(w.semi) || this.insertSemicolon() ? e.argument = null : (e.argument = this.parseExpression(), this.semicolon()), this.finishNode(e, "ReturnStatement")
		}, z.parseSwitchStatement = function(e) {
			var t = this;
			this.next(), e.discriminant = this.parseParenExpression(), e.cases = [], this.expect(w.braceL), this.labels.push(X), this.enterLexicalScope();
			var n;
			for (var r = !1; this.type !== w.braceR;)
				if (t.type === w._case || t.type === w._default) {
					var i = t.type === w._case;
					n && t.finishNode(n, "SwitchCase"), e.cases.push(n = t.startNode()), n.consequent = [], t.next(), i ? n.test = t.parseExpression() : (r && t.raiseRecoverable(t.lastTokStart, "Multiple default clauses"), r = !0, n.test = null), t.expect(w.colon)
				} else n || t.unexpected(), n.consequent.push(t.parseStatement(!0));
			return this.exitLexicalScope(), n && this.finishNode(n, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(e, "SwitchStatement")
		}, z.parseThrowStatement = function(e) {
			return this.next(), E.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), e.argument = this.parseExpression(), this.semicolon(), this.finishNode(e, "ThrowStatement")
		};
		var V = [];
		z.parseTryStatement = function(e) {
			this.next(), e.block = this.parseBlock(), e.handler = null;
			if (this.type === w._catch) {
				var t = this.startNode();
				this.next(), this.eat(w.parenL) ? (t.param = this.parseBindingAtom(), this.enterLexicalScope(), this.checkLVal(t.param, "let"), this.expect(w.parenR)) : (this.options.ecmaVersion < 10 && this.unexpected(), t.param = null, this.enterLexicalScope()), t.body = this.parseBlock(!1), this.exitLexicalScope(), e.handler = this.finishNode(t, "CatchClause")
			}
			return e.finalizer = this.eat(w._finally) ? this.parseBlock() : null, !e.handler && !e.finalizer && this.raise(e.start, "Missing catch or finally clause"), this.finishNode(e, "TryStatement")
		}, z.parseVarStatement = function(e, t) {
			return this.next(), this.parseVar(e, !1, t), this.semicolon(), this.finishNode(e, "VariableDeclaration")
		}, z.parseWhileStatement = function(e) {
			return this.next(), e.test = this.parseParenExpression(), this.labels.push(W), e.body = this.parseStatement(!1), this.labels.pop(), this.finishNode(e, "WhileStatement")
		}, z.parseWithStatement = function(e) {
			return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), e.object = this.parseParenExpression(), e.body = this.parseStatement(!1), this.finishNode(e, "WithStatement")
		}, z.parseEmptyStatement = function(e) {
			return this.next(), this.finishNode(e, "EmptyStatement")
		}, z.parseLabeledStatement = function(e, t, n) {
			var r = this;
			for (var i = 0, s = r.labels; i < s.length; i += 1) {
				var o = s[i];
				o.name === t && r.raise(n.start, "Label '" + t + "' is already declared")
			}
			var u = this.type.isLoop ? "loop" : this.type === w._switch ? "switch" : null;
			for (var a = this.labels.length - 1; a >= 0; a--) {
				var f = r.labels[a];
				if (f.statementStart !== e.start) break;
				f.statementStart = r.start, f.kind = u
			}
			return this.labels.push({
				name: t,
				kind: u,
				statementStart: this.start
			}), e.body = this.parseStatement(!0), (e.body.type === "ClassDeclaration" || e.body.type === "VariableDeclaration" && e.body.kind !== "var" || e.body.type === "FunctionDeclaration" && (this.strict || e.body.generator)) && this.raiseRecoverable(e.body.start, "Invalid labeled declaration"), this.labels.pop(), e.label = n, this.finishNode(e, "LabeledStatement")
		}, z.parseExpressionStatement = function(e, t) {
			return e.expression = t, this.semicolon(), this.finishNode(e, "ExpressionStatement")
		}, z.parseBlock = function(e) {
			var t = this;
			e === void 0 && (e = !0);
			var n = this.startNode();
			n.body = [], this.expect(w.braceL), e && this.enterLexicalScope();
			while (!this.eat(w.braceR)) {
				var r = t.parseStatement(!0);
				n.body.push(r)
			}
			return e && this.exitLexicalScope(), this.finishNode(n, "BlockStatement")
		}, z.parseFor = function(e, t) {
			return e.init = t, this.expect(w.semi), e.test = this.type === w.semi ? null : this.parseExpression(), this.expect(w.semi), e.update = this.type === w.parenR ? null : this.parseExpression(), this.expect(w.parenR), this.exitLexicalScope(), e.body = this.parseStatement(!1), this.labels.pop(), this.finishNode(e, "ForStatement")
		}, z.parseForIn = function(e, t) {
			var n = this.type === w._in ? "ForInStatement" : "ForOfStatement";
			return this.next(), n === "ForInStatement" && (t.type === "AssignmentPattern" || t.type === "VariableDeclaration" && t.declarations[0].init != null && (this.strict || t.declarations[0].id.type !== "Identifier")) && this.raise(t.start, "Invalid assignment in for-in loop head"), e.left = t, e.right = n === "ForInStatement" ? this.parseExpression() : this.parseMaybeAssign(), this.expect(w.parenR), this.exitLexicalScope(), e.body = this.parseStatement(!1), this.labels.pop(), this.finishNode(e, n)
		}, z.parseVar = function(e, t, n) {
			var r = this;
			e.declarations = [], e.kind = n;
			for (;;) {
				var i = r.startNode();
				r.parseVarId(i, n), r.eat(w.eq) ? i.init = r.parseMaybeAssign(t) : n === "const" && !(r.type === w._in || r.options.ecmaVersion >= 6 && r.isContextual("of")) ? r.unexpected() : i.id.type !== "Identifier" && (!t || r.type !== w._in && !r.isContextual("of")) ? r.raise(r.lastTokEnd, "Complex binding patterns require an initialization value") : i.init = null, e.declarations.push(r.finishNode(i, "VariableDeclarator"));
				if (!r.eat(w.comma)) break
			}
			return e
		}, z.parseVarId = function(e, t) {
			e.id = this.parseBindingAtom(t), this.checkLVal(e.id, t, !1)
		}, z.parseFunction = function(e, t, n, r) {
			this.initFunction(e);
			if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !r) e.generator = this.eat(w.star);
			this.options.ecmaVersion >= 8 && (e.async = !!r), t && (e.id = t === "nullableID" && this.type !== w.name ? null : this.parseIdent(), e.id && this.checkLVal(e.id, "var"));
			var i = this.inGenerator,
				s = this.inAsync,
				o = this.yieldPos,
				u = this.awaitPos,
				a = this.inFunction;
			return this.inGenerator = e.generator, this.inAsync = e.async, this.yieldPos = 0, this.awaitPos = 0, this.inFunction = !0, this.enterFunctionScope(), t || (e.id = this.type === w.name ? this.parseIdent() : null), this.parseFunctionParams(e), this.parseFunctionBody(e, n), this.inGenerator = i, this.inAsync = s, this.yieldPos = o, this.awaitPos = u, this.inFunction = a, this.finishNode(e, t ? "FunctionDeclaration" : "FunctionExpression")
		}, z.parseFunctionParams = function(e) {
			this.expect(w.parenL), e.params = this.parseBindingList(w.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams()
		}, z.parseClass = function(e, t) {
			var n = this;
			this.next(), this.parseClassId(e, t), this.parseClassSuper(e);
			var r = this.startNode(),
				i = !1;
			r.body = [], this.expect(w.braceL);
			while (!this.eat(w.braceR)) {
				var s = n.parseClassMember(r);
				s && s.type === "MethodDefinition" && s.kind === "constructor" && (i && n.raise(s.start, "Duplicate constructor in the same class"), i = !0)
			}
			return e.body = this.finishNode(r, "ClassBody"), this.finishNode(e, t ? "ClassDeclaration" : "ClassExpression")
		}, z.parseClassMember = function(e) {
			var t = this;
			if (this.eat(w.semi)) return null;
			var n = this.startNode(),
				r = function(e, r) {
					r === void 0 && (r = !1);
					var i = t.start,
						s = t.startLoc;
					return t.eatContextual(e) ? t.type !== w.parenL && (!r || !t.canInsertSemicolon()) ? !0 : (n.key && t.unexpected(), n.computed = !1, n.key = t.startNodeAt(i, s), n.key.name = e, t.finishNode(n.key, "Identifier"), !1) : !1
				};
			n.kind = "method", n.isStatic = r("static");
			var i = this.eat(w.star),
				s = !1;
			i || (this.options.ecmaVersion >= 8 && r("async", !0) ? (s = !0, i = this.options.ecmaVersion >= 9 && this.eat(w.star)) : r("get") ? n.kind = "get" : r("set") && (n.kind = "set")), n.key || this.parsePropertyName(n);
			var o = n.key;
			return !n.computed && !n.isStatic && (o.type === "Identifier" && o.name === "constructor" || o.type === "Literal" && o.value === "constructor") ? (n.kind !== "method" && this.raise(o.start, "Constructor can't have get/set modifier"), i && this.raise(o.start, "Constructor can't be a generator"), s && this.raise(o.start, "Constructor can't be an async method"), n.kind = "constructor") : n.isStatic && o.type === "Identifier" && o.name === "prototype" && this.raise(o.start, "Classes may not have a static property named prototype"), this.parseClassMethod(e, n, i, s), n.kind === "get" && n.value.params.length !== 0 && this.raiseRecoverable(n.value.start, "getter should have no params"), n.kind === "set" && n.value.params.length !== 1 && this.raiseRecoverable(n.value.start, "setter should have exactly one param"), n.kind === "set" && n.value.params[0].type === "RestElement" && this.raiseRecoverable(n.value.params[0].start, "Setter cannot use rest params"), n
		}, z.parseClassMethod = function(e, t, n, r) {
			t.value = this.parseMethod(n, r), e.body.push(this.finishNode(t, "MethodDefinition"))
		}, z.parseClassId = function(e, t) {
			e.id = this.type === w.name ? this.parseIdent() : t === !0 ? this.unexpected() : null
		}, z.parseClassSuper = function(e) {
			e.superClass = this.eat(w._extends) ? this.parseExprSubscripts() : null
		}, z.parseExport = function(e, t) {
			var n = this;
			this.next();
			if (this.eat(w.star)) return this.expectContextual("from"), this.type !== w.string && this.unexpected(), e.source = this.parseExprAtom(), this.semicolon(), this.finishNode(e, "ExportAllDeclaration");
			if (this.eat(w._default)) {
				this.checkExport(t, "default", this.lastTokStart);
				var r;
				if (this.type === w._function || (r = this.isAsyncFunction())) {
					var i = this.startNode();
					this.next(), r && this.next(), e.declaration = this.parseFunction(i, "nullableID", !1, r)
				} else if (this.type === w._class) {
					var s = this.startNode();
					e.declaration = this.parseClass(s, "nullableID")
				} else e.declaration = this.parseMaybeAssign(), this.semicolon();
				return this.finishNode(e, "ExportDefaultDeclaration")
			}
			if (this.shouldParseExportStatement()) e.declaration = this.parseStatement(!0), e.declaration.type === "VariableDeclaration" ? this.checkVariableExport(t, e.declaration.declarations) : this.checkExport(t, e.declaration.id.name, e.declaration.id.start), e.specifiers = [], e.source = null;
			else {
				e.declaration = null, e.specifiers = this.parseExportSpecifiers(t);
				if (this.eatContextual("from")) this.type !== w.string && this.unexpected(), e.source = this.parseExprAtom();
				else {
					for (var o = 0, u = e.specifiers; o < u.length; o += 1) {
						var a = u[o];
						n.checkUnreserved(a.local)
					}
					e.source = null
				}
				this.semicolon()
			}
			return this.finishNode(e, "ExportNamedDeclaration")
		}, z.checkExport = function(e, t, n) {
			if (!e) return;
			A(e, t) && this.raiseRecoverable(n, "Duplicate export '" + t + "'"), e[t] = !0
		}, z.checkPatternExport = function(e, t) {
			var n = this,
				r = t.type;
			if (r === "Identifier") this.checkExport(e, t.name, t.start);
			else if (r === "ObjectPattern")
				for (var i = 0, s = t.properties; i < s.length; i += 1) {
					var o = s[i];
					n.checkPatternExport(e, o)
				} else if (r === "ArrayPattern")
					for (var u = 0, a = t.elements; u < a.length; u += 1) {
						var f = a[u];
						f && n.checkPatternExport(e, f)
					} else r === "Property" ? this.checkPatternExport(e, t.value) : r === "AssignmentPattern" ? this.checkPatternExport(e, t.left) : r === "RestElement" ? this.checkPatternExport(e, t.argument) : r === "ParenthesizedExpression" && this.checkPatternExport(e, t.expression)
		}, z.checkVariableExport = function(e, t) {
			var n = this;
			if (!e) return;
			for (var r = 0, i = t; r < i.length; r += 1) {
				var s = i[r];
				n.checkPatternExport(e, s.id)
			}
		}, z.shouldParseExportStatement = function() {
			return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction()
		}, z.parseExportSpecifiers = function(e) {
			var t = this,
				n = [],
				r = !0;
			this.expect(w.braceL);
			while (!this.eat(w.braceR)) {
				if (!r) {
					t.expect(w.comma);
					if (t.afterTrailingComma(w.braceR)) break
				} else r = !1;
				var i = t.startNode();
				i.local = t.parseIdent(!0), i.exported = t.eatContextual("as") ? t.parseIdent(!0) : i.local, t.checkExport(e, i.exported.name, i.exported.start), n.push(t.finishNode(i, "ExportSpecifier"))
			}
			return n
		}, z.parseImport = function(e) {
			return this.next(), this.type === w.string ? (e.specifiers = V, e.source = this.parseExprAtom()) : (e.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), e.source = this.type === w.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(e, "ImportDeclaration")
		}, z.parseImportSpecifiers = function() {
			var e = this,
				t = [],
				n = !0;
			if (this.type === w.name) {
				var r = this.startNode();
				r.local = this.parseIdent(), this.checkLVal(r.local, "let"), t.push(this.finishNode(r, "ImportDefaultSpecifier"));
				if (!this.eat(w.comma)) return t
			}
			if (this.type === w.star) {
				var i = this.startNode();
				return this.next(), this.expectContextual("as"), i.local = this.parseIdent(), this.checkLVal(i.local, "let"), t.push(this.finishNode(i, "ImportNamespaceSpecifier")), t
			}
			this.expect(w.braceL);
			while (!this.eat(w.braceR)) {
				if (!n) {
					e.expect(w.comma);
					if (e.afterTrailingComma(w.braceR)) break
				} else n = !1;
				var s = e.startNode();
				s.imported = e.parseIdent(!0), e.eatContextual("as") ? s.local = e.parseIdent() : (e.checkUnreserved(s.imported), s.local = s.imported), e.checkLVal(s.local, "let"), t.push(e.finishNode(s, "ImportSpecifier"))
			}
			return t
		}, z.adaptDirectivePrologue = function(e) {
			for (var t = 0; t < e.length && this.isDirectiveCandidate(e[t]); ++t) e[t].directive = e[t].expression.raw.slice(1, -1)
		}, z.isDirectiveCandidate = function(e) {
			return e.type === "ExpressionStatement" && e.expression.type === "Literal" && typeof e.expression.value == "string" && (this.input[e.start] === '"' || this.input[e.start] === "'")
		};
		var $ = I.prototype;
		$.toAssignable = function(e, t, n) {
			var r = this;
			if (this.options.ecmaVersion >= 6 && e) switch (e.type) {
				case "Identifier":
					this.inAsync && e.name === "await" && this.raise(e.start, "Can not use 'await' as identifier inside an async function");
					break;
				case "ObjectPattern":
				case "ArrayPattern":
				case "RestElement":
					break;
				case "ObjectExpression":
					e.type = "ObjectPattern", n && this.checkPatternErrors(n, !0);
					for (var i = 0, s = e.properties; i < s.length; i += 1) {
						var o = s[i];
						r.toAssignable(o, t), o.type === "RestElement" && (o.argument.type === "ArrayPattern" || o.argument.type === "ObjectPattern") && r.raise(o.argument.start, "Unexpected token")
					}
					break;
				case "Property":
					e.kind !== "init" && this.raise(e.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(e.value, t);
					break;
				case "ArrayExpression":
					e.type = "ArrayPattern", n && this.checkPatternErrors(n, !0), this.toAssignableList(e.elements, t);
					break;
				case "SpreadElement":
					e.type = "RestElement", this.toAssignable(e.argument, t), e.argument.type === "AssignmentPattern" && this.raise(e.argument.start, "Rest elements cannot have a default value");
					break;
				case "AssignmentExpression":
					e.operator !== "=" && this.raise(e.left.end, "Only '=' operator can be used for specifying default value."), e.type = "AssignmentPattern", delete e.operator, this.toAssignable(e.left, t);
				case "AssignmentPattern":
					break;
				case "ParenthesizedExpression":
					this.toAssignable(e.expression, t);
					break;
				case "MemberExpression":
					if (!t) break;
				default:
					this.raise(e.start, "Assigning to rvalue")
			} else n && this.checkPatternErrors(n, !0);
			return e
		}, $.toAssignableList = function(e, t) {
			var n = this,
				r = e.length;
			for (var i = 0; i < r; i++) {
				var s = e[i];
				s && n.toAssignable(s, t)
			}
			if (r) {
				var o = e[r - 1];
				this.options.ecmaVersion === 6 && t && o && o.type === "RestElement" && o.argument.type !== "Identifier" && this.unexpected(o.argument.start)
			}
			return e
		}, $.parseSpread = function(e) {
			var t = this.startNode();
			return this.next(), t.argument = this.parseMaybeAssign(!1, e), this.finishNode(t, "SpreadElement")
		}, $.parseRestBinding = function() {
			var e = this.startNode();
			return this.next(), this.options.ecmaVersion === 6 && this.type !== w.name && this.unexpected(), e.argument = this.parseBindingAtom(), this.finishNode(e, "RestElement")
		}, $.parseBindingAtom = function() {
			if (this.options.ecmaVersion >= 6) switch (this.type) {
				case w.bracketL:
					var e = this.startNode();
					return this.next(), e.elements = this.parseBindingList(w.bracketR, !0, !0), this.finishNode(e, "ArrayPattern");
				case w.braceL:
					return this.parseObj(!0)
			}
			return this.parseIdent()
		}, $.parseBindingList = function(e, t, n) {
			var r = this,
				i = [],
				s = !0;
			while (!this.eat(e)) {
				s ? s = !1 : r.expect(w.comma);
				if (t && r.type === w.comma) i.push(null);
				else {
					if (n && r.afterTrailingComma(e)) break;
					if (r.type === w.ellipsis) {
						var o = r.parseRestBinding();
						r.parseBindingListItem(o), i.push(o), r.type === w.comma && r.raise(r.start, "Comma is not permitted after the rest element"), r.expect(e);
						break
					}
					var u = r.parseMaybeDefault(r.start, r.startLoc);
					r.parseBindingListItem(u), i.push(u)
				}
			}
			return i
		}, $.parseBindingListItem = function(e) {
			return e
		}, $.parseMaybeDefault = function(e, t, n) {
			n = n || this.parseBindingAtom();
			if (this.options.ecmaVersion < 6 || !this.eat(w.eq)) return n;
			var r = this.startNodeAt(e, t);
			return r.left = n, r.right = this.parseMaybeAssign(), this.finishNode(r, "AssignmentPattern")
		}, $.checkLVal = function(e, t, n) {
			var r = this;
			switch (e.type) {
				case "Identifier":
					this.strict && this.reservedWordsStrictBind.test(e.name) && this.raiseRecoverable(e.start, (t ? "Binding " : "Assigning to ") + e.name + " in strict mode"), n && (A(n, e.name) && this.raiseRecoverable(e.start, "Argument name clash"), n[e.name] = !0), t && t !== "none" && ((t === "var" && !this.canDeclareVarName(e.name) || t !== "var" && !this.canDeclareLexicalName(e.name)) && this.raiseRecoverable(e.start, "Identifier '" + e.name + "' has already been declared"), t === "var" ? this.declareVarName(e.name) : this.declareLexicalName(e.name));
					break;
				case "MemberExpression":
					t && this.raiseRecoverable(e.start, "Binding member expression");
					break;
				case "ObjectPattern":
					for (var i = 0, s = e.properties; i < s.length; i += 1) {
						var o = s[i];
						r.checkLVal(o, t, n)
					}
					break;
				case "Property":
					this.checkLVal(e.value, t, n);
					break;
				case "ArrayPattern":
					for (var u = 0, a = e.elements; u < a.length; u += 1) {
						var f = a[u];
						f && r.checkLVal(f, t, n)
					}
					break;
				case "AssignmentPattern":
					this.checkLVal(e.left, t, n);
					break;
				case "RestElement":
					this.checkLVal(e.argument, t, n);
					break;
				case "ParenthesizedExpression":
					this.checkLVal(e.expression, t, n);
					break;
				default:
					this.raise(e.start, (t ? "Binding" : "Assigning to") + " rvalue")
			}
		};
		var J = I.prototype;
		J.checkPropClash = function(e, t, n) {
			if (this.options.ecmaVersion >= 9 && e.type === "SpreadElement") return;
			if (this.options.ecmaVersion >= 6 && (e.computed || e.method || e.shorthand)) return;
			var r = e.key,
				i;
			switch (r.type) {
				case "Identifier":
					i = r.name;
					break;
				case "Literal":
					i = String(r.value);
					break;
				default:
					return
			}
			var s = e.kind;
			if (this.options.ecmaVersion >= 6) {
				i === "__proto__" && s === "init" && (t.proto && (n && n.doubleProto < 0 ? n.doubleProto = r.start : this.raiseRecoverable(r.start, "Redefinition of __proto__ property")), t.proto = !0);
				return
			}
			i = "$" + i;
			var o = t[i];
			if (o) {
				var u;
				s === "init" ? u = this.strict && o.init || o.get || o.set : u = o.init || o[s], u && this.raiseRecoverable(r.start, "Redefinition of property")
			} else o = t[i] = {
				init: !1,
				get: !1,
				set: !1
			};
			o[s] = !0
		}, J.parseExpression = function(e, t) {
			var n = this,
				r = this.start,
				i = this.startLoc,
				s = this.parseMaybeAssign(e, t);
			if (this.type === w.comma) {
				var o = this.startNodeAt(r, i);
				o.expressions = [s];
				while (this.eat(w.comma)) o.expressions.push(n.parseMaybeAssign(e, t));
				return this.finishNode(o, "SequenceExpression")
			}
			return s
		}, J.parseMaybeAssign = function(e, t, n) {
			if (this.inGenerator && this.isContextual("yield")) return this.parseYield();
			var r = !1,
				i = -1,
				s = -1;
			t ? (i = t.parenthesizedAssign, s = t.trailingComma, t.parenthesizedAssign = t.trailingComma = -1) : (t = new U, r = !0);
			var o = this.start,
				u = this.startLoc;
			if (this.type === w.parenL || this.type === w.name) this.potentialArrowAt = this.start;
			var a = this.parseMaybeConditional(e, t);
			n && (a = n.call(this, a, o, u));
			if (this.type.isAssign) {
				var f = this.startNodeAt(o, u);
				return f.operator = this.value, f.left = this.type === w.eq ? this.toAssignable(a, !1, t) : a, r || U.call(t), t.shorthandAssign = -1, this.checkLVal(a), this.next(), f.right = this.parseMaybeAssign(e), this.finishNode(f, "AssignmentExpression")
			}
			return r && this.checkExpressionErrors(t, !0), i > -1 && (t.parenthesizedAssign = i), s > -1 && (t.trailingComma = s), a
		}, J.parseMaybeConditional = function(e, t) {
			var n = this.start,
				r = this.startLoc,
				i = this.parseExprOps(e, t);
			if (this.checkExpressionErrors(t)) return i;
			if (this.eat(w.question)) {
				var s = this.startNodeAt(n, r);
				return s.test = i, s.consequent = this.parseMaybeAssign(), this.expect(w.colon), s.alternate = this.parseMaybeAssign(e), this.finishNode(s, "ConditionalExpression")
			}
			return i
		}, J.parseExprOps = function(e, t) {
			var n = this.start,
				r = this.startLoc,
				i = this.parseMaybeUnary(t, !1);
			return this.checkExpressionErrors(t) ? i : i.start === n && i.type === "ArrowFunctionExpression" ? i : this.parseExprOp(i, n, r, -1, e)
		}, J.parseExprOp = function(e, t, n, r, i) {
			var s = this.type.binop;
			if (s != null && (!i || this.type !== w._in) && s > r) {
				var o = this.type === w.logicalOR || this.type === w.logicalAND,
					u = this.value;
				this.next();
				var a = this.start,
					f = this.startLoc,
					l = this.parseExprOp(this.parseMaybeUnary(null, !1), a, f, s, i),
					c = this.buildBinary(t, n, e, l, u, o);
				return this.parseExprOp(c, t, n, r, i)
			}
			return e
		}, J.buildBinary = function(e, t, n, r, i, s) {
			var o = this.startNodeAt(e, t);
			return o.left = n, o.operator = i, o.right = r, this.finishNode(o, s ? "LogicalExpression" : "BinaryExpression")
		}, J.parseMaybeUnary = function(e, t) {
			var n = this,
				r = this.start,
				i = this.startLoc,
				s;
			if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) s = this.parseAwait(), t = !0;
			else if (this.type.prefix) {
				var o = this.startNode(),
					u = this.type === w.incDec;
				o.operator = this.value, o.prefix = !0, this.next(), o.argument = this.parseMaybeUnary(null, !0), this.checkExpressionErrors(e, !0), u ? this.checkLVal(o.argument) : this.strict && o.operator === "delete" && o.argument.type === "Identifier" ? this.raiseRecoverable(o.start, "Deleting local variable in strict mode") : t = !0, s = this.finishNode(o, u ? "UpdateExpression" : "UnaryExpression")
			} else {
				s = this.parseExprSubscripts(e);
				if (this.checkExpressionErrors(e)) return s;
				while (this.type.postfix && !this.canInsertSemicolon()) {
					var a = n.startNodeAt(r, i);
					a.operator = n.value, a.prefix = !1, a.argument = s, n.checkLVal(s), n.next(), s = n.finishNode(a, "UpdateExpression")
				}
			}
			return !t && this.eat(w.starstar) ? this.buildBinary(r, i, s, this.parseMaybeUnary(null, !1), "**", !1) : s
		}, J.parseExprSubscripts = function(e) {
			var t = this.start,
				n = this.startLoc,
				r = this.parseExprAtom(e),
				i = r.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
			if (this.checkExpressionErrors(e) || i) return r;
			var s = this.parseSubscripts(r, t, n);
			return e && s.type === "MemberExpression" && (e.parenthesizedAssign >= s.start && (e.parenthesizedAssign = -1), e.parenthesizedBind >= s.start && (e.parenthesizedBind = -1)), s
		}, J.parseSubscripts = function(e, t, n, r) {
			var i = this,
				s = this.options.ecmaVersion >= 8 && e.type === "Identifier" && e.name === "async" && this.lastTokEnd === e.end && !this.canInsertSemicolon() && this.input.slice(e.start, e.end) === "async";
			for (var o = void 0;;)
				if ((o = i.eat(w.bracketL)) || i.eat(w.dot)) {
					var u = i.startNodeAt(t, n);
					u.object = e, u.property = o ? i.parseExpression() : i.parseIdent(!0), u.computed = !!o, o && i.expect(w.bracketR), e = i.finishNode(u, "MemberExpression")
				} else if (!r && i.eat(w.parenL)) {
				var a = new U,
					f = i.yieldPos,
					l = i.awaitPos;
				i.yieldPos = 0, i.awaitPos = 0;
				var c = i.parseExprList(w.parenR, i.options.ecmaVersion >= 8, !1, a);
				if (s && !i.canInsertSemicolon() && i.eat(w.arrow)) return i.checkPatternErrors(a, !1), i.checkYieldAwaitInDefaultParams(), i.yieldPos = f, i.awaitPos = l, i.parseArrowExpression(i.startNodeAt(t, n), c, !0);
				i.checkExpressionErrors(a, !0), i.yieldPos = f || i.yieldPos, i.awaitPos = l || i.awaitPos;
				var h = i.startNodeAt(t, n);
				h.callee = e, h.arguments = c, e = i.finishNode(h, "CallExpression")
			} else {
				if (i.type !== w.backQuote) return e;
				var p = i.startNodeAt(t, n);
				p.tag = e, p.quasi = i.parseTemplate({
					isTagged: !0
				}), e = i.finishNode(p, "TaggedTemplateExpression")
			}
		}, J.parseExprAtom = function(e) {
			var t, n = this.potentialArrowAt === this.start;
			switch (this.type) {
				case w._super:
					return this.inFunction || this.raise(this.start, "'super' outside of function or class"), t = this.startNode(), this.next(), this.type !== w.dot && this.type !== w.bracketL && this.type !== w.parenL && this.unexpected(), this.finishNode(t, "Super");
				case w._this:
					return t = this.startNode(), this.next(), this.finishNode(t, "ThisExpression");
				case w.name:
					var r = this.start,
						i = this.startLoc,
						s = this.containsEsc,
						o = this.parseIdent(this.type !== w.name);
					if (this.options.ecmaVersion >= 8 && !s && o.name === "async" && !this.canInsertSemicolon() && this.eat(w._function)) return this.parseFunction(this.startNodeAt(r, i), !1, !1, !0);
					if (n && !this.canInsertSemicolon()) {
						if (this.eat(w.arrow)) return this.parseArrowExpression(this.startNodeAt(r, i), [o], !1);
						if (this.options.ecmaVersion >= 8 && o.name === "async" && this.type === w.name && !s) return o = this.parseIdent(), (this.canInsertSemicolon() || !this.eat(w.arrow)) && this.unexpected(), this.parseArrowExpression(this.startNodeAt(r, i), [o], !0)
					}
					return o;
				case w.regexp:
					var u = this.value;
					return t = this.parseLiteral(u.value), t.regex = {
						pattern: u.pattern,
						flags: u.flags
					}, t;
				case w.num:
				case w.string:
					return this.parseLiteral(this.value);
				case w._null:
				case w._true:
				case w._false:
					return t = this.startNode(), t.value = this.type === w._null ? null : this.type === w._true, t.raw = this.type.keyword, this.next(), this.finishNode(t, "Literal");
				case w.parenL:
					var a = this.start,
						f = this.parseParenAndDistinguishExpression(n);
					return e && (e.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(f) && (e.parenthesizedAssign = a), e.parenthesizedBind < 0 && (e.parenthesizedBind = a)), f;
				case w.bracketL:
					return t = this.startNode(), this.next(), t.elements = this.parseExprList(w.bracketR, !0, !0, e), this.finishNode(t, "ArrayExpression");
				case w.braceL:
					return this.parseObj(!1, e);
				case w._function:
					return t = this.startNode(), this.next(), this.parseFunction(t, !1);
				case w._class:
					return this.parseClass(this.startNode(), !1);
				case w._new:
					return this.parseNew();
				case w.backQuote:
					return this.parseTemplate();
				default:
					this.unexpected()
			}
		}, J.parseLiteral = function(e) {
			var t = this.startNode();
			return t.value = e, t.raw = this.input.slice(this.start, this.end), this.next(), this.finishNode(t, "Literal")
		}, J.parseParenExpression = function() {
			this.expect(w.parenL);
			var e = this.parseExpression();
			return this.expect(w.parenR), e
		}, J.parseParenAndDistinguishExpression = function(e) {
			var t = this,
				n = this.start,
				r = this.startLoc,
				i, s = this.options.ecmaVersion >= 8;
			if (this.options.ecmaVersion >= 6) {
				this.next();
				var o = this.start,
					u = this.startLoc,
					a = [],
					f = !0,
					l = !1,
					c = new U,
					h = this.yieldPos,
					p = this.awaitPos,
					d;
				this.yieldPos = 0, this.awaitPos = 0;
				while (this.type !== w.parenR) {
					f ? f = !1 : t.expect(w.comma);
					if (s && t.afterTrailingComma(w.parenR, !0)) {
						l = !0;
						break
					}
					if (t.type === w.ellipsis) {
						d = t.start, a.push(t.parseParenItem(t.parseRestBinding())), t.type === w.comma && t.raise(t.start, "Comma is not permitted after the rest element");
						break
					}
					a.push(t.parseMaybeAssign(!1, c, t.parseParenItem))
				}
				var v = this.start,
					m = this.startLoc;
				this.expect(w.parenR);
				if (e && !this.canInsertSemicolon() && this.eat(w.arrow)) return this.checkPatternErrors(c, !1), this.checkYieldAwaitInDefaultParams(), this.yieldPos = h, this.awaitPos = p, this.parseParenArrowList(n, r, a);
				(!a.length || l) && this.unexpected(this.lastTokStart), d && this.unexpected(d), this.checkExpressionErrors(c, !0), this.yieldPos = h || this.yieldPos, this.awaitPos = p || this.awaitPos, a.length > 1 ? (i = this.startNodeAt(o, u), i.expressions = a, this.finishNodeAt(i, "SequenceExpression", v, m)) : i = a[0]
			} else i = this.parseParenExpression();
			if (this.options.preserveParens) {
				var g = this.startNodeAt(n, r);
				return g.expression = i, this.finishNode(g, "ParenthesizedExpression")
			}
			return i
		}, J.parseParenItem = function(e) {
			return e
		}, J.parseParenArrowList = function(e, t, n) {
			return this.parseArrowExpression(this.startNodeAt(e, t), n)
		};
		var K = [];
		J.parseNew = function() {
			var e = this.startNode(),
				t = this.parseIdent(!0);
			if (this.options.ecmaVersion >= 6 && this.eat(w.dot)) {
				e.meta = t;
				var n = this.containsEsc;
				return e.property = this.parseIdent(!0), (e.property.name !== "target" || n) && this.raiseRecoverable(e.property.start, "The only valid meta property for new is new.target"), this.inFunction || this.raiseRecoverable(e.start, "new.target can only be used in functions"), this.finishNode(e, "MetaProperty")
			}
			var r = this.start,
				i = this.startLoc;
			return e.callee = this.parseSubscripts(this.parseExprAtom(), r, i, !0), this.eat(w.parenL) ? e.arguments = this.parseExprList(w.parenR, this.options.ecmaVersion >= 8, !1) : e.arguments = K, this.finishNode(e, "NewExpression")
		}, J.parseTemplateElement = function(e) {
			var t = e.isTagged,
				n = this.startNode();
			return this.type === w.invalidTemplate ? (t || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), n.value = {
				raw: this.value,
				cooked: null
			}) : n.value = {
				raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
				cooked: this.value
			}, this.next(), n.tail = this.type === w.backQuote, this.finishNode(n, "TemplateElement")
		}, J.parseTemplate = function(e) {
			var t = this;
			e === void 0 && (e = {});
			var n = e.isTagged;
			n === void 0 && (n = !1);
			var r = this.startNode();
			this.next(), r.expressions = [];
			var i = this.parseTemplateElement({
				isTagged: n
			});
			r.quasis = [i];
			while (!i.tail) t.expect(w.dollarBraceL), r.expressions.push(t.parseExpression()), t.expect(w.braceR), r.quasis.push(i = t.parseTemplateElement({
				isTagged: n
			}));
			return this.next(), this.finishNode(r, "TemplateLiteral")
		}, J.isAsyncProp = function(e) {
			return !e.computed && e.key.type === "Identifier" && e.key.name === "async" && (this.type === w.name || this.type === w.num || this.type === w.string || this.type === w.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === w.star) && !E.test(this.input.slice(this.lastTokEnd, this.start))
		}, J.parseObj = function(e, t) {
			var n = this,
				r = this.startNode(),
				i = !0,
				s = {};
			r.properties = [], this.next();
			while (!this.eat(w.braceR)) {
				if (!i) {
					n.expect(w.comma);
					if (n.afterTrailingComma(w.braceR)) break
				} else i = !1;
				var o = n.parseProperty(e, t);
				e || n.checkPropClash(o, s, t), r.properties.push(o)
			}
			return this.finishNode(r, e ? "ObjectPattern" : "ObjectExpression")
		}, J.parseProperty = function(e, t) {
			var n = this.startNode(),
				r, i, s, o;
			if (this.options.ecmaVersion >= 9 && this.eat(w.ellipsis)) return e ? (n.argument = this.parseIdent(!1), this.type === w.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.finishNode(n, "RestElement")) : (this.type === w.parenL && t && (t.parenthesizedAssign < 0 && (t.parenthesizedAssign = this.start), t.parenthesizedBind < 0 && (t.parenthesizedBind = this.start)), n.argument = this.parseMaybeAssign(!1, t), this.type === w.comma && t && t.trailingComma < 0 && (t.trailingComma = this.start), this.finishNode(n, "SpreadElement"));
			if (this.options.ecmaVersion >= 6) {
				n.method = !1, n.shorthand = !1;
				if (e || t) s = this.start, o = this.startLoc;
				e || (r = this.eat(w.star))
			}
			var u = this.containsEsc;
			return this.parsePropertyName(n), !e && !u && this.options.ecmaVersion >= 8 && !r && this.isAsyncProp(n) ? (i = !0, r = this.options.ecmaVersion >= 9 && this.eat(w.star), this.parsePropertyName(n, t)) : i = !1, this.parsePropertyValue(n, e, r, i, s, o, t, u), this.finishNode(n, "Property")
		}, J.parsePropertyValue = function(e, t, n, r, i, s, o, u) {
			(n || r) && this.type === w.colon && this.unexpected();
			if (this.eat(w.colon)) e.value = t ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(!1, o), e.kind = "init";
			else if (this.options.ecmaVersion >= 6 && this.type === w.parenL) t && this.unexpected(), e.kind = "init", e.method = !0, e.value = this.parseMethod(n, r);
			else if (!t && !u && this.options.ecmaVersion >= 5 && !e.computed && e.key.type === "Identifier" && (e.key.name === "get" || e.key.name === "set") && this.type !== w.comma && this.type !== w.braceR) {
				(n || r) && this.unexpected(), e.kind = e.key.name, this.parsePropertyName(e), e.value = this.parseMethod(!1);
				var a = e.kind === "get" ? 0 : 1;
				if (e.value.params.length !== a) {
					var f = e.value.start;
					e.kind === "get" ? this.raiseRecoverable(f, "getter should have no params") : this.raiseRecoverable(f, "setter should have exactly one param")
				} else e.kind === "set" && e.value.params[0].type === "RestElement" && this.raiseRecoverable(e.value.params[0].start, "Setter cannot use rest params")
			} else this.options.ecmaVersion >= 6 && !e.computed && e.key.type === "Identifier" ? (this.checkUnreserved(e.key), e.kind = "init", t ? e.value = this.parseMaybeDefault(i, s, e.key) : this.type === w.eq && o ? (o.shorthandAssign < 0 && (o.shorthandAssign = this.start), e.value = this.parseMaybeDefault(i, s, e.key)) : e.value = e.key, e.shorthand = !0) : this.unexpected()
		}, J.parsePropertyName = function(e) {
			if (this.options.ecmaVersion >= 6) {
				if (this.eat(w.bracketL)) return e.computed = !0, e.key = this.parseMaybeAssign(), this.expect(w.bracketR), e.key;
				e.computed = !1
			}
			return e.key = this.type === w.num || this.type === w.string ? this.parseExprAtom() : this.parseIdent(!0)
		}, J.initFunction = function(e) {
			e.id = null, this.options.ecmaVersion >= 6 && (e.generator = !1, e.expression = !1), this.options.ecmaVersion >= 8 && (e.async = !1)
		}, J.parseMethod = function(e, t) {
			var n = this.startNode(),
				r = this.inGenerator,
				i = this.inAsync,
				s = this.yieldPos,
				o = this.awaitPos,
				u = this.inFunction;
			return this.initFunction(n), this.options.ecmaVersion >= 6 && (n.generator = e), this.options.ecmaVersion >= 8 && (n.async = !!t), this.inGenerator = n.generator, this.inAsync = n.async, this.yieldPos = 0, this.awaitPos = 0, this.inFunction = !0, this.enterFunctionScope(), this.expect(w.parenL), n.params = this.parseBindingList(w.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(n, !1), this.inGenerator = r, this.inAsync = i, this.yieldPos = s, this.awaitPos = o, this.inFunction = u, this.finishNode(n, "FunctionExpression")
		}, J.parseArrowExpression = function(e, t, n) {
			var r = this.inGenerator,
				i = this.inAsync,
				s = this.yieldPos,
				o = this.awaitPos,
				u = this.inFunction;
			return this.enterFunctionScope(), this.initFunction(e), this.options.ecmaVersion >= 8 && (e.async = !!n), this.inGenerator = !1, this.inAsync = e.async, this.yieldPos = 0, this.awaitPos = 0, this.inFunction = !0, e.params = this.toAssignableList(t, !0), this.parseFunctionBody(e, !0), this.inGenerator = r, this.inAsync = i, this.yieldPos = s, this.awaitPos = o, this.inFunction = u, this.finishNode(e, "ArrowFunctionExpression")
		}, J.parseFunctionBody = function(e, t) {
			var n = t && this.type !== w.braceL,
				r = this.strict,
				i = !1;
			if (n) e.body = this.parseMaybeAssign(), e.expression = !0, this.checkParams(e, !1);
			else {
				var s = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(e.params);
				if (!r || s) i = this.strictDirective(this.end), i && s && this.raiseRecoverable(e.start, "Illegal 'use strict' directive in function with non-simple parameter list");
				var o = this.labels;
				this.labels = [], i && (this.strict = !0), this.checkParams(e, !r && !i && !t && this.isSimpleParamList(e.params)), e.body = this.parseBlock(!1), e.expression = !1, this.adaptDirectivePrologue(e.body.body), this.labels = o
			}
			this.exitFunctionScope(), this.strict && e.id && this.checkLVal(e.id, "none"), this.strict = r
		}, J.isSimpleParamList = function(e) {
			for (var t = 0, n = e; t < n.length; t += 1) {
				var r = n[t];
				if (r.type !== "Identifier") return !1
			}
			return !0
		}, J.checkParams = function(e, t) {
			var n = this,
				r = {};
			for (var i = 0, s = e.params; i < s.length; i += 1) {
				var o = s[i];
				n.checkLVal(o, "var", t ? null : r)
			}
		}, J.parseExprList = function(e, t, n, r) {
			var i = this,
				s = [],
				o = !0;
			while (!this.eat(e)) {
				if (!o) {
					i.expect(w.comma);
					if (t && i.afterTrailingComma(e)) break
				} else o = !1;
				var u = void 0;
				n && i.type === w.comma ? u = null : i.type === w.ellipsis ? (u = i.parseSpread(r), r && i.type === w.comma && r.trailingComma < 0 && (r.trailingComma = i.start)) : u = i.parseMaybeAssign(!1, r), s.push(u)
			}
			return s
		}, J.checkUnreserved = function(e) {
			var t = e.start,
				n = e.end,
				r = e.name;
			this.inGenerator && r === "yield" && this.raiseRecoverable(t, "Can not use 'yield' as identifier inside a generator"), this.inAsync && r === "await" && this.raiseRecoverable(t, "Can not use 'await' as identifier inside an async function"), this.isKeyword(r) && this.raise(t, "Unexpected keyword '" + r + "'");
			if (this.options.ecmaVersion < 6 && this.input.slice(t, n).indexOf("\\") !== -1) return;
			var i = this.strict ? this.reservedWordsStrict : this.reservedWords;
			i.test(r) && (!this.inAsync && r === "await" && this.raiseRecoverable(t, "Can not use keyword 'await' outside an async function"), this.raiseRecoverable(t, "The keyword '" + r + "' is reserved"))
		}, J.parseIdent = function(e, t) {
			var n = this.startNode();
			return e && this.options.allowReserved === "never" && (e = !1), this.type === w.name ? n.name = this.value : this.type.keyword ? (n.name = this.type.keyword, (n.name === "class" || n.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46) && this.context.pop()) : this.unexpected(), this.next(), this.finishNode(n, "Identifier"), e || this.checkUnreserved(n), n
		}, J.parseYield = function() {
			this.yieldPos || (this.yieldPos = this.start);
			var e = this.startNode();
			return this.next(), this.type === w.semi || this.canInsertSemicolon() || this.type !== w.star && !this.type.startsExpr ? (e.delegate = !1, e.argument = null) : (e.delegate = this.eat(w.star), e.argument = this.parseMaybeAssign()), this.finishNode(e, "YieldExpression")
		}, J.parseAwait = function() {
			this.awaitPos || (this.awaitPos = this.start);
			var e = this.startNode();
			return this.next(), e.argument = this.parseMaybeUnary(null, !0), this.finishNode(e, "AwaitExpression")
		};
		var Q = I.prototype;
		Q.raise = function(e, t) {
			var n = D(this.input, e);
			t += " (" + n.line + ":" + n.column + ")";
			var r = new SyntaxError(t);
			throw r.pos = e, r.loc = n, r.raisedAt = this.pos, r
		}, Q.raiseRecoverable = Q.raise, Q.curPosition = function() {
			if (this.options.locations) return new M(this.curLine, this.pos - this.lineStart)
		};
		var G = I.prototype,
			Y = Object.assign || function(e) {
				var t = [],
					n = arguments.length - 1;
				while (n-- > 0) t[n] = arguments[n + 1];
				for (var r = 0, i = t; r < i.length; r += 1) {
					var s = i[r];
					for (var o in s) A(s, o) && (e[o] = s[o])
				}
				return e
			};
		G.enterFunctionScope = function() {
			this.scopeStack.push({
				"var": {},
				lexical: {},
				childVar: {},
				parentLexical: {}
			})
		}, G.exitFunctionScope = function() {
			this.scopeStack.pop()
		}, G.enterLexicalScope = function() {
			var e = this.scopeStack[this.scopeStack.length - 1],
				t = {
					"var": {},
					lexical: {},
					childVar: {},
					parentLexical: {}
				};
			this.scopeStack.push(t), Y(t.parentLexical, e.lexical, e.parentLexical)
		}, G.exitLexicalScope = function() {
			var e = this.scopeStack.pop(),
				t = this.scopeStack[this.scopeStack.length - 1];
			Y(t.childVar, e.var, e.childVar)
		}, G.canDeclareVarName = function(e) {
			var t = this.scopeStack[this.scopeStack.length - 1];
			return !A(t.lexical, e) && !A(t.parentLexical, e)
		}, G.canDeclareLexicalName = function(e) {
			var t = this.scopeStack[this.scopeStack.length - 1];
			return !A(t.lexical, e) && !A(t.var, e) && !A(t.childVar, e)
		}, G.declareVarName = function(e) {
			this.scopeStack[this.scopeStack.length - 1].var[e] = !0
		}, G.declareLexicalName = function(e) {
			this.scopeStack[this.scopeStack.length - 1].lexical[e] = !0
		};
		var Z = function(t, n, r) {
				this.type = "", this.start = n, this.end = 0, t.options.locations && (this.loc = new _(t, r)), t.options.directSourceFile && (this.sourceFile = t.options.directSourceFile), t.options.ranges && (this.range = [n, 0])
			},
			et = I.prototype;
		et.startNode = function() {
			return new Z(this, this.start, this.startLoc)
		}, et.startNodeAt = function(e, t) {
			return new Z(this, e, t)
		}, et.finishNode = function(e, t) {
			return tt.call(this, e, t, this.lastTokEnd, this.lastTokEndLoc)
		}, et.finishNodeAt = function(e, t, n, r) {
			return tt.call(this, e, t, n, r)
		};
		var nt = function(t, n, r, i, s) {
				this.token = t, this.isExpr = !!n, this.preserveSpace = !!r, this.override = i, this.generator = !!s
			},
			rt = {
				b_stat: new nt("{", !1),
				b_expr: new nt("{", !0),
				b_tmpl: new nt("${", !1),
				p_stat: new nt("(", !1),
				p_expr: new nt("(", !0),
				q_tmpl: new nt("`", !0, !0, function(e) {
					return e.tryReadTemplateToken()
				}),
				f_stat: new nt("function", !1),
				f_expr: new nt("function", !0),
				f_expr_gen: new nt("function", !0, !1, null, !0),
				f_gen: new nt("function", !1, !1, null, !0)
			},
			it = I.prototype;
		it.initialContext = function() {
			return [rt.b_stat]
		}, it.braceIsBlock = function(e) {
			var t = this.curContext();
			return t === rt.f_expr || t === rt.f_stat ? !0 : e !== w.colon || t !== rt.b_stat && t !== rt.b_expr ? e === w._return || e === w.name && this.exprAllowed ? E.test(this.input.slice(this.lastTokEnd, this.start)) : e === w._else || e === w.semi || e === w.eof || e === w.parenR || e === w.arrow ? !0 : e === w.braceL ? t === rt.b_stat : e === w._var || e === w.name ? !1 : !this.exprAllowed : !t.isExpr
		}, it.inGeneratorContext = function() {
			var e = this;
			for (var t = this.context.length - 1; t >= 1; t--) {
				var n = e.context[t];
				if (n.token === "function") return n.generator
			}
			return !1
		}, it.updateContext = function(e) {
			var t, n = this.type;
			n.keyword && e === w.dot ? this.exprAllowed = !1 : (t = n.updateContext) ? t.call(this, e) : this.exprAllowed = n.beforeExpr
		}, w.parenR.updateContext = w.braceR.updateContext = function() {
			if (this.context.length === 1) {
				this.exprAllowed = !0;
				return
			}
			var e = this.context.pop();
			e === rt.b_stat && this.curContext().token === "function" && (e = this.context.pop()), this.exprAllowed = !e.isExpr
		}, w.braceL.updateContext = function(e) {
			this.context.push(this.braceIsBlock(e) ? rt.b_stat : rt.b_expr), this.exprAllowed = !0
		}, w.dollarBraceL.updateContext = function() {
			this.context.push(rt.b_tmpl), this.exprAllowed = !0
		}, w.parenL.updateContext = function(e) {
			var t = e === w._if || e === w._for || e === w._with || e === w._while;
			this.context.push(t ? rt.p_stat : rt.p_expr), this.exprAllowed = !0
		}, w.incDec.updateContext = function() {}, w._function.updateContext = w._class.updateContext = function(e) {
			e.beforeExpr && e !== w.semi && e !== w._else && (e !== w.colon && e !== w.braceL || this.curContext() !== rt.b_stat) ? this.context.push(rt.f_expr) : this.context.push(rt.f_stat), this.exprAllowed = !1
		}, w.backQuote.updateContext = function() {
			this.curContext() === rt.q_tmpl ? this.context.pop() : this.context.push(rt.q_tmpl), this.exprAllowed = !1
		}, w.star.updateContext = function(e) {
			if (e === w._function) {
				var t = this.context.length - 1;
				this.context[t] === rt.f_expr ? this.context[t] = rt.f_expr_gen : this.context[t] = rt.f_gen
			}
			this.exprAllowed = !0
		}, w.name.updateContext = function(e) {
			var t = !1;
			this.options.ecmaVersion >= 6 && (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) && (t = !0), this.exprAllowed = t
		};
		var st = {
			$LONE: ["ASCII", "ASCII_Hex_Digit", "AHex", "Alphabetic", "Alpha", "Any", "Assigned", "Bidi_Control", "Bidi_C", "Bidi_Mirrored", "Bidi_M", "Case_Ignorable", "CI", "Cased", "Changes_When_Casefolded", "CWCF", "Changes_When_Casemapped", "CWCM", "Changes_When_Lowercased", "CWL", "Changes_When_NFKC_Casefolded", "CWKCF", "Changes_When_Titlecased", "CWT", "Changes_When_Uppercased", "CWU", "Dash", "Default_Ignorable_Code_Point", "DI", "Deprecated", "Dep", "Diacritic", "Dia", "Emoji", "Emoji_Component", "Emoji_Modifier", "Emoji_Modifier_Base", "Emoji_Presentation", "Extender", "Ext", "Grapheme_Base", "Gr_Base", "Grapheme_Extend", "Gr_Ext", "Hex_Digit", "Hex", "IDS_Binary_Operator", "IDSB", "IDS_Trinary_Operator", "IDST", "ID_Continue", "IDC", "ID_Start", "IDS", "Ideographic", "Ideo", "Join_Control", "Join_C", "Logical_Order_Exception", "LOE", "Lowercase", "Lower", "Math", "Noncharacter_Code_Point", "NChar", "Pattern_Syntax", "Pat_Syn", "Pattern_White_Space", "Pat_WS", "Quotation_Mark", "QMark", "Radical", "Regional_Indicator", "RI", "Sentence_Terminal", "STerm", "Soft_Dotted", "SD", "Terminal_Punctuation", "Term", "Unified_Ideograph", "UIdeo", "Uppercase", "Upper", "Variation_Selector", "VS", "White_Space", "space", "XID_Continue", "XIDC", "XID_Start", "XIDS"],
			General_Category: ["Cased_Letter", "LC", "Close_Punctuation", "Pe", "Connector_Punctuation", "Pc", "Control", "Cc", "cntrl", "Currency_Symbol", "Sc", "Dash_Punctuation", "Pd", "Decimal_Number", "Nd", "digit", "Enclosing_Mark", "Me", "Final_Punctuation", "Pf", "Format", "Cf", "Initial_Punctuation", "Pi", "Letter", "L", "Letter_Number", "Nl", "Line_Separator", "Zl", "Lowercase_Letter", "Ll", "Mark", "M", "Combining_Mark", "Math_Symbol", "Sm", "Modifier_Letter", "Lm", "Modifier_Symbol", "Sk", "Nonspacing_Mark", "Mn", "Number", "N", "Open_Punctuation", "Ps", "Other", "C", "Other_Letter", "Lo", "Other_Number", "No", "Other_Punctuation", "Po", "Other_Symbol", "So", "Paragraph_Separator", "Zp", "Private_Use", "Co", "Punctuation", "P", "punct", "Separator", "Z", "Space_Separator", "Zs", "Spacing_Mark", "Mc", "Surrogate", "Cs", "Symbol", "S", "Titlecase_Letter", "Lt", "Unassigned", "Cn", "Uppercase_Letter", "Lu"],
			Script: ["Adlam", "Adlm", "Ahom", "Anatolian_Hieroglyphs", "Hluw", "Arabic", "Arab", "Armenian", "Armn", "Avestan", "Avst", "Balinese", "Bali", "Bamum", "Bamu", "Bassa_Vah", "Bass", "Batak", "Batk", "Bengali", "Beng", "Bhaiksuki", "Bhks", "Bopomofo", "Bopo", "Brahmi", "Brah", "Braille", "Brai", "Buginese", "Bugi", "Buhid", "Buhd", "Canadian_Aboriginal", "Cans", "Carian", "Cari", "Caucasian_Albanian", "Aghb", "Chakma", "Cakm", "Cham", "Cherokee", "Cher", "Common", "Zyyy", "Coptic", "Copt", "Qaac", "Cuneiform", "Xsux", "Cypriot", "Cprt", "Cyrillic", "Cyrl", "Deseret", "Dsrt", "Devanagari", "Deva", "Duployan", "Dupl", "Egyptian_Hieroglyphs", "Egyp", "Elbasan", "Elba", "Ethiopic", "Ethi", "Georgian", "Geor", "Glagolitic", "Glag", "Gothic", "Goth", "Grantha", "Gran", "Greek", "Grek", "Gujarati", "Gujr", "Gurmukhi", "Guru", "Han", "Hani", "Hangul", "Hang", "Hanunoo", "Hano", "Hatran", "Hatr", "Hebrew", "Hebr", "Hiragana", "Hira", "Imperial_Aramaic", "Armi", "Inherited", "Zinh", "Qaai", "Inscriptional_Pahlavi", "Phli", "Inscriptional_Parthian", "Prti", "Javanese", "Java", "Kaithi", "Kthi", "Kannada", "Knda", "Katakana", "Kana", "Kayah_Li", "Kali", "Kharoshthi", "Khar", "Khmer", "Khmr", "Khojki", "Khoj", "Khudawadi", "Sind", "Lao", "Laoo", "Latin", "Latn", "Lepcha", "Lepc", "Limbu", "Limb", "Linear_A", "Lina", "Linear_B", "Linb", "Lisu", "Lycian", "Lyci", "Lydian", "Lydi", "Mahajani", "Mahj", "Malayalam", "Mlym", "Mandaic", "Mand", "Manichaean", "Mani", "Marchen", "Marc", "Masaram_Gondi", "Gonm", "Meetei_Mayek", "Mtei", "Mende_Kikakui", "Mend", "Meroitic_Cursive", "Merc", "Meroitic_Hieroglyphs", "Mero", "Miao", "Plrd", "Modi", "Mongolian", "Mong", "Mro", "Mroo", "Multani", "Mult", "Myanmar", "Mymr", "Nabataean", "Nbat", "New_Tai_Lue", "Talu", "Newa", "Nko", "Nkoo", "Nushu", "Nshu", "Ogham", "Ogam", "Ol_Chiki", "Olck", "Old_Hungarian", "Hung", "Old_Italic", "Ital", "Old_North_Arabian", "Narb", "Old_Permic", "Perm", "Old_Persian", "Xpeo", "Old_South_Arabian", "Sarb", "Old_Turkic", "Orkh", "Oriya", "Orya", "Osage", "Osge", "Osmanya", "Osma", "Pahawh_Hmong", "Hmng", "Palmyrene", "Palm", "Pau_Cin_Hau", "Pauc", "Phags_Pa", "Phag", "Phoenician", "Phnx", "Psalter_Pahlavi", "Phlp", "Rejang", "Rjng", "Runic", "Runr", "Samaritan", "Samr", "Saurashtra", "Saur", "Sharada", "Shrd", "Shavian", "Shaw", "Siddham", "Sidd", "SignWriting", "Sgnw", "Sinhala", "Sinh", "Sora_Sompeng", "Sora", "Soyombo", "Soyo", "Sundanese", "Sund", "Syloti_Nagri", "Sylo", "Syriac", "Syrc", "Tagalog", "Tglg", "Tagbanwa", "Tagb", "Tai_Le", "Tale", "Tai_Tham", "Lana", "Tai_Viet", "Tavt", "Takri", "Takr", "Tamil", "Taml", "Tangut", "Tang", "Telugu", "Telu", "Thaana", "Thaa", "Thai", "Tibetan", "Tibt", "Tifinagh", "Tfng", "Tirhuta", "Tirh", "Ugaritic", "Ugar", "Vai", "Vaii", "Warang_Citi", "Wara", "Yi", "Yiii", "Zanabazar_Square", "Zanb"]
		};
		Array.prototype.push.apply(st.$LONE, st.General_Category), st.gc = st.General_Category, st.sc = st.Script_Extensions = st.scx = st.Script;
		var ot = I.prototype,
			ut = function(t) {
				this.parser = t, this.validFlags = "gim" + (t.options.ecmaVersion >= 6 ? "uy" : "") + (t.options.ecmaVersion >= 9 ? "s" : ""), this.source = "", this.flags = "", this.start = 0, this.switchU = !1, this.switchN = !1, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = !1, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = []
			};
		ut.prototype.reset = function(t, n, r) {
			var i = r.indexOf("u") !== -1;
			this.start = t | 0, this.source = n + "", this.flags = r, this.switchU = i && this.parser.options.ecmaVersion >= 6, this.switchN = i && this.parser.options.ecmaVersion >= 9
		}, ut.prototype.raise = function(t) {
			this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + t)
		}, ut.prototype.at = function(t) {
			var n = this.source,
				r = n.length;
			if (t >= r) return -1;
			var i = n.charCodeAt(t);
			return !this.switchU || i <= 55295 || i >= 57344 || t + 1 >= r ? i : (i << 10) + n.charCodeAt(t + 1) - 56613888
		}, ut.prototype.nextIndex = function(t) {
			var n = this.source,
				r = n.length;
			if (t >= r) return r;
			var i = n.charCodeAt(t);
			return !this.switchU || i <= 55295 || i >= 57344 || t + 1 >= r ? t + 1 : t + 2
		}, ut.prototype.current = function() {
			return this.at(this.pos)
		}, ut.prototype.lookahead = function() {
			return this.at(this.nextIndex(this.pos))
		}, ut.prototype.advance = function() {
			this.pos = this.nextIndex(this.pos)
		}, ut.prototype.eat = function(t) {
			return this.current() === t ? (this.advance(), !0) : !1
		}, ot.validateRegExpFlags = function(e) {
			var t = this,
				n = e.validFlags,
				r = e.flags;
			for (var i = 0; i < r.length; i++) {
				var s = r.charAt(i);
				n.indexOf(s) === -1 && t.raise(e.start, "Invalid regular expression flag"), r.indexOf(s, i + 1) > -1 && t.raise(e.start, "Duplicate regular expression flag")
			}
		}, ot.validateRegExpPattern = function(e) {
			this.regexp_pattern(e), !e.switchN && this.options.ecmaVersion >= 9 && e.groupNames.length > 0 && (e.switchN = !0, this.regexp_pattern(e))
		}, ot.regexp_pattern = function(e) {
			e.pos = 0, e.lastIntValue = 0, e.lastStringValue = "", e.lastAssertionIsQuantifiable = !1, e.numCapturingParens = 0, e.maxBackReference = 0, e.groupNames.length = 0, e.backReferenceNames.length = 0, this.regexp_disjunction(e), e.pos !== e.source.length && (e.eat(41) && e.raise("Unmatched ')'"), (e.eat(93) || e.eat(125)) && e.raise("Lone quantifier brackets")), e.maxBackReference > e.numCapturingParens && e.raise("Invalid escape");
			for (var t = 0, n = e.backReferenceNames; t < n.length; t += 1) {
				var r = n[t];
				e.groupNames.indexOf(r) === -1 && e.raise("Invalid named capture referenced")
			}
		}, ot.regexp_disjunction = function(e) {
			var t = this;
			this.regexp_alternative(e);
			while (e.eat(124)) t.regexp_alternative(e);
			this.regexp_eatQuantifier(e, !0) && e.raise("Nothing to repeat"), e.eat(123) && e.raise("Lone quantifier brackets")
		}, ot.regexp_alternative = function(e) {
			while (e.pos < e.source.length && this.regexp_eatTerm(e));
		}, ot.regexp_eatTerm = function(e) {
			return this.regexp_eatAssertion(e) ? (e.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(e) && e.switchU && e.raise("Invalid quantifier"), !0) : (e.switchU ? this.regexp_eatAtom(e) : this.regexp_eatExtendedAtom(e)) ? (this.regexp_eatQuantifier(e), !0) : !1
		}, ot.regexp_eatAssertion = function(e) {
			var t = e.pos;
			e.lastAssertionIsQuantifiable = !1;
			if (e.eat(94) || e.eat(36)) return !0;
			if (e.eat(92)) {
				if (e.eat(66) || e.eat(98)) return !0;
				e.pos = t
			}
			if (e.eat(40) && e.eat(63)) {
				var n = !1;
				this.options.ecmaVersion >= 9 && (n = e.eat(60));
				if (e.eat(61) || e.eat(33)) return this.regexp_disjunction(e), e.eat(41) || e.raise("Unterminated group"), e.lastAssertionIsQuantifiable = !n, !0
			}
			return e.pos = t, !1
		}, ot.regexp_eatQuantifier = function(e, t) {
			return t === void 0 && (t = !1), this.regexp_eatQuantifierPrefix(e, t) ? (e.eat(63), !0) : !1
		}, ot.regexp_eatQuantifierPrefix = function(e, t) {
			return e.eat(42) || e.eat(43) || e.eat(63) || this.regexp_eatBracedQuantifier(e, t)
		}, ot.regexp_eatBracedQuantifier = function(e, t) {
			var n = e.pos;
			if (e.eat(123)) {
				var r = 0,
					i = -1;
				if (this.regexp_eatDecimalDigits(e)) {
					r = e.lastIntValue, e.eat(44) && this.regexp_eatDecimalDigits(e) && (i = e.lastIntValue);
					if (e.eat(125)) return i !== -1 && i < r && !t && e.raise("numbers out of order in {} quantifier"), !0
				}
				e.switchU && !t && e.raise("Incomplete quantifier"), e.pos = n
			}
			return !1
		}, ot.regexp_eatAtom = function(e) {
			return this.regexp_eatPatternCharacters(e) || e.eat(46) || this.regexp_eatReverseSolidusAtomEscape(e) || this.regexp_eatCharacterClass(e) || this.regexp_eatUncapturingGroup(e) || this.regexp_eatCapturingGroup(e)
		}, ot.regexp_eatReverseSolidusAtomEscape = function(e) {
			var t = e.pos;
			if (e.eat(92)) {
				if (this.regexp_eatAtomEscape(e)) return !0;
				e.pos = t
			}
			return !1
		}, ot.regexp_eatUncapturingGroup = function(e) {
			var t = e.pos;
			if (e.eat(40)) {
				if (e.eat(63) && e.eat(58)) {
					this.regexp_disjunction(e);
					if (e.eat(41)) return !0;
					e.raise("Unterminated group")
				}
				e.pos = t
			}
			return !1
		}, ot.regexp_eatCapturingGroup = function(e) {
			if (e.eat(40)) {
				this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(e) : e.current() === 63 && e.raise("Invalid group"), this.regexp_disjunction(e);
				if (e.eat(41)) return e.numCapturingParens += 1, !0;
				e.raise("Unterminated group")
			}
			return !1
		}, ot.regexp_eatExtendedAtom = function(e) {
			return e.eat(46) || this.regexp_eatReverseSolidusAtomEscape(e) || this.regexp_eatCharacterClass(e) || this.regexp_eatUncapturingGroup(e) || this.regexp_eatCapturingGroup(e) || this.regexp_eatInvalidBracedQuantifier(e) || this.regexp_eatExtendedPatternCharacter(e)
		}, ot.regexp_eatInvalidBracedQuantifier = function(e) {
			return this.regexp_eatBracedQuantifier(e, !0) && e.raise("Nothing to repeat"), !1
		}, ot.regexp_eatSyntaxCharacter = function(e) {
			var t = e.current();
			return ft(t) ? (e.lastIntValue = t, e.advance(), !0) : !1
		}, ot.regexp_eatPatternCharacters = function(e) {
			var t = e.pos,
				n = 0;
			while ((n = e.current()) !== -1 && !ft(n)) e.advance();
			return e.pos !== t
		}, ot.regexp_eatExtendedPatternCharacter = function(e) {
			var t = e.current();
			return t === -1 || t === 36 || t >= 40 && t <= 43 || t === 46 || t === 63 || t === 91 || t === 94 || t === 124 ? !1 : (e.advance(), !0)
		}, ot.regexp_groupSpecifier = function(e) {
			if (e.eat(63)) {
				if (this.regexp_eatGroupName(e)) {
					e.groupNames.indexOf(e.lastStringValue) !== -1 && e.raise("Duplicate capture group name"), e.groupNames.push(e.lastStringValue);
					return
				}
				e.raise("Invalid group")
			}
		}, ot.regexp_eatGroupName = function(e) {
			e.lastStringValue = "";
			if (e.eat(60)) {
				if (this.regexp_eatRegExpIdentifierName(e) && e.eat(62)) return !0;
				e.raise("Invalid capture group name")
			}
			return !1
		}, ot.regexp_eatRegExpIdentifierName = function(e) {
			e.lastStringValue = "";
			if (this.regexp_eatRegExpIdentifierStart(e)) {
				e.lastStringValue += at(e.lastIntValue);
				while (this.regexp_eatRegExpIdentifierPart(e)) e.lastStringValue += at(e.lastIntValue);
				return !0
			}
			return !1
		}, ot.regexp_eatRegExpIdentifierStart = function(e) {
			var t = e.pos,
				n = e.current();
			return e.advance(), n === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(e) && (n = e.lastIntValue), lt(n) ? (e.lastIntValue = n, !0) : (e.pos = t, !1)
		}, ot.regexp_eatRegExpIdentifierPart = function(e) {
			var t = e.pos,
				n = e.current();
			return e.advance(), n === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(e) && (n = e.lastIntValue), ct(n) ? (e.lastIntValue = n, !0) : (e.pos = t, !1)
		}, ot.regexp_eatAtomEscape = function(e) {
			return this.regexp_eatBackReference(e) || this.regexp_eatCharacterClassEscape(e) || this.regexp_eatCharacterEscape(e) || e.switchN && this.regexp_eatKGroupName(e) ? !0 : (e.switchU && (e.current() === 99 && e.raise("Invalid unicode escape"), e.raise("Invalid escape")), !1)
		}, ot.regexp_eatBackReference = function(e) {
			var t = e.pos;
			if (this.regexp_eatDecimalEscape(e)) {
				var n = e.lastIntValue;
				if (e.switchU) return n > e.maxBackReference && (e.maxBackReference = n), !0;
				if (n <= e.numCapturingParens) return !0;
				e.pos = t
			}
			return !1
		}, ot.regexp_eatKGroupName = function(e) {
			if (e.eat(107)) {
				if (this.regexp_eatGroupName(e)) return e.backReferenceNames.push(e.lastStringValue), !0;
				e.raise("Invalid named reference")
			}
			return !1
		}, ot.regexp_eatCharacterEscape = function(e) {
			return this.regexp_eatControlEscape(e) || this.regexp_eatCControlLetter(e) || this.regexp_eatZero(e) || this.regexp_eatHexEscapeSequence(e) || this.regexp_eatRegExpUnicodeEscapeSequence(e) || !e.switchU && this.regexp_eatLegacyOctalEscapeSequence(e) || this.regexp_eatIdentityEscape(e)
		}, ot.regexp_eatCControlLetter = function(e) {
			var t = e.pos;
			if (e.eat(99)) {
				if (this.regexp_eatControlLetter(e)) return !0;
				e.pos = t
			}
			return !1
		}, ot.regexp_eatZero = function(e) {
			return e.current() === 48 && !gt(e.lookahead()) ? (e.lastIntValue = 0, e.advance(), !0) : !1
		}, ot.regexp_eatControlEscape = function(e) {
			var t = e.current();
			return t === 116 ? (e.lastIntValue = 9, e.advance(), !0) : t === 110 ? (e.lastIntValue = 10, e.advance(), !0) : t === 118 ? (e.lastIntValue = 11, e.advance(), !0) : t === 102 ? (e.lastIntValue = 12, e.advance(), !0) : t === 114 ? (e.lastIntValue = 13, e.advance(), !0) : !1
		}, ot.regexp_eatControlLetter = function(e) {
			var t = e.current();
			return ht(t) ? (e.lastIntValue = t % 32, e.advance(), !0) : !1
		}, ot.regexp_eatRegExpUnicodeEscapeSequence = function(e) {
			var t = e.pos;
			if (e.eat(117)) {
				if (this.regexp_eatFixedHexDigits(e, 4)) {
					var n = e.lastIntValue;
					if (e.switchU && n >= 55296 && n <= 56319) {
						var r = e.pos;
						if (e.eat(92) && e.eat(117) && this.regexp_eatFixedHexDigits(e, 4)) {
							var i = e.lastIntValue;
							if (i >= 56320 && i <= 57343) return e.lastIntValue = (n - 55296) * 1024 + (i - 56320) + 65536, !0
						}
						e.pos = r, e.lastIntValue = n
					}
					return !0
				}
				if (e.switchU && e.eat(123) && this.regexp_eatHexDigits(e) && e.eat(125) && pt(e.lastIntValue)) return !0;
				e.switchU && e.raise("Invalid unicode escape"), e.pos = t
			}
			return !1
		}, ot.regexp_eatIdentityEscape = function(e) {
			if (e.switchU) return this.regexp_eatSyntaxCharacter(e) ? !0 : e.eat(47) ? (e.lastIntValue = 47, !0) : !1;
			var t = e.current();
			return t === 99 || !!e.switchN && t === 107 ? !1 : (e.lastIntValue = t, e.advance(), !0)
		}, ot.regexp_eatDecimalEscape = function(e) {
			e.lastIntValue = 0;
			var t = e.current();
			if (t >= 49 && t <= 57) {
				do e.lastIntValue = 10 * e.lastIntValue + (t - 48), e.advance(); while ((t = e.current()) >= 48 && t <= 57);
				return !0
			}
			return !1
		}, ot.regexp_eatCharacterClassEscape = function(e) {
			var t = e.current();
			if (dt(t)) return e.lastIntValue = -1, e.advance(), !0;
			if (e.switchU && this.options.ecmaVersion >= 9 && (t === 80 || t === 112)) {
				e.lastIntValue = -1, e.advance();
				if (e.eat(123) && this.regexp_eatUnicodePropertyValueExpression(e) && e.eat(125)) return !0;
				e.raise("Invalid property name")
			}
			return !1
		}, ot.regexp_eatUnicodePropertyValueExpression = function(e) {
			var t = e.pos;
			if (this.regexp_eatUnicodePropertyName(e) && e.eat(61)) {
				var n = e.lastStringValue;
				if (this.regexp_eatUnicodePropertyValue(e)) {
					var r = e.lastStringValue;
					return this.regexp_validateUnicodePropertyNameAndValue(e, n, r), !0
				}
			}
			e.pos = t;
			if (this.regexp_eatLoneUnicodePropertyNameOrValue(e)) {
				var i = e.lastStringValue;
				return this.regexp_validateUnicodePropertyNameOrValue(e, i), !0
			}
			return !1
		}, ot.regexp_validateUnicodePropertyNameAndValue = function(e, t, n) {
			(!st.hasOwnProperty(t) || st[t].indexOf(n) === -1) && e.raise("Invalid property name")
		}, ot.regexp_validateUnicodePropertyNameOrValue = function(e, t) {
			st.$LONE.indexOf(t) === -1 && e.raise("Invalid property name")
		}, ot.regexp_eatUnicodePropertyName = function(e) {
			var t = 0;
			e.lastStringValue = "";
			while (vt(t = e.current())) e.lastStringValue += at(t), e.advance();
			return e.lastStringValue !== ""
		}, ot.regexp_eatUnicodePropertyValue = function(e) {
			var t = 0;
			e.lastStringValue = "";
			while (mt(t = e.current())) e.lastStringValue += at(t), e.advance();
			return e.lastStringValue !== ""
		}, ot.regexp_eatLoneUnicodePropertyNameOrValue = function(e) {
			return this.regexp_eatUnicodePropertyValue(e)
		}, ot.regexp_eatCharacterClass = function(e) {
			if (e.eat(91)) {
				e.eat(94), this.regexp_classRanges(e);
				if (e.eat(93)) return !0;
				e.raise("Unterminated character class")
			}
			return !1
		}, ot.regexp_classRanges = function(e) {
			var t = this;
			while (this.regexp_eatClassAtom(e)) {
				var n = e.lastIntValue;
				if (e.eat(45) && t.regexp_eatClassAtom(e)) {
					var r = e.lastIntValue;
					e.switchU && (n === -1 || r === -1) && e.raise("Invalid character class"), n !== -1 && r !== -1 && n > r && e.raise("Range out of order in character class")
				}
			}
		}, ot.regexp_eatClassAtom = function(e) {
			var t = e.pos;
			if (e.eat(92)) {
				if (this.regexp_eatClassEscape(e)) return !0;
				if (e.switchU) {
					var n = e.current();
					(n === 99 || wt(n)) && e.raise("Invalid class escape"), e.raise("Invalid escape")
				}
				e.pos = t
			}
			var r = e.current();
			return r !== 93 ? (e.lastIntValue = r, e.advance(), !0) : !1
		}, ot.regexp_eatClassEscape = function(e) {
			var t = e.pos;
			if (e.eat(98)) return e.lastIntValue = 8, !0;
			if (e.switchU && e.eat(45)) return e.lastIntValue = 45, !0;
			if (!e.switchU && e.eat(99)) {
				if (this.regexp_eatClassControlLetter(e)) return !0;
				e.pos = t
			}
			return this.regexp_eatCharacterClassEscape(e) || this.regexp_eatCharacterEscape(e)
		}, ot.regexp_eatClassControlLetter = function(e) {
			var t = e.current();
			return gt(t) || t === 95 ? (e.lastIntValue = t % 32, e.advance(), !0) : !1
		}, ot.regexp_eatHexEscapeSequence = function(e) {
			var t = e.pos;
			if (e.eat(120)) {
				if (this.regexp_eatFixedHexDigits(e, 2)) return !0;
				e.switchU && e.raise("Invalid escape"), e.pos = t
			}
			return !1
		}, ot.regexp_eatDecimalDigits = function(e) {
			var t = e.pos,
				n = 0;
			e.lastIntValue = 0;
			while (gt(n = e.current())) e.lastIntValue = 10 * e.lastIntValue + (n - 48), e.advance();
			return e.pos !== t
		}, ot.regexp_eatHexDigits = function(e) {
			var t = e.pos,
				n = 0;
			e.lastIntValue = 0;
			while (yt(n = e.current())) e.lastIntValue = 16 * e.lastIntValue + bt(n), e.advance();
			return e.pos !== t
		}, ot.regexp_eatLegacyOctalEscapeSequence = function(e) {
			if (this.regexp_eatOctalDigit(e)) {
				var t = e.lastIntValue;
				if (this.regexp_eatOctalDigit(e)) {
					var n = e.lastIntValue;
					t <= 3 && this.regexp_eatOctalDigit(e) ? e.lastIntValue = t * 64 + n * 8 + e.lastIntValue : e.lastIntValue = t * 8 + n
				} else e.lastIntValue = t;
				return !0
			}
			return !1
		}, ot.regexp_eatOctalDigit = function(e) {
			var t = e.current();
			return wt(t) ? (e.lastIntValue = t - 48, e.advance(), !0) : (e.lastIntValue = 0, !1)
		}, ot.regexp_eatFixedHexDigits = function(e, t) {
			var n = e.pos;
			e.lastIntValue = 0;
			for (var r = 0; r < t; ++r) {
				var i = e.current();
				if (!yt(i)) return e.pos = n, !1;
				e.lastIntValue = 16 * e.lastIntValue + bt(i), e.advance()
			}
			return !0
		};
		var Et = function(t) {
				this.type = t.type, this.value = t.value, this.start = t.start, this.end = t.end, t.options.locations && (this.loc = new _(t, t.startLoc, t.endLoc)), t.options.ranges && (this.range = [t.start, t.end])
			},
			St = I.prototype;
		St.next = function() {
			this.options.onToken && this.options.onToken(new Et(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken()
		}, St.getToken = function() {
			return this.next(), new Et(this)
		}, typeof Symbol != "undefined" && (St[Symbol.iterator] = function() {
			var e = this;
			return {
				next: function() {
					var t = e.getToken();
					return {
						done: t.type === w.eof,
						value: t
					}
				}
			}
		}), St.curContext = function() {
			return this.context[this.context.length - 1]
		}, St.nextToken = function() {
			var e = this.curContext();
			(!e || !e.preserveSpace) && this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition());
			if (this.pos >= this.input.length) return this.finishToken(w.eof);
			if (e.override) return e.override(this);
			this.readToken(this.fullCharCodeAtPos())
		}, St.readToken = function(e) {
			return h(e, this.options.ecmaVersion >= 6) || e === 92 ? this.readWord() : this.getTokenFromCode(e)
		}, St.fullCharCodeAtPos = function() {
			var e = this.input.charCodeAt(this.pos);
			if (e <= 55295 || e >= 57344) return e;
			var t = this.input.charCodeAt(this.pos + 1);
			return (e << 10) + t - 56613888
		}, St.skipBlockComment = function() {
			var e = this,
				t = this.options.onComment && this.curPosition(),
				n = this.pos,
				r = this.input.indexOf("*/", this.pos += 2);
			r === -1 && this.raise(this.pos - 2, "Unterminated comment"), this.pos = r + 2;
			if (this.options.locations) {
				S.lastIndex = n;
				var i;
				while ((i = S.exec(this.input)) && i.index < this.pos) ++e.curLine, e.lineStart = i.index + i[0].length
			}
			this.options.onComment && this.options.onComment(!0, this.input.slice(n + 2, r), n, this.pos, t, this.curPosition())
		}, St.skipLineComment = function(e) {
			var t = this,
				n = this.pos,
				r = this.options.onComment && this.curPosition(),
				i = this.input.charCodeAt(this.pos += e);
			while (this.pos < this.input.length && !x(i)) i = t.input.charCodeAt(++t.pos);
			this.options.onComment && this.options.onComment(!1, this.input.slice(n + e, this.pos), n, this.pos, r, this.curPosition())
		}, St.skipSpace = function() {
			var e = this;
			e: while (this.pos < this.input.length) {
				var t = e.input.charCodeAt(e.pos);
				switch (t) {
					case 32:
					case 160:
						++e.pos;
						break;
					case 13:
						e.input.charCodeAt(e.pos + 1) === 10 && ++e.pos;
					case 10:
					case 8232:
					case 8233:
						++e.pos, e.options.locations && (++e.curLine, e.lineStart = e.pos);
						break;
					case 47:
						switch (e.input.charCodeAt(e.pos + 1)) {
							case 42:
								e.skipBlockComment();
								break;
							case 47:
								e.skipLineComment(2);
								break;
							default:
								break e
						}
						break;
					default:
						if (!(t > 8 && t < 14 || t >= 5760 && T.test(String.fromCharCode(t)))) break e;
						++e.pos
				}
			}
		}, St.finishToken = function(e, t) {
			this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
			var n = this.type;
			this.type = e, this.value = t, this.updateContext(n)
		}, St.readToken_dot = function() {
			var e = this.input.charCodeAt(this.pos + 1);
			if (e >= 48 && e <= 57) return this.readNumber(!0);
			var t = this.input.charCodeAt(this.pos + 2);
			return this.options.ecmaVersion >= 6 && e === 46 && t === 46 ? (this.pos += 3, this.finishToken(w.ellipsis)) : (++this.pos, this.finishToken(w.dot))
		}, St.readToken_slash = function() {
			var e = this.input.charCodeAt(this.pos + 1);
			return this.exprAllowed ? (++this.pos, this.readRegexp()) : e === 61 ? this.finishOp(w.assign, 2) : this.finishOp(w.slash, 1)
		}, St.readToken_mult_modulo_exp = function(e) {
			var t = this.input.charCodeAt(this.pos + 1),
				n = 1,
				r = e === 42 ? w.star : w.modulo;
			return this.options.ecmaVersion >= 7 && e === 42 && t === 42 && (++n, r = w.starstar, t = this.input.charCodeAt(this.pos + 2)), t === 61 ? this.finishOp(w.assign, n + 1) : this.finishOp(r, n)
		}, St.readToken_pipe_amp = function(e) {
			var t = this.input.charCodeAt(this.pos + 1);
			return t === e ? this.finishOp(e === 124 ? w.logicalOR : w.logicalAND, 2) : t === 61 ? this.finishOp(w.assign, 2) : this.finishOp(e === 124 ? w.bitwiseOR : w.bitwiseAND, 1)
		}, St.readToken_caret = function() {
			var e = this.input.charCodeAt(this.pos + 1);
			return e === 61 ? this.finishOp(w.assign, 2) : this.finishOp(w.bitwiseXOR, 1)
		}, St.readToken_plus_min = function(e) {
			var t = this.input.charCodeAt(this.pos + 1);
			return t === e ? t === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || E.test(this.input.slice(this.lastTokEnd, this.pos))) ? (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : this.finishOp(w.incDec, 2) : t === 61 ? this.finishOp(w.assign, 2) : this.finishOp(w.plusMin, 1)
		}, St.readToken_lt_gt = function(e) {
			var t = this.input.charCodeAt(this.pos + 1),
				n = 1;
			return t === e ? (n = e === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2, this.input.charCodeAt(this.pos + n) === 61 ? this.finishOp(w.assign, n + 1) : this.finishOp(w.bitShift, n)) : t === 33 && e === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45 ? (this.skipLineComment(4), this.skipSpace(), this.nextToken()) : (t === 61 && (n = 2), this.finishOp(w.relational, n))
		}, St.readToken_eq_excl = function(e) {
			var t = this.input.charCodeAt(this.pos + 1);
			return t === 61 ? this.finishOp(w.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) : e === 61 && t === 62 && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(w.arrow)) : this.finishOp(e === 61 ? w.eq : w.prefix, 1)
		}, St.getTokenFromCode = function(e) {
			switch (e) {
				case 46:
					return this.readToken_dot();
				case 40:
					return ++this.pos, this.finishToken(w.parenL);
				case 41:
					return ++this.pos, this.finishToken(w.parenR);
				case 59:
					return ++this.pos, this.finishToken(w.semi);
				case 44:
					return ++this.pos, this.finishToken(w.comma);
				case 91:
					return ++this.pos, this.finishToken(w.bracketL);
				case 93:
					return ++this.pos, this.finishToken(w.bracketR);
				case 123:
					return ++this.pos, this.finishToken(w.braceL);
				case 125:
					return ++this.pos, this.finishToken(w.braceR);
				case 58:
					return ++this.pos, this.finishToken(w.colon);
				case 63:
					return ++this.pos, this.finishToken(w.question);
				case 96:
					if (this.options.ecmaVersion < 6) break;
					return ++this.pos, this.finishToken(w.backQuote);
				case 48:
					var t = this.input.charCodeAt(this.pos + 1);
					if (t === 120 || t === 88) return this.readRadixNumber(16);
					if (this.options.ecmaVersion >= 6) {
						if (t === 111 || t === 79) return this.readRadixNumber(8);
						if (t === 98 || t === 66) return this.readRadixNumber(2)
					};
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
					return this.readNumber(!1);
				case 34:
				case 39:
					return this.readString(e);
				case 47:
					return this.readToken_slash();
				case 37:
				case 42:
					return this.readToken_mult_modulo_exp(e);
				case 124:
				case 38:
					return this.readToken_pipe_amp(e);
				case 94:
					return this.readToken_caret();
				case 43:
				case 45:
					return this.readToken_plus_min(e);
				case 60:
				case 62:
					return this.readToken_lt_gt(e);
				case 61:
				case 33:
					return this.readToken_eq_excl(e);
				case 126:
					return this.finishOp(w.prefix, 1)
			}
			this.raise(this.pos, "Unexpected character '" + xt(e) + "'")
		}, St.finishOp = function(e, t) {
			var n = this.input.slice(this.pos, this.pos + t);
			return this.pos += t, this.finishToken(e, n)
		}, St.readRegexp = function() {
			var e = this,
				t, n, r = this.pos;
			for (;;) {
				e.pos >= e.input.length && e.raise(r, "Unterminated regular expression");
				var i = e.input.charAt(e.pos);
				E.test(i) && e.raise(r, "Unterminated regular expression");
				if (!t) {
					if (i === "[") n = !0;
					else if (i === "]" && n) n = !1;
					else if (i === "/" && !n) break;
					t = i === "\\"
				} else t = !1;
				++e.pos
			}
			var s = this.input.slice(r, this.pos);
			++this.pos;
			var o = this.pos,
				u = this.readWord1();
			this.containsEsc && this.unexpected(o);
			var a = this.regexpState || (this.regexpState = new ut(this));
			a.reset(r, s, u), this.validateRegExpFlags(a), this.validateRegExpPattern(a);
			var f = null;
			try {
				f = new RegExp(s, u)
			} catch (l) {}
			return this.finishToken(w.regexp, {
				pattern: s,
				flags: u,
				value: f
			})
		}, St.readInt = function(e, t) {
			var n = this,
				r = this.pos,
				i = 0;
			for (var s = 0, o = t == null ? Infinity : t; s < o; ++s) {
				var u = n.input.charCodeAt(n.pos),
					a = void 0;
				u >= 97 ? a = u - 97 + 10 : u >= 65 ? a = u - 65 + 10 : u >= 48 && u <= 57 ? a = u - 48 : a = Infinity;
				if (a >= e) break;
				++n.pos, i = i * e + a
			}
			return this.pos === r || t != null && this.pos - r !== t ? null : i
		}, St.readRadixNumber = function(e) {
			this.pos += 2;
			var t = this.readInt(e);
			return t == null && this.raise(this.start + 2, "Expected number in radix " + e), h(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(w.num, t)
		}, St.readNumber = function(e) {
			var t = this.pos;
			!e && this.readInt(10) === null && this.raise(t, "Invalid number");
			var n = this.pos - t >= 2 && this.input.charCodeAt(t) === 48;
			n && this.strict && this.raise(t, "Invalid number"), n && /[89]/.test(this.input.slice(t, this.pos)) && (n = !1);
			var r = this.input.charCodeAt(this.pos);
			r === 46 && !n && (++this.pos, this.readInt(10), r = this.input.charCodeAt(this.pos)), (r === 69 || r === 101) && !n && (r = this.input.charCodeAt(++this.pos), (r === 43 || r === 45) && ++this.pos, this.readInt(10) === null && this.raise(t, "Invalid number")), h(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
			var i = this.input.slice(t, this.pos),
				s = n ? parseInt(i, 8) : parseFloat(i);
			return this.finishToken(w.num, s)
		}, St.readCodePoint = function() {
			var e = this.input.charCodeAt(this.pos),
				t;
			if (e === 123) {
				this.options.ecmaVersion < 6 && this.unexpected();
				var n = ++this.pos;
				t = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, t > 1114111 && this.invalidStringToken(n, "Code point out of bounds")
			} else t = this.readHexChar(4);
			return t
		}, St.readString = function(e) {
			var t = this,
				n = "",
				r = ++this.pos;
			for (;;) {
				t.pos >= t.input.length && t.raise(t.start, "Unterminated string constant");
				var i = t.input.charCodeAt(t.pos);
				if (i === e) break;
				i === 92 ? (n += t.input.slice(r, t.pos), n += t.readEscapedChar(!1), r = t.pos) : (x(i, t.options.ecmaVersion >= 10) && t.raise(t.start, "Unterminated string constant"), ++t.pos)
			}
			return n += this.input.slice(r, this.pos++), this.finishToken(w.string, n)
		};
		var Tt = {};
		St.tryReadTemplateToken = function() {
			this.inTemplateElement = !0;
			try {
				this.readTmplToken()
			} catch (e) {
				if (e !== Tt) throw e;
				this.readInvalidTemplateToken()
			}
			this.inTemplateElement = !1
		}, St.invalidStringToken = function(e, t) {
			if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw Tt;
			this.raise(e, t)
		}, St.readTmplToken = function() {
			var e = this,
				t = "",
				n = this.pos;
			for (;;) {
				e.pos >= e.input.length && e.raise(e.start, "Unterminated template");
				var r = e.input.charCodeAt(e.pos);
				if (r === 96 || r === 36 && e.input.charCodeAt(e.pos + 1) === 123) return e.pos !== e.start || e.type !== w.template && e.type !== w.invalidTemplate ? (t += e.input.slice(n, e.pos), e.finishToken(w.template, t)) : r === 36 ? (e.pos += 2, e.finishToken(w.dollarBraceL)) : (++e.pos, e.finishToken(w.backQuote));
				if (r === 92) t += e.input.slice(n, e.pos), t += e.readEscapedChar(!0), n = e.pos;
				else if (x(r)) {
					t += e.input.slice(n, e.pos), ++e.pos;
					switch (r) {
						case 13:
							e.input.charCodeAt(e.pos) === 10 && ++e.pos;
						case 10:
							t += "\n";
							break;
						default:
							t += String.fromCharCode(r)
					}
					e.options.locations && (++e.curLine, e.lineStart = e.pos), n = e.pos
				} else ++e.pos
			}
		}, St.readInvalidTemplateToken = function() {
			var e = this;
			for (; this.pos < this.input.length; this.pos++) switch (e.input[e.pos]) {
				case "\\":
					++e.pos;
					break;
				case "$":
					if (e.input[e.pos + 1] !== "{") break;
				case "`":
					return e.finishToken(w.invalidTemplate, e.input.slice(e.start, e.pos))
			}
			this.raise(this.start, "Unterminated template")
		}, St.readEscapedChar = function(e) {
			var t = this.input.charCodeAt(++this.pos);
			++this.pos;
			switch (t) {
				case 110:
					return "\n";
				case 114:
					return "\r";
				case 120:
					return String.fromCharCode(this.readHexChar(2));
				case 117:
					return xt(this.readCodePoint());
				case 116:
					return "	";
				case 98:
					return "\b";
				case 118:
					return "";
				case 102:
					return "\f";
				case 13:
					this.input.charCodeAt(this.pos) === 10 && ++this.pos;
				case 10:
					return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
				default:
					if (t >= 48 && t <= 55) {
						var n = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0],
							r = parseInt(n, 8);
						return r > 255 && (n = n.slice(0, -1), r = parseInt(n, 8)), this.pos += n.length - 1, t = this.input.charCodeAt(this.pos), (n !== "0" || t === 56 || t === 57) && (this.strict || e) && this.invalidStringToken(this.pos - 1 - n.length, e ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(r)
					}
					return String.fromCharCode(t)
			}
		}, St.readHexChar = function(e) {
			var t = this.pos,
				n = this.readInt(16, e);
			return n === null && this.invalidStringToken(t, "Bad character escape sequence"), n
		}, St.readWord1 = function() {
			var e = this;
			this.containsEsc = !1;
			var t = "",
				n = !0,
				r = this.pos,
				i = this.options.ecmaVersion >= 6;
			while (this.pos < this.input.length) {
				var s = e.fullCharCodeAtPos();
				if (p(s, i)) e.pos += s <= 65535 ? 1 : 2;
				else {
					if (s !== 92) break;
					e.containsEsc = !0, t += e.input.slice(r, e.pos);
					var o = e.pos;
					e.input.charCodeAt(++e.pos) !== 117 && e.invalidStringToken(e.pos, "Expecting Unicode escape sequence \\uXXXX"), ++e.pos;
					var u = e.readCodePoint();
					(n ? h : p)(u, i) || e.invalidStringToken(o, "Invalid Unicode escape"), t += xt(u), r = e.pos
				}
				n = !1
			}
			return t + this.input.slice(r, this.pos)
		}, St.readWord = function() {
			var e = this.readWord1(),
				t = w.name;
			return this.keywords.test(e) && (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + e), t = y[e]), this.finishToken(t, e)
		};
		var Nt = "5.7.1";
		e.version = Nt, e.parse = Ct, e.parseExpressionAt = kt, e.tokenizer = Lt, e.addLooseExports = At, e.Parser = I, e.plugins = j, e.defaultOptions = P, e.Position = M, e.SourceLocation = _, e.getLineInfo = D, e.Node = Z, e.TokenType = d, e.tokTypes = w, e.keywordTypes = y, e.TokContext = nt, e.tokContexts = rt, e.isIdentifierChar = p, e.isIdentifierStart = h, e.Token = Et, e.isNewLine = x, e.lineBreak = E, e.lineBreakG = S, e.nonASCIIwhitespace = T, Object.defineProperty(e, "__esModule", {
			value: !0
		})
	}), define("scriptclass", ["lib/acorn"], function(e) {
		var t = Class.extend({
			init: function(e, t) {
				this.game = e, this.name = t, this.loadTime = null
			},
			addScriptFunctions: function(e) {
				if (!this.compileScript()) return !1;
				var t = this,
					n = new evaljs.Environment(this.game.scriptmanager, function(e) {
						window.console && console.log(e)
					});
				return n.setGlobalAndThis(e.scriptenv.scriptGlobal, e.getScriptObject()), n.genAndTransferFunctions(this.scriptCompiled, this.name), !0
			},
			compileScript: function() {
				if (this.scriptCompiled) return !0;
				if (!this.script || this.script.length <= 0 || this.script == "{}") return !1;
				try {
					this.scriptCompiled = e.parse(this.script, {
						locations: !1
					});
					if (!this.scriptCompiled) return !1
				} catch (t) {
					return window.console && console.log("Class script compilation failed for " + this.name + ": " + t.toString()), !1
				}
				return !0
			},
			setScript: function(e) {
				this.loadTime = this.game.currentTime, this.script = e, this.scriptCompiled = null
			},
			isCatchingEvent: function(e) {
				return this.script && this.script.length > 0 && this.script != "{}" && this.script.toLowerCase().indexOf("on" + e) >= 0
			}
		});
		return t
	}), define("scriptmanager", ["scriptclass", "newnpc", "lib/acorn"], function(e, t, n) {
		var r = Class.extend({
			init: function(e) {
				this.game = e, this.scriptclasses = {}, this.requestedScriptClasses = {}, this.lastScriptUpdate = 0, this.menuButtonNPCs = {}, this.eventMap = {
					created: "created",
					updated: "updated",
					enters: "playerenters",
					touch: "playertouchsme",
					say: "playersays",
					grab: "playergrabs",
					sword: "playerattacks",
					hammer: "playerhammers",
					trashpick: "playerpicks",
					mouse: "mousedown",
					timeout: "timeout"
				}
			},
			onScriptChanged: function(e) {
				e.scriptenv = {}, this.runScript(e, this.game.player, "updated")
			},
			onConnected: function() {},
			runScript: function(e, t, n, r) {
				var i = n in this.eventMap ? this.eventMap[n] : n;
				if (!this.isCatchingEvent(e, i)) return;
				if (!this.compileScript(e)) return;
				var s;
				try {
					this.updateScriptEnvironment(e, t, n);
					var o = this.prepareScriptEnvironment(e),
						u = this.getFunctionFromScriptEnvironment(o, i);
					u ? (r || (r = []), t && e.scriptenv.scriptGlobal.player && r.splice(0, 0, e.scriptenv.scriptGlobal.player), s = this.runEvalJSIter(u.apply(e.getScriptObject(), r))) : e.scriptenv.scriptProgram && (s = this.runEvalJSIter(e.scriptenv.scriptProgram())), e && t && e == t.weaponnpc && n == "equip" && (e.isEquipped = !0)
				} catch (a) {
					window.console && console.log("Script error:", a)
				}
				return s
			},
			isCatchingEvent: function(e, t) {
				if (!e.scriptenv.catchedevents || this.lastScriptUpdate > e.scriptenv.catchedEventsUpdate) e.scriptenv.catchedevents = {}, e.scriptenv.catchedEventsUpdate = this.game.currentTime;
				if (t in e.scriptenv.catchedevents) return e.scriptenv.catchedevents[t];
				var n = !1,
					r = e.clientscript;
				if (r && r.length > 0 && r != "{}" && r.toLowerCase().indexOf(t) >= 0) n = !0;
				else if (e.scriptenv.updateTime) {
					for (var i in e.scriptenv.joinedClasses)
						if (e.scriptenv.joinedClasses[i].isCatchingEvent(t)) {
							n = !0;
							break
						}
				} else if (e.scriptclasses)
					for (var i in e.scriptclasses) {
						var s = this.loadScriptClass(e.scriptclasses[i]);
						if (s && s.isCatchingEvent(t)) {
							n = !0;
							break
						}
					}
				return e.scriptenv.catchedevents[t] = n, n
			},
			compileScript: function(e) {
				if (e.scriptenv.scriptCompiled) return !0;
				var t = e.clientscript;
				if (!t || t.length <= 0 || t == "{}") return !0;
				try {
					e.scriptenv.scriptCompiled = n.parse(t, {
						locations: !1
					});
					if (!e.scriptenv.scriptCompiled) return !1
				} catch (r) {
					return window.console && console.log("Script compilation failed: " + r.toString()), !1
				}
				return !0
			},
			getFunctionFromScriptEnvironment: function(e, t) {
				var n = "on" + t.toLowerCase(),
					r = e._curVarStore.vars[n];
				if (r) return r;
				for (var i in e._curVarStore.vars)
					if (i.toLowerCase() == n) return e._curVarStore.vars[i];
				return null
			},
			runEvalJSIter: function(e) {
				var t = 2e3;
				delete this.nextSleep;
				var n = e.next();
				for (var r = 0; !n.done; r++) {
					if (this.nextSleep) {
						this.sleepScript(e, this.nextSleep.npc, this.nextSleep.delay), delete this.nextSleep;
						return
					}
					n = e.next();
					if (!n.done && r >= t) {
						window.console && console.log("Script exceeded maximum number of operations (" + t + ")");
						return
					}
				}
				return n.value
			},
			prepareScriptEnvironment: function(e) {
				this.getNPCScriptGlobal(e);
				var t = e.scriptenv.scriptEnvironment;
				if (t) {
					for (var n in e.scriptenv.joinedClasses) {
						var r = e.scriptenv.joinedClasses[n];
						r.loadTime > e.scriptenv.updateTime && (r.addScriptFunctions(e) || t.removeClassFunctions(r.name))
					}
					e.scriptenv.updateTime = this.game.currentTime
				} else {
					var i = this;
					t = e.scriptenv.scriptEnvironment = new evaljs.Environment(this, function(e) {
						window.console && console.log(e)
					}), t.setGlobalAndThis(e.scriptenv.scriptGlobal, e.getScriptObject()), e.scriptenv.scriptCompiled && (e.scriptenv.scriptProgram = t.gen(e.scriptenv.scriptCompiled)), e.scriptenv.updateTime = this.game.currentTime;
					if (e.scriptclasses && e.scriptclasses.length > 0)
						for (var n in e.scriptclasses) this.joinScriptClass(e, e.scriptclasses[n])
				}
				return t
			},
			updateScriptEnvironment: function(e, t, n) {
				var r = this.getNPCScriptGlobal(e);
				r.player = t ? t.getScriptObject() : this.game.player ? this.game.player.getScriptObject() : null;
				for (var i in this.eventMap) r[this.eventMap[i]] = i == n
			},
			getNPCScriptGlobal: function(e) {
				if (!e.scriptenv.scriptGlobal) {
					var t = this;
					e.scriptenv.scriptGlobal = {
						Server: this.getServerScriptObject(),
						Array: Array,
						Date: Date,
						JSON: JSON,
						Math: Math,
						Number: Number,
						Object: Object,
						String: String,
						GUI: this.getGUIScriptObject(),
						echo: function() {
							window.console && console.log.apply(null, arguments)
						},
						alert: function(e) {
							gui.alert(e)
						},
						translate: function(e, t) {
							return translate(e, t)
						}
					};
					var n = e.getScriptObject();
					for (var r in n) {
						var i = n[r];
						typeof i == "function" && (e.scriptenv.scriptGlobal[r] = i)
					}
				}
				return e.scriptenv.scriptGlobal
			},
			joinScriptClass: function(e, t) {
				if (!e || !e.scriptenv || !e.scriptenv.scriptEnvironment) return;
				if (!t || t.length <= 0) return;
				var n = this.loadScriptClass(t);
				n.addScriptFunctions(e) ? this.rememberJoinedClass(e, n) : window.console && console.log("Failed to join script class " + t)
			},
			loadScriptClass: function(t) {
				var n = this.scriptclasses[t];
				return n ? n : (n = new e(this.game, t), this.scriptclasses[t] = n, this.requestScriptClasses([t]), n)
			},
			requestScriptClasses: function(e) {
				if (!this.game.client) return;
				var t = [];
				for (var n in e) {
					var r = e[n];
					this.requestedScriptClasses[r] || (this.requestedScriptClasses[r] = !0, t.push(r))
				}
				t.length > 0 && this.game.client.sendGetClientClasses(t)
			},
			rememberJoinedClass: function(e, t) {
				if (!e || !e.scriptenv) return;
				e.scriptenv.joinedClasses || (e.scriptenv.joinedClasses = []), e.scriptenv.joinedClasses.indexOf(t) < 0 && e.scriptenv.joinedClasses.push(t), e.scriptenv.catchedevents = null
			},
			setClientClass: function(e, t) {
				this.requestedScriptClasses[e] = !0, this.lastScriptUpdate = this.game.currentTime, this.loadScriptClass(e).setScript(t);
				var n = this.game.player;
				if (n && n.weaponnpc) {
					var r = n.weaponnpc.scriptclasses;
					r && r.indexOf(e) >= 0 && (this.runScript(n.weaponnpc, n, "updated"), n.weaponnpc.isEquipped || this.runScript(n.weaponnpc, n, "equip"))
				}
			},
			getServerScriptObject: function() {
				if (!this.serverScriptObject) {
					var e = this;
					this.serverScriptObject = {
						searchnpcs: function(t) {
							return e.searchNPCs(t)
						},
						getconfig: function() {
							return e.game.app.config
						}
					}
				}
				return this.serverScriptObject
			},
			searchNPCs: function(e) {
				var n = [];
				if (!e) return this.makeArray(n), n;
				if (e.area && "x" in e.area) {
					var r = this;
					this.game.forEachEntity(function(r) {
						r instanceof t && r.gridX < e.area.x + e.area.w && r.gridY < e.area.y + e.area.h && r.gridX + r.tileWidth > e.area.x && r.gridY + r.tileHeight > e.area.y && n.push(r.getScriptObject())
					})
				}
				return this.makeArray(n), n
			},
			makeArray: function(e) {
				e.length = e.length;
				var t = ["forEach", "every", "filter", "find", "map", "some"];
				for (var n in t) this.makeArrayCallback(e, t[n])
			},
			makeArrayCallback: function(e, t) {
				var n = this;
				e[t] = function(r) {
					if (!r || typeof r != "function") return;
					var i = Array.prototype[t].call(e, function(e, t, i) {
						return n.runEvalJSIter(r(e, t, i))
					});
					return i && i instanceof Array && n.makeArray(i), i
				}
			},
			getGUIScriptObject: function() {
				if (!this.guiScriptObject) {
					var e = this;
					this.guiScriptObject = {
						showpopup: function(t) {
							t || (t = {
								title: e.game.app.config.gamename
							});
							var n = e.game.menu.showPopUp({
								title: t.title,
								width: t.width,
								height: t.height,
								popupType: "scriptgui"
							});
							return (t.head || t.hat) && e.game.menu.addWindowIcon(n, t), n
						},
						showmenu: function(t) {
							e.game.menu.showMenuByName(t)
						},
						hidepopup: function() {
							e.game.menu.closePopUpNow()
						},
						create: function(t, n, r, i) {
							return e.createGui(t, n, r, i)
						},
						destroy: function(e) {
							gui.remove(e)
						},
						get: function(e) {
							return gui.getDom(e)
						},
						exists: function(e) {
							return gui.exists(e)
						},
						show: function(e) {
							return gui.show(e)
						},
						hide: function(e) {
							return gui.hide(e)
						},
						width: function(e) {
							return gui.getWidth(e)
						},
						height: function(e) {
							return gui.getHeight(e)
						},
						onclick: function(t, n) {
							gui.setClick(t, !n || typeof n != "function" ? null : function(t, r, i) {
								e.runEvalJSIter(n(t, r, i))
							})
						},
						onback: function(t) {
							if (!t || typeof t != "function") {
								var n = gui.find("newpopup", ".backbutton");
								n && gui.remove(n)
							} else gui.setChildClick("newpopup", ".backbutton", function(n, r, i) {
								e.runEvalJSIter(t(n, r, i))
							})
						},
						get ismobile() {
							return e.game.renderer.isMobile
						},
						setpopuptitle: function(e) {
							gui.setChildHTML("newpopup", "div.titletext", e)
						}
					}
				}
				return this.guiScriptObject
			},
			createGui: function(e, t, n, r) {
				if (!e || e.length <= 0) return;
				var i = gui.getDom(e);
				if (i) return i;
				var s = gui.getDom("scriptgui");
				return s ? (i = document.createElement("div"), i.id = e, i.className = t, i.style.cssText = n, i.innerHTML = r, s.appendChild(i), i) : null
			},
			updateWeaponScript: function(e, n) {
				e.weaponnpc && (e.weaponnpc = null);
				if (!n.scriptclasses || n.scriptclasses.length <= 0) return;
				e.weaponnpc = new t(-1), e.weaponnpc.game = this.game, e.weaponnpc.npcType = "weapon", e.weaponnpc.setExtendedData(n), this.runScript(e.weaponnpc, e, "equip")
			},
			getMenuButtonNPC: function(e) {
				if (!e.scriptclasses || e.scriptclasses.length <= 0 || !e.buttonid) return null;
				var n = this.menuButtonNPCs[e.buttonid];
				if (!n) {
					n = this.menuButtonNPCs[e.buttonid] = new t(-1), n.game = this.game, n.npcType = "menu", n.setExtendedData(e);
					var r = n.getScriptObject();
					for (var i in e) r[i] || (r[i] = e[i])
				}
				return n
			},
			getMenuButtonNPCById: function(e) {
				return this.menuButtonNPCs[e]
			},
			sleepScript: function(e, t, n) {
				if (!t || !e) return;
				t.scheduleTimeout("sleep", n, !1, {
					iter: e
				})
			},
			wakeUpFromSleep: function(e, t) {
				if (!t || !e) return;
				this.runEvalJSIter(e)
			}
		});
		return r
	}), define("game", ["storage", "infomanager", "renderer", "mapmanager", "animationmanager", "localplayer", "client", "sounds", "menu", "shop", "storymanager", "tradingmanager", "minimap", "newnpc", "player", "projectiles", "character", "config", "scriptmanager", "gametypes", "lib/class"], function(e, t, n, r, i, s, o, u, a, f, l, c, h, p, d, v, m, g, y) {
		var b = Class.extend({
			init: function(n) {
				this.app = n, this.app.config = g, this.ready = !1, this.started = !1, this.hasNeverStarted = !0, this.didShowGame = !1, this.gameVisible = !0, this.tilesFinishedLoading = !1, this.npcsFinishedLoading = !1, this.currentTime = (new Date).getTime(), this.currentFrame = 1, this.storage = new e, this.menu = new a(this), this.shop = new f(this), this.storymanager = new l(this), this.tradingmanager = new c(this), this.scriptmanager = new y(this), this.renderer = null, this.minimap = null, this.chatinput = null, this.sounds = null, this.settings = {}, this.pms = [], this.player = new s("player", Types.Entities.Warrior), this.player.game = this, this.entities = {}, this.players = [], this.mouse = {
					x: 0,
					y: 0
				}, this.nexttemporaryentityid = 1, this.infoManager = new t(this)
			},
			setup: function(e, t, r, i, s) {
				this.setRenderer(new n(this, e, t, !0)), this.setMinimap(new h(this, r, s)), this.setChatInput(i), this.renderer.isMobile && (gui.getWidth("canvas") < 600 || gui.getHeight() < 480) && (this.settings.nomobilezoom = !0, this.renderer.zoom = 1)
			},
			setRenderer: function(e) {
				this.renderer = e
			},
			setMinimap: function(e) {
				this.minimap = e
			},
			setChatInput: function(e) {
				this.chatinput = e
			},
			preloadMaps: function() {
				new r(this)
			},
			preloadAnimations: function() {
				new i(this)
			},
			getPlayerCountClock: function(e, t) {
				var n = e == 1 ? translate("1 Player") : translate("%d Players", [e]);
				if (t !== undefined) {
					var r = (new Date(2014, 1, 1, 15, 0, 0, 0)).toLocaleTimeString().indexOf("15") > -1;
					r ? n += " â°" + t : n += " " + (t < 1 ? "12am" : t < 13 ? t + "am" : t - 12 + "pm")
				}
				return n
			},
			initPlayer: function() {
				if (!this.player) return;
				Config_Extern && Config_Extern.name && (this.player.name = Config_Extern.name, Config_Extern.name = null), this.player.idle()
			},
			getTemporaryEntityID: function() {
				return "0" + this.nexttemporaryentityid++
			},
			addEntity: function(e) {
				this.entities[e.id] = e, e.game = this, e instanceof d && this.players.indexOf(e) < 0 && this.players.push(e)
			},
			removeEntity: function(e) {
				if (!(e.id in this.entities)) return;
				e.prepareRemoveFromMap(), delete this.entities[e.id];
				if (e instanceof d) {
					var t = this.players.indexOf(e);
					t >= 0 && this.players.splice(t, 1)
				}
				e instanceof s && this.showCoinsArrow(!1)
			},
			setServerOptions: function(e) {
				this.serverurl = e
			},
			loadAudio: function() {
				this.sounds = new u(this)
			},
			run: function() {
				this.ready = !0, this.resize(), this.loadAudio(), this.initPlayer(), this.connect()
			},
			tick: function() {
				this.fps = 20, this.currentTime = (new Date).getTime();
				if (!this.nextFrameTime || this.currentTime >= this.nextFrameTime) this.singleFrameTime = 1e3 / this.fps, !this.nextFrameTime || this.currentTime >= this.nextFrameTime + 3 * this.singleFrameTime ? this.nextFrameTime = this.currentTime + this.singleFrameTime : this.nextFrameTime += this.singleFrameTime, this.started && (this.currentFrame++, this.gameVisible = !document || !document.hidden, this.didShowGame && this.processFrame(), this.renderer.renderFrame());
				this.isStopped || requestAnimFrame(this.tick.bind(this))
			},
			processFrame: function() {
				this.player && (this.player.processScreenShake(), this.player.checkMovement(), this.player.weaponMode && this.player.weaponMode.autofire && this.checkAutofire()), this.infoManager.update(this.currentTime), this.minimap.update(this.currentTime), this.mapmanager.currentmap.projectiles.processProjectiles();
				for (var e in this.mapmanager.activeObjects) this.mapmanager.activeObjects[e].onUpdateInterval();
				this.animationmanager.processWeather(), this.client.sendPing(), this.storymanager.isRecording && this.storymanager.updateRecordStory()
			},
			checkAutofire: function() {
				if (this.app.keyPressedLast) {
					if (this.app.keyPressed[32] || this.app.keyPressed[69]) {
						this.playerAttack(this.player.dir);
						return
					}
					if (this.app.keyPressed[73]) {
						this.playerAttack(Types.Orientations.UP);
						return
					}
					if (this.app.keyPressed[74]) {
						this.playerAttack(Types.Orientations.LEFT);
						return
					}
					if (this.app.keyPressed[75]) {
						this.playerAttack(Types.Orientations.DOWN);
						return
					}
					if (this.app.keyPressed[76]) {
						this.playerAttack(Types.Orientations.RIGHT);
						return
					}
				}
				this.app.weaponpadDown && this.playerAttack(this.app.weaponpadDirection)
			},
			start: function() {
				this.renderer.hideConnectingMessage(), this.tick(), this.hasNeverStarted = !1, this._showMovementHelp(), this.checkLoginLink(), window.console && console.log("Started game")
			},
			stop: function() {
				window.console && console.log("Game stopped."), this.isStopped = !0
			},
			entityIdExists: function(e) {
				return e in this.entities
			},
			getEntityById: function(e) {
				return this.entities[e]
			},
			connect: function() {
				if (this.client) return;
				this.client = new o(this.serverurl, this), this.client.connect()
			},
			getMouseGridPosition: function() {
				var e = this.renderer,
					t = Math.floor((e.camera.x + this.mouse.x / e.zoom) / e.tilesize),
					n = Math.floor((e.camera.y + this.mouse.y / e.zoom) / e.tilesize);
				return {
					x: t,
					y: n
				}
			},
			forEachEntity: function(e) {
				_.each(this.entities, function(t) {
					e(t)
				})
			},
			forEachVisibleEntityByDepth: function(e, t) {
				var n = [];
				_.each(this.entities, function(t) {
					if (t.ghost) return;
					var r = t.gridX,
						i = t.gridY - t.z,
						s = t.tileWidth,
						o = t.tileHeight;
					r + s > e.gridX && r < e.gridX + e.gridW && i + o >= e.gridY && i < e.gridY + e.gridH && n.push(t)
				}), n.sort(function(e, t) {
					return e.gridY + (e.isDrawUnder ? 0 : e.tileHeight) - (t.gridY + (t.isDrawUnder ? 0 : t.tileHeight))
				}), _.each(n, t)
			},
			findNearestPlayer: function(e, t, n) {
				var r, i = 1e4;
				for (var s in this.players) {
					var o = this.players[s];
					if (!o) continue;
					var u = Math.abs(e - o.gridX) + Math.abs(t - o.gridY);
					if (u >= n) continue;
					if (!r || u < i) r = o, i = u
				}
				return r
			},
			isEntityAt: function(e, t) {
				return !_.isNull(this.getEntityAt(e, t))
			},
			getEntityAt: function(e, t) {
				return this.mapmanager.getEntityAt(e, t, 0, 0)
			},
			click: function() {
				return this._actionOnGUIPos(this.mouse) ? !1 : (this._clickActionOnGridPos(this.getMouseGridPosition()), !0)
			},
			_actionOnGUIPos: function(e) {
				if (this._isNearGUI(e)) return !0;
				if (this._checkCloseChat(e)) return !0;
				var t = this.mapmanager.getControlEntityAt(this.renderer.camera.x + e.x / this.renderer.zoom, this.renderer.camera.y + e.y / this.renderer.zoom);
				return t ? (t.entity.onControlMode(t.mode), !0) : !1
			},
			_isNearGUI: function(e) {
				if (e.x < 380 && e.y < 80) return !0;
				if (e.x < 80 && e.y < 200) return !0;
				var t = this.renderer.canvas.width,
					n = this.renderer.canvas.height;
				return e.x >= t - 234 && e.y < 80 ? !0 : e.x >= t - 154 && e.y < 234 ? !0 : gui.isVisible("movepad") && e.x < gui.getWidth("movepad") && e.y >= n - gui.getHeight("movepad") ? !0 : gui.isVisible("weaponpad") && e.x >= t - gui.getWidth("weaponpad") && e.y >= n - gui.getHeight("weaponpad") ? !0 : !1
			},
			_checkCloseChat: function(e) {
				return gui.hasClass("chatbox", "active") ? e.y > 90 ? (this.app.hideChat(), !1) : !0 : !1
			},
			_clickActionOnGridPos: function(e) {
				if (!this.started || !this.player || this.player.isDead || this.player.ghost) return;
				var t = this.mapmanager.getEntityAt(e.x, e.y, 1, 1);
				if (!t) {
					t = this.findNearestPlayer(e.x, e.y, 4 / this.renderer.zoom);
					if (!t) return
				} else if (t instanceof p && t.isDrawUnder && t.npcclass != "buildmarker") {
					var n = this.findNearestPlayer(e.x, e.y, 2);
					n && (t = n)
				}
				t instanceof p ? this.player.isHittingAnimation() || t.onActivate("mouse") : t instanceof d && this.requestPlayerProfile(t)
			},
			requestPlayerProfile: function(e) {
				this.menu.profilebackcallback = null, this.client.sendRequestPlayerProfile(e)
			},
			requestWinnerProfile: function() {
				if (!this.minimap.winneruserid) return;
				this.menu.profilebackcallback = null, this.client.sendRequestDBPlayerProfile(this.minimap.winneruserid)
			},
			playerAttack: function(e) {
				if (!this.started || !this.player || this.player.isDead || this.player.ghost) return;
				if (this.player.isFiring() || this.player.isInWater()) return;
				this.player.weaponMode && (this.app.config.primaryweapon != "gun" && (e = this.player.dir), this.player.activateNPCs(e), this.player.usePrimaryWeapon(e)), this.hideMovementHelp(), this.unlockSoundsOnMobile()
			},
			_showMovementHelp: function() {
				if (!gui.exists("movementhelp")) return;
				if (this.player && this.player.onlinetime && this.player.onlinetime >= 3600) return;
				this.app.config.gameads && this.app.config.gameads.length > 0 && this.app.config.gameads[0].showinmovementhelp && this.menu.showGameAdInContainer(gui.getDom("movementhelpad"), this.app.config.gameads[0], !0), gui.fadeIn("movementhelp")
			},
			hideMovementHelp: function() {
				gui.isVisible("movementhelp") && gui.fadeOut("movementhelp")
			},
			showShipControls: function() {
				gui.exists("shipcontrols") && gui.fadeIn("shipcontrols"), gui.fadeOut("minimap")
			},
			hideShipControls: function() {
				gui.exists("shipcontrols") && gui.fadeOut("shipcontrols"), this.settings.hideminimap || gui.fadeIn("minimap")
			},
			unlockSoundsOnMobile: function() {
				!this.unlockedsounds && !this.settings.soundsoff && (this.sounds && this.sounds.play("hit1"), this.unlockedsounds = !0)
			},
			resetCamera: function() {
				this.player && this.renderer.camera.lookAt(this.player), this.renderer.updateTiles(!0)
			},
			say: function(e, t) {
				switch (e) {
					case "/showping":
						this.client.showping = !0, this.client.lastpingtime && this.showPing(this.client.lastpingtime);
						break;
					case "/hideping":
						this.client.showping = !1, gui.hide("pinglabel");
						break;
					case "/hidegui":
						this.hideGui();
						break;
					case "/clearchat":
						this.forEachEntity(function(e) {
							delete e.chat, e.showChat("")
						});
						break;
					case "/hidechat":
						this.forEachEntity(function(e) {
							delete e.chat, e.showChat("")
						}), this.hidechat = !0;
						break;
					case "/warpon":
						this.disableClickWarp && (this.disableClickWarp = !1, this.showShortMessage(translate("You've enabled click-warp.")));
						break;
					case "/warpoff":
						this.disableClickWarp || (this.disableClickWarp = !0, this.showShortMessage(translate("You've disabled click-warp.")));
						break;
					case "/bigchat":
						gui.hasClass("chatbox", "bigchat") || (gui.addClass("chatbox", "bigchat"), this.showShortMessage(translate("The chat input is now large!")));
						break;
					default:
						this.client && this.client.sendChat(e)
				}
			},
			showPing: function(e) {
				var t = gui.getDom("pinglabel");
				gui.show(t), t.innerHTML = "Ping: " + e
			},
			invokeScriptEvent: function(e) {
				if (!this.player) return;
				var t = {
						gridX: this.player.gridX - 12,
						gridY: this.player.gridY - 9,
						gridW: 24,
						gridH: 18
					},
					n = this;
				this.forEachVisibleEntityByDepth(t, function(t) {
					if (!(t instanceof p)) return;
					n.scriptmanager.runScript(t, n.player, e)
				})
			},
			hideGui: function() {
				this.guiIsHidden = !0;
				var e = ["movepad", "weaponpad", "bombbutton", "mode2button", "lightsbutton", "hornbutton", "chatbutton", "menubutton", "homebutton", "coinsbutton", "invitebutton", "postpicturebutton", "logoutbutton", "fullscreenbutton", "clanchatbutton", "pmbutton", "furniturebutton", "coinsarrow", "hotkey1", "hotkey2", "hotkey3", "hotkey4", "hotkey5"],
					t = ["coinscount", "minimap", "pmbubble", "pmbadge", "notifications", "movementhelp"];
				for (var n in e) gui.setBackgroundImage(e[n], null);
				for (var n in t) gui.hide(t[n]);
				for (var r = 1; r <= 5; r++) gui.setChildHTML("hotkey" + r, "div.hotkeyimage", "")
			},
			checkHideFullGui: function() {
				var e = this.player && this.player.ghost || this.mapmanager.currentmap && this.app.config.noguimaps.indexOf(this.mapmanager.currentmap.mapname) >= 0;
				e ? (gui.hide("bar-container"), gui.hide("guicontainer")) : (gui.show("bar-container"), gui.show("guicontainer"))
			},
			restart: function() {
				this.initPlayer(), this.started = !0, this.client.sendRevive()
			},
			onDisconnect: function(e) {
				gui.fadeOut("deathscreen"), gui.fadeIn("reconnectscreen"), gui.setChildHTML("reconnectscreen", "p", "<br>" + e)
			},
			onPlayerDeath: function(e) {
				this.playerdeath_callback = e
			},
			onPlayerCoinsUpdated: function(e) {
				gui.setChildHTML("coinscount", "span.count", e)
			},
			showCoinsArrow: function(e) {
				if (!this.app.config.showcoinsarrow) return;
				e ? (gui.stop("coinsarrow"), gui.fadeIn("coinsarrow")) : gui.fadeOut("coinsarrow")
			},
			resize: function() {
				var e = this.renderer,
					t = gui.getWidth("canvas"),
					n = gui.getHeight("canvas"),
					r = gui.getDom("entities");
				r.style.width = t + "px", r.style.height = n + "px";
				if (e.context.contextGL) e.canvas.width = t, e.canvas.height = n;
				else {
					e.canvas.width = t / e.zoom, e.canvas.height = n / e.zoom, e.backcanvas.width = e.canvas.width + 64, e.backcanvas.height = e.canvas.height + 64;
					var i = gui.getDom("background");
					i.style.width = e.backcanvas.width * e.zoom + "px", i.style.height = e.backcanvas.height * e.zoom + "px"
				}
				var s = e.camera ? e.camera.x : 0,
					o = e.camera ? e.camera.y : 0;
				e.rescale(), e.camera.setPosition(s, o), this.resizeMobileButtons()
			},
			resizeMobileButtons: function() {
				if (!this.renderer.isMobile) return;
				var e = gui.getWidth("canvas"),
					t = gui.getHeight("canvas");
				if (e >= 768 && t >= 768 && !this.wasResizingButtons) return;
				var n = gui.getDom("movepad"),
					r = gui.getDom("weaponpad"),
					i = gui.getDom("bombbutton"),
					s = gui.getDom("hotkeys");
				if (!n || !r || !i || !s) return;
				var o = t >= 600 ? 300 : Math.floor(t / 2),
					u = gui.getPosition(n).left;
				n.style.width = o + "px", n.style.height = o + "px", r.style.width = o + "px", r.style.height = o + "px", i.style.bottom = o - 20 + "px", s.style.left = u + o + 30 + "px", s.style.right = u + o + 20 + "px";
				var a = gui.getDom("mode2button"),
					f = gui.getDom("lightsbutton"),
					l = gui.getDom("hornbutton");
				if (a && f && l) {
					var c = Math.min(t / 5, 128);
					a.style.bottom = o - 16 + "px", a.style.right = u + Math.floor(c + 12 * o / 300) + "px", f.style.bottom = o - 16 + "px", f.style.right = u + Math.floor(c + 12 * o / 300) + "px", l.style.bottom = Math.floor(o * 7 / 10) + "px", l.style.right = u + c * 2 + "px"
				}
				this.wasResizingButtons = !0
			},
			removeObsoleteEntities: function(e) {
				var t = this;
				_.each(e, function(e) {
					t.removeEntity(e)
				})
			},
			registerPayment: function(e, t, n, r, i) {
				this.client.sendPayment(e, t, n, r, i), this.shop.hasExternInterfaceVersion(1.1) && this.shop.sendFinishTransaction && this.shop.sendFinishTransaction(n)
			},
			onSettingsChanged: function(e) {
				this.settings.musicoff ? this.sounds.stopMusic() : this.sounds.updateMusic(), this.settings.hideminimap ? gui.fadeOut("minimap") : gui.isVisible("shipcontrols") || gui.fadeIn("minimap"), this.settings.hidehome ? gui.fadeOut("homebutton") : gui.fadeIn("homebutton");
				var t;
				this.renderer.isMobile ? t = this.settings.nomobilezoom ? 1 : 2 : t = this.settings.zoom2x ? 2 : 1, gui.getWidth("canvas") < 600 && (t = 1), t != this.renderer.zoom && (this.renderer.zoom = t, this.resize(), this.infoManager && this.infoManager.updateAllInGameSize()), this.settings.noingametv && this.infoManager && this.infoManager.removeAllInGameDom(), this.settings.buttonspacing ? gui.addClass("body", "buttonspacing") : gui.removeClass("body", "buttonspacing"), e && this.client.sendSetSettings(this.settings), this.resizeMobileButtons()
			},
			onEnteredMap: function(e, t) {
				var n = this.app.config.showfurnitureshops && (e.indexOf("playerland_") == 0 || e.indexOf("house_") == 0);
				gui.exists("furniturebutton") && (n ? gui.show("furniturebutton") : gui.hide("furniturebutton")), n || this.renderer.isMobile || Config_Extern && Config_Extern.platform && Config_Extern["platform"] != "facebook" ? gui.hide("invitebutton") : gui.show("invitebutton"), this.renderer.isMobile && gui.hide("fullscreenbutton"), this.player && !this.player.ghost && Config_Extern && Config_Extern["platform"] == "web" ? gui.show("logoutbutton") : gui.hide("logoutbutton"), this.player && (this.player.setFocus(null, null), this.player.showCurrentHitPoints()), this.animationmanager && this.animationmanager.stopWeather(), this.infoManager && this.infoManager.clearKillerInfos(), this.app.config.noguimaps.indexOf(e) >= 0 && (this.checkHideFullGui(), this.tilesFinishedLoading = !0, this.npcsFinishedLoading = !0, this.checkHideStartScreen())
			},
			isDrawingNames: function() {
				return !this.settings.hidenames || this.app.keyPressed[78]
			},
			showClanChatButton: function(e) {
				e ? gui.fadeIn("clanchatbutton") : gui.fadeOut("clanchatbutton")
			},
			showGeneralMessage: function(e) {
				this.showNotification("generalmessage", 0, null, e, {}, 0)
			},
			showShortMessage: function(e) {
				this.showNotification("shortmessage", 0, null, e, {}, 0)
			},
			showNotification: function(e, t, n, r, i, s) {
				this.pmcount = this.pmcount ? this.pmcount + 1 : 1;
				var o = {
					controlid: this.pmcount,
					type: e,
					senderid: t,
					senderlook: n,
					message: r,
					data: i,
					id: s
				};
				if (["pm", "invitation", "clanmessage", "server", "console", "script"].indexOf(e) >= 0 && this.checkPMSoundOrDirectOpen(o, !1)) return;
				var u = 10,
					a = 5;
				switch (e) {
					case "generalmessage":
						u = 15, a = 3;
						break;
					case "shortmessage":
						u = 5;
						break;
					case "pm":
						o.message.length >= 30 && (u = 15)
				}
				var f = "",
					l = o.type == "invitation" ? "invitation" : o.type == "history" ? "viewhistory" : t > 0 || i && i.replyid ? "reply" : o.data && o.data.mapmarkers ? "view" : "dismiss",
					c;
				n && n.head && (c = [{
					x: 4,
					y: -8,
					itemtype: "head",
					head: this.animationmanager.expandGameFilename("head", n.head)
				}], n.hat && c.push({
					x: 4,
					y: -24,
					itemtype: "hat",
					hat: this.animationmanager.expandGameFilename("hat", n.hat)
				})), c && (f += this.menu.getHTMLFromItemsInFlow(c, !0)), f += '<div class="notificationtitle" style="' + (c ? "margin-left:46px;" : "") + '">' + (n && n.name ? "<b>" + n.name.substring(0, 25) + (r.length > 0 ? ":" : "") + "</b> " : "") + r + "</div>";
				var h = this;
				switch (l) {
					case "invitation":
						f += '<input id="pmyesbutton' + o.controlid + '" type=submit value="' + translate("Yes") + '" class="notificationbutton">', f += '<input id="pmnobutton' + o.controlid + '" type=submit value="' + translate("No") + '" class="notificationbutton">';
						break;
					case "reply":
						f += '<input id="pmreplybutton' + o.controlid + '" type=submit value="' + translate("Reply") + '" class="notificationbutton">';
						break;
					case "view":
						f += '<input id="pmviewbutton' + o.controlid + '" type=submit value="' + translate("View") + '" class="notificationbutton">';
						break;
					case "viewhistory":
						f += '<input id="pmviewhistorybutton' + o.controlid + '" type=submit value="' + translate("View") + '" class="notificationbutton">';
						break;
					case "dismiss":
						f += '<div class="dismissnotification"></div>'
				}
				var p = gui.cloneAndTimeout("notificationprototype", u, a, function(e) {
					gui.remove(e), l == "viewhistory" ? h.menu.showMessageList(null, !0) : l != "dismiss" && h.menu.showPM(o)
				});
				if (p) {
					p.id = "notification" + o.controlid, gui.setChildHTML(p, ".notificationtext", f);
					switch (l) {
						case "invitation":
							gui.setClick("pmyesbutton" + o.controlid, function() {
								gui.hide("notification" + o.controlid), h.acceptInvitation(o, !0)
							}), gui.setClick("pmnobutton" + o.controlid, function() {
								gui.hide("notification" + o.controlid), h.acceptInvitation(o, !1)
							});
							break;
						case "reply":
							gui.setClick("pmreplybutton" + o.controlid, function() {
								gui.hide("notification" + o.controlid), h.menu.writePMAsReply(o)
							});
							break;
						case "view":
							gui.setClick("pmviewbutton" + o.controlid, function() {
								gui.hide("notification" + o.controlid), h.menu.showPM(o)
							});
							break;
						case "viewhistory":
							gui.setClick("pmviewbutton" + o.controlid, function() {
								gui.hide("notification" + o.controlid), h.menu.showMessageList(null, !0)
							})
					}
				}
			},
			showPMButton: function(e, t, n, r, i, s) {
				var o = {
						id: s,
						type: e,
						senderid: t,
						senderlook: n,
						message: r,
						data: i
					},
					u = !1,
					a = o.data && o.data.show && !this.menu.getCurrentMenu();
				o.type != "guide" && !a && (u = this.removeDuplicatePM(o), this.pms.push(o), gui.setChildHTML("pmbutton", "div.pmbadge", this.pms.length), gui.fadeIn("pmbutton")), this.checkPMSoundOrDirectOpen(o, u)
			},
			checkPMSoundOrDirectOpen: function(e, t) {
				var n = !t,
					r = e.data && e.data.show && !this.menu.getCurrentMenu();
				return r ? this.menu.showPM(e) : !this.minimap.showStoryPM(e) && e.type == "guide" && (n = !1), n && (!this.lastPMSound || this.currentTime >= this.lastPMSound + 5e3) && (this.lastPMSound = this.currentTime, this.sounds.play("pm_sound")), r
			},
			removeDuplicatePM: function(e) {
				var t = e.id && e.id != 0,
					n = !1;
				for (var r = this.pms.length - 1; r >= 0; r--) {
					var i = this.pms[r];
					if (t && e.id == i.id || i.type == e.type && i.senderid == e.senderid && i.message == e.message || i.type == e.type && e.type == "pm" && i.senderid == e.senderid || i.type == e.type && e.type == "console") this.pms.splice(r, 1), n = !0
				}
				return n
			},
			showNextPM: function() {
				if (this.pms.length > 0) {
					var e = this.pms.shift();
					this.menu.showPM(e), gui.setChildHTML("pmbutton", "div.pmbadge", this.pms.length), this.pms.length <= 0 && gui.fadeOut("pmbutton")
				}
			},
			showSinglePM: function(e) {
				if (!e) return;
				this.menu.showPM(e);
				var t = this.pms.indexOf(e);
				t >= 0 && (this.pms.splice(t, 1), gui.setChildHTML("pmbutton", "div.pmbadge", this.pms.length), this.pms.length <= 0 && gui.fadeOut("pmbutton"))
			},
			acceptInvitation: function(e, t) {
				if (!e || !e.data) return;
				this.client && e.data && (e.data.replyid ? this.client.sendPMAction("sendpm", {
					userid: e.senderid,
					message: t ? "yes" : "no",
					replyid: e.data.replyid
				}) : this.client.sendPMAction("confirminvitation", {
					type: e.data.type,
					userid: e.senderid,
					accept: t
				}))
			},
			tryEnterDoorAt: function(e, t) {
				if (!this.player || !this.client || this.player.ghost) return;
				var n = this.mapmanager.getDoorDestination(e, t);
				if (!n) return;
				if (this.lastdoor && this.currentTime < this.lastdoor.time + 1e4 && n.mapname == this.lastdoor.mapname && n.x == this.lastdoor.x && n.y == this.lastdoor.y) return;
				this.lastdoor = n, this.lastdoor.time = this.currentTime, this.client.sendMapMove(n.mapname, n.x, n.y), this.sounds && this.sounds.play("teleport")
			},
			checkHideStartScreen: function() {
				if (this.didShowGame) return;
				if (!this.tilesFinishedLoading || !this.npcsFinishedLoading) return;
				this.didShowGame = !0;
				var e = gui.getDom("gamecontainer");
				e.style.visibility = "visible", gui.fadeOut("startscreen", 250)
			},
			showConsole: function() {
				if (!this.client) return;
				this.client.sendConsoleChat("followchannel", "chat"), gui.show("adminconsole"), this.renderer.isMobile || gui.focus("adminconsoleinput")
			},
			resendShowConsole: function() {
				if (!this.client) return;
				gui.isVisible("adminconsole") && this.client.sendConsoleChat("followchannel", "chat")
			},
			addConsoleText: function(e) {
				gui.appendAndScroll("adminconsoletext", e, !0)
			},
			activateHotkey: function(e, t) {
				if (!this.player || this.player.ghost || !this.client) return;
				this.player.hotkeys && this.player.hotkeys[e] ? t ? this.checkEquipOnHotkey(this.player.hotkeys[e].itemid) : this.menu.showCategory({
					category: "weapon",
					offset: this.player.hotkeys[e].itemid,
					fromhotkey: e
				}) : this.menu.showCategory({
					category: "weapon",
					offset: 0,
					fromhotkey: e
				})
			},
			addHotkey: function(e, t) {
				if (!this.player || !this.client) return;
				this.player.hotkeys || (this.player.hotkeys = {}), this.player.hotkeys[e] = t, this.client.sendHotkey(e, t.itemid), this.displayHotkey(e), t.itemtype != "food" && this.checkEquipOnHotkey(t.itemid)
			},
			updateHotkeys: function() {
				if (!gui.getDom("hotkeys")) return;
				for (var e = 1; e <= 5; e++) this.displayHotkey(e)
			},
			displayHotkey: function(e) {
				var t = this.player && this.player.hotkeys ? this.player.hotkeys[e] : null,
					n = gui.setChildHTML("hotkey" + e, "div.hotkeyimage", "");
				if (!this.guiIsHidden) {
					n && t && n.appendChild(this.menu.getImageDivForMenuItem(t));
					var r = t && this.player && this.player.weaponMode && this.player.weaponMode["itemid"] == t.itemid;
					gui.setBackgroundImage("hotkey" + e, "../files/gui/bbuilder_hotkey" + (r ? "-active" : "") + ".png")
				}
			},
			checkEquipOnHotkey: function(e) {
				this.player && this.client && !this.player.isReloading() && (!this.player.weaponMode || this.player.weaponMode["itemid"] != e || !!this.player.mountData) && this.client.sendUseInventory(e, "equip")
			},
			updateBombButton: function() {
				var e, t;
				this.player ? this.player.isCar() ? e = "carbutton_brake" : this.player.weaponMode && this.player.weaponMode["weapontype"] == "gun" && (!this.player.bow || !this.player.bowData || this.player.bowData["weapontype"] != "snowball") ? (this.player.weaponMode.clip ? e = "reload" + (this.renderer.isMobile ? "" : "pc") + "button" : e = null, this.player.weaponMode.mode2 && (t = "2ndmode-hotkey" + (this.player.weaponMode == this.player.weaponData ? "" : "-active"))) : e = (this.player.bow && this.player.bowData ? this.player.bowData.weapontype : "bomb") + "button" : e = null, this.player && this.player.canGrab() && (e = "fistbutton"), e ? (gui.setBackgroundImage("bombbutton", "../files/gui/bbuilder_" + e + ".png"), gui.show("bombbutton")) : gui.hide("bombbutton"), t ? (gui.setBackgroundImage("mode2button", "../files/gui/" + t + ".png"), gui.show("mode2button")) : gui.hide("mode2button")
			},
			updateCarButtons: function() {
				if (this.app.config.primaryweapon != "gun") return;
				this.player && this.player.isCar() ? (gui.setBackgroundImage("movepad", "../files/gui/bbuilder_carbutton_steer.png"), gui.removeClass("movepad", "padmaxhalf"), gui.setBackgroundImage("weaponpad", "../files/gui/bbuilder_carbutton_gas.png"), gui.removeClass("weaponpad", "padmaxhalf"), gui.setBackgroundImage("lightsbutton", "../files/gui/bbuilder_carbutton_lights" + (this.player.carLightsOn ? "" : "off") + ".png"), gui.show("lightsbutton"), gui.show("hornbutton")) : (gui.setBackgroundImage("movepad", "../files/gui/corleone_movepad.png"), gui.addClass("movepad", "padmaxhalf"), gui.setBackgroundImage("weaponpad", "../files/gui/corleone_weaponpad.png"), gui.addClass("weaponpad", "padmaxhalf"), gui.hide("lightsbutton"), gui.hide("hornbutton")), this.updateBombButton()
			},
			showVS: function(e, t) {
				if (!gui.exists("showvs")) return;
				var n = this.animationmanager;
				gui.hide("showvswinner"), gui.setBackgroundImage("showvshead1", n.getPathForDefault("HEAD") + e.head), gui.setBackgroundImage("showvshat1", e.hat && e.hat.length > 0 ? n.getPathForDefault("HAT") + e.hat : ""), gui.setHTML("showvsname1", e.name), gui.setBackgroundImage("showvshead2", n.getPathForDefault("HEAD") + t.head), gui.setBackgroundImage("showvshat2", t.hat && t.hat.length > 0 ? n.getPathForDefault("HAT") + t.hat : ""), gui.setHTML("showvsname2", t.name), gui.show("showvs"), this.vstimeout && clearTimeout(this.vstimeout);
				var r = this;
				this.vstimeout = setTimeout(function() {
					r.vstimeout = null, gui.hide("showvs")
				}, 3e3)
			},
			showVSWinner: function(e, t) {
				if (!gui.exists("showvswinner")) return;
				var n = this.animationmanager;
				gui.hide("showvs"), gui.setBackgroundImage("showvsheadw", n.getPathForDefault("HEAD") + e.head), gui.setBackgroundImage("showvshatw", e.hat && e.hat.length > 0 ? n.getPathForDefault("HAT") + e.hat : ""), gui.setHTML("showvsnamew", e.name), gui.setHTML("showvsstreak", t && t > 1 ? translate("Streak of %d", [t]) : ""), gui.show("showvswinner"), this.vswinnertimeout && clearTimeout(this.vswinnertimeout);
				var r = this;
				this.vswinnertimeout = setTimeout(function() {
					r.vswinnertimeout = null, gui.hide("showvswinner")
				}, 5e3)
			},
			showVSClans: function(e, t) {
				if (!gui.exists("showvsclans")) return;
				gui.hide("showvsclanwinner"), gui.setHTML("showvsclan1", e), gui.setHTML("showvsclan2", t), gui.show("showvsclans"), this.vsclanstimeout && clearTimeout(this.vsclanstimeout);
				var n = this;
				this.vsclanstimeout = setTimeout(function() {
					n.vsclanstimeout = null, gui.hide("showvsclans")
				}, 3e3)
			},
			showVSClanWinner: function(e) {
				if (!gui.exists("showvsclanwinner")) return;
				gui.hide("showvsclans"), gui.setHTML("showvsclanw", e), gui.show("showvsclanwinner"), this.vsclanwinnertimeout && clearTimeout(this.vsclanwinnertimeout);
				var t = this;
				this.vsclanwinnertimeout = setTimeout(function() {
					t.vsclanwinnertimeout = null, gui.hide("showvsclanwinner")
				}, 5e3)
			},
			getClanFromName: function(e) {
				if (!e) return null;
				var t = e.indexOf("(");
				return t < 0 ? null : (e = e.substring(t + 1), t = e.indexOf(")"), t < 0 ? null : e.substring(0, t).trim())
			},
			canIdentify: function() {
				return this.player && this.player.ghost && this.client
			},
			identifyByDevice: function() {
				if (!this.canIdentify() || this.startedIdentify) return;
				gui.hide("identifybuttons"), gui.show("identifywait"), this.player && this.player._stopAndAnimate("idle"), this.startedIdentify = "device", this.storage.loadWithCookie(""), this.client.sendIdentify("device", {
					cookie: this.storage.getCookie(),
					cookie2: this.storage.getCookie2()
				})
			},
			loginWithFacebookResponse: function(e) {
				if (!this.canIdentify() || this.startedIdentify) return;
				if (e.status != "connected" || !e.authResponse) return;
				gui.hide("identifybuttons"), gui.show("identifywait"), this.player && this.player._stopAndAnimate("idle"), this.startedIdentify = "facebook", this.storage.loadWithCookie(""), this.client.sendIdentify("facebook", {
					signedrequest: e.authResponse.signedRequest,
					cookie: this.storage.getCookie()
				})
			},
			showIdentifyByEmail: function() {
				if (!this.canIdentify() || this.startedIdentify) return;
				gui.hide("identifybuttons"), gui.show("identifyscreenemail")
			},
			closeIdentifyByEmail: function() {
				if (!this.canIdentify() || this.startedIdentify) return;
				gui.hide("identifyscreenemail"), gui.show("identifybuttons")
			},
			sendIdentifyByEmail: function() {
				if (!this.canIdentify() || this.startedIdentify) return;
				var e = gui.getDom("identifyscreenemail"),
					t = e.querySelector("#email").value.trim(),
					n = e.querySelector("#password").value.trim();
				if (t.length <= 0 || n.length <= 0) return;
				gui.hide(e), gui.show("identifywait"), this.player && this.player._stopAndAnimate("idle"), this.startedIdentify = "email", this.storage.loadWithCookie(""), this.client.sendIdentify("email", {
					email: t,
					password: n,
					cookie: this.storage.getCookie()
				})
			},
			checkLoginLink: function() {
				if (!this.canIdentify() || this.startedIdentify) return;
				if (!gui.isVisible("identifyscreen")) return;
				var e = this.getUrlVars();
				if (!e.email || e.email.length <= 0 || !e.password || e.password.length <= 0) return;
				var t = gui.getDom("identifyscreenemail");
				t.querySelector("#email").value = e.email, t.querySelector("#password").value = e.password, gui.hide("identifybuttons"), gui.hide(t), gui.show("identifywait"), this.player && this.player._stopAndAnimate("idle"), this.startedIdentify = "email", this.storage.loadWithCookie(""), this.client.sendIdentify("email", {
					email: e.email,
					password: e.password,
					cookie: this.storage.getCookie()
				}), window.history && window.history.replaceState({}, document.title, window.location.href.split("?")[0])
			},
			getUrlVars: function() {
				var e = {},
					t = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(t, n, r) {
						e[n] = decodeURIComponent(r)
					});
				return e
			},
			showIdentifyNewUser: function() {
				if (!this.canIdentify() || this.startedIdentify) return;
				gui.hide("identifybuttons"), gui.show("identifyscreennewuser")
			},
			closeIdentifyNewUser: function() {
				if (!this.canIdentify() || this.startedIdentify) return;
				gui.hide("identifyscreennewuser"), gui.show("identifybuttons")
			},
			sendIdentifyNewUser: function() {
				if (!this.canIdentify() || this.startedIdentify) return;
				var e = gui.getDom("identifyscreennewuser"),
					t = e.querySelector("#emailnewuser").value.trim();
				if (t.length <= 0) return;
				gui.hide(e), gui.show("identifywait"), this.player && this.player._stopAndAnimate("idle"), this.startedIdentify = "newemail", this.storage.loadWithCookie(""), this.creatingNewEmail = t, this.client.sendIdentify("newemail", {
					email: t
				})
			},
			receivedIdentifyInfo: function(e, t) {
				if (!this.canIdentify() || !this.startedIdentify || this.startedIdentify != e) return;
				if (t.error) {
					delete this.startedIdentify;
					switch (t.error) {
						case "wrongaccount":
							this.menu.showModalMessage("An account with that name couldn't be found. Please type the correct name.", !0, "Wrong Account");
							break;
						case "wrongpassword":
							this.menu.showModalMessage("The password is wrong. Please type the correct password.", !0, "Wrong Password");
							break;
						case "nodevicelogin":
							this.menu.showModalMessage("You cannot identify by device here.", !0, "Device Login Disabled");
							break;
						case "invalidfbtoken":
							this.menu.showModalMessage("There was a problem with the Facebook login.", !0, "Facebook Login Problem");
							break;
						case "invalidemail":
							this.menu.showModalMessage("The e-mail address is invalid. Please write it correctly.", !0, "Invalid Email");
							break;
						case "createaccountdisabled":
							this.menu.showModalMessage("Creating new accounts is currently disabled by the administrators.", !0, "Accounts Disabled");
							break;
						case "accountinactive":
							this.menu.showModalMessage("Your account has been set inactive by administrators.", !0, "Account Inactive");
							break;
						case "passwordalreadysent":
							this.menu.showModalMessage("The password has already been sent to your e-mail address!", !0, "Password Already Sent");
							break;
						case "passwordemailsent":
							this.menu.showModalMessage("An account has been created for you! Check your e-mails to get the password. Please also check your spam folder.", !0, "Success! Check Your Emails");
							break;
						case "passwordemailsentagain":
							this.menu.showModalMessage("An account for that e-mail already existed. Check your e-mails to get the new password. Please also check your spam folder.", !0, "Success! Check Your Emails");
							break;
						case "passwordemailnotsent":
							this.menu.showModalMessage("The e-mail couldn't be sent. Try again later.", !0, "Error Sending Email");
							break;
						case "toomanyaccounts":
							this.menu.showModalMessage("You have created too many accounts. Please try later.", !0, "Too Many Accounts");
							break;
						case "silent":
							break;
						default:
							this.menu.showModalMessage(translate("There was an error logging in (%s)", [t.error]), !0, "Error")
					}
					switch (e) {
						case "device":
						case "facebook":
							gui.hide("identifywait"), gui.show("identifybuttons");
							break;
						case "email":
							gui.hide("identifywait"), gui.show("identifyscreenemail");
							break;
						case "newemail":
							gui.hide("identifywait");
							if (["passwordemailsent", "passwordemailsentagain", "passwordalreadysent"].indexOf(t.error) >= 0) {
								var n = gui.getDom("identifyscreenemail");
								gui.show(n), n.querySelector("#email").value = this.creatingNewEmail, n.querySelector("#password").value = ""
							} else gui.show("identifyscreennewuser")
					}
				}
			},
			finishedIdentify: function(e) {
				delete this.startedIdentify, this.player && delete this.player.ghost, gui.hide("identifyscreen"), gui.removeClass("canvas", "grayed"), this.checkHideFullGui(), this.storage.ghost = e
			}
		});
		return b
	}),
	function() {
		var e = this,
			t = e._,
			n = {},
			r = Array.prototype,
			i = Object.prototype,
			s = r.slice,
			o = r.unshift,
			u = i.toString,
			a = i.hasOwnProperty,
			f = r.forEach,
			l = r.map,
			c = r.reduce,
			h = r.reduceRight,
			p = r.filter,
			d = r.every,
			v = r.some,
			m = r.indexOf,
			g = r.lastIndexOf;
		i = Array.isArray;
		var y = Object.keys,
			b = Function.prototype.bind,
			w = function(e) {
				return new N(e)
			};
		e._ = w, w.VERSION = "1.1.7";
		var E = w.each = w.forEach = function(e, t, r) {
			if (e != null)
				if (f && e.forEach === f) e.forEach(t, r);
				else if (e.length === +e.length) {
				for (var i = 0, s = e.length; i < s; i++)
					if (i in e && t.call(r, e[i], i, e) === n) break
			} else
				for (i in e)
					if (a.call(e, i) && t.call(r, e[i], i, e) === n) break
		};
		w.map = function(e, t, n) {
			var r = [];
			return e == null ? r : l && e.map === l ? e.map(t, n) : (E(e, function(e, i, s) {
				r[r.length] = t.call(n, e, i, s)
			}), r)
		}, w.reduce = w.foldl = w.inject = function(e, t, n, r) {
			var i = n !== void 0;
			e == null && (e = []);
			if (c && e.reduce === c) return r && (t = w.bind(t, r)), i ? e.reduce(t, n) : e.reduce(t);
			E(e, function(e, s, o) {
				i ? n = t.call(r, n, e, s, o) : (n = e, i = !0)
			});
			if (!i) throw new TypeError("Reduce of empty array with no initial value");
			return n
		}, w.reduceRight = w.foldr = function(e, t, n, r) {
			return e == null && (e = []), h && e.reduceRight === h ? (r && (t = w.bind(t, r)), n !== void 0 ? e.reduceRight(t, n) : e.reduceRight(t)) : (e = (w.isArray(e) ? e.slice() : w.toArray(e)).reverse(), w.reduce(e, t, n, r))
		}, w.find = w.detect = function(e, t, n) {
			var r;
			return S(e, function(e, i, s) {
				if (t.call(n, e, i, s)) return r = e, !0
			}), r
		}, w.filter = w.select = function(e, t, n) {
			var r = [];
			return e == null ? r : p && e.filter === p ? e.filter(t, n) : (E(e, function(e, i, s) {
				t.call(n, e, i, s) && (r[r.length] = e)
			}), r)
		}, w.reject = function(e, t, n) {
			var r = [];
			return e == null ? r : (E(e, function(e, i, s) {
				t.call(n, e, i, s) || (r[r.length] = e)
			}), r)
		}, w.every = w.all = function(e, t, r) {
			var i = !0;
			return e == null ? i : d && e.every === d ? e.every(t, r) : (E(e, function(e, s, o) {
				if (!(i = i && t.call(r, e, s, o))) return n
			}), i)
		};
		var S = w.some = w.any = function(e, t, r) {
			t = t || w.identity;
			var i = !1;
			return e == null ? i : v && e.some === v ? e.some(t, r) : (E(e, function(e, s, o) {
				if (i |= t.call(r, e, s, o)) return n
			}), !!i)
		};
		w.include = w.contains = function(e, t) {
			var n = !1;
			return e == null ? n : m && e.indexOf === m ? e.indexOf(t) != -1 : (S(e, function(e) {
				if (n = e === t) return !0
			}), n)
		}, w.invoke = function(e, t) {
			var n = s.call(arguments, 2);
			return w.map(e, function(e) {
				return (t.call ? t || e : e[t]).apply(e, n)
			})
		}, w.pluck = function(e, t) {
			return w.map(e, function(e) {
				return e[t]
			})
		}, w.max = function(e, t, n) {
			if (!t && w.isArray(e)) return Math.max.apply(Math, e);
			var r = {
				computed: -Infinity
			};
			return E(e, function(e, i, s) {
				i = t ? t.call(n, e, i, s) : e, i >= r.computed && (r = {
					value: e,
					computed: i
				})
			}), r.value
		}, w.min = function(e, t, n) {
			if (!t && w.isArray(e)) return Math.min.apply(Math, e);
			var r = {
				computed: Infinity
			};
			return E(e, function(e, i, s) {
				i = t ? t.call(n, e, i, s) : e, i < r.computed && (r = {
					value: e,
					computed: i
				})
			}), r.value
		}, w.sortBy = function(e, t, n) {
			return w.pluck(w.map(e, function(e, r, i) {
				return {
					value: e,
					criteria: t.call(n, e, r, i)
				}
			}).sort(function(e, t) {
				var n = e.criteria,
					r = t.criteria;
				return n < r ? -1 : n > r ? 1 : 0
			}), "value")
		}, w.groupBy = function(e, t) {
			var n = {};
			return E(e, function(e, r) {
				var i = t(e, r);
				(n[i] || (n[i] = [])).push(e)
			}), n
		}, w.sortedIndex = function(e, t, n) {
			n || (n = w.identity);
			for (var r = 0, i = e.length; r < i;) {
				var s = r + i >> 1;
				n(e[s]) < n(t) ? r = s + 1 : i = s
			}
			return r
		}, w.toArray = function(e) {
			return e ? e.toArray ? e.toArray() : w.isArray(e) ? s.call(e) : w.isArguments(e) ? s.call(e) : w.values(e) : []
		}, w.size = function(e) {
			return w.toArray(e).length
		}, w.first = w.head = function(e, t, n) {
			return t != null && !n ? s.call(e, 0, t) : e[0]
		}, w.rest = w.tail = function(e, t, n) {
			return s.call(e, t == null || n ? 1 : t)
		}, w.last = function(e) {
			return e[e.length - 1]
		}, w.compact = function(e) {
			return w.filter(e, function(e) {
				return !!e
			})
		}, w.flatten = function(e) {
			return w.reduce(e, function(e, t) {
				return w.isArray(t) ? e.concat(w.flatten(t)) : (e[e.length] = t, e)
			}, [])
		}, w.without = function(e) {
			return w.difference(e, s.call(arguments, 1))
		}, w.uniq = w.unique = function(e, t) {
			return w.reduce(e, function(e, n, r) {
				if (0 == r || (t === !0 ? w.last(e) != n : !w.include(e, n))) e[e.length] = n;
				return e
			}, [])
		}, w.union = function() {
			return w.uniq(w.flatten(arguments))
		}, w.intersection = w.intersect = function(e) {
			var t = s.call(arguments, 1);
			return w.filter(w.uniq(e), function(e) {
				return w.every(t, function(t) {
					return w.indexOf(t, e) >= 0
				})
			})
		}, w.difference = function(e, t) {
			return w.filter(e, function(e) {
				return !w.include(t, e)
			})
		}, w.zip = function() {
			for (var e = s.call(arguments), t = w.max(w.pluck(e, "length")), n = Array(t), r = 0; r < t; r++) n[r] = w.pluck(e, "" + r);
			return n
		}, w.indexOf = function(e, t, n) {
			if (e == null) return -1;
			var r;
			if (n) return n = w.sortedIndex(e, t), e[n] === t ? n : -1;
			if (m && e.indexOf === m) return e.indexOf(t);
			n = 0;
			for (r = e.length; n < r; n++)
				if (e[n] === t) return n;
			return -1
		}, w.lastIndexOf = function(e, t) {
			if (e == null) return -1;
			if (g && e.lastIndexOf === g) return e.lastIndexOf(t);
			for (var n = e.length; n--;)
				if (e[n] === t) return n;
			return -1
		}, w.range = function(e, t, n) {
			arguments.length <= 1 && (t = e || 0, e = 0), n = arguments[2] || 1;
			for (var r = Math.max(Math.ceil((t - e) / n), 0), i = 0, s = Array(r); i < r;) s[i++] = e, e += n;
			return s
		}, w.bind = function(e, t) {
			if (e.bind === b && b) return b.apply(e, s.call(arguments, 1));
			var n = s.call(arguments, 2);
			return function() {
				return e.apply(t, n.concat(s.call(arguments)))
			}
		}, w.bindAll = function(e) {
			var t = s.call(arguments, 1);
			return t.length == 0 && (t = w.functions(e)), E(t, function(t) {
				e[t] = w.bind(e[t], e)
			}), e
		}, w.memoize = function(e, t) {
			var n = {};
			return t || (t = w.identity),
				function() {
					var r = t.apply(this, arguments);
					return a.call(n, r) ? n[r] : n[r] = e.apply(this, arguments)
				}
		}, w.delay = function(e, t) {
			var n = s.call(arguments, 2);
			return setTimeout(function() {
				return e.apply(e, n)
			}, t)
		}, w.defer = function(e) {
			return w.delay.apply(w, [e, 1].concat(s.call(arguments, 1)))
		};
		var x = function(e, t, n) {
			var r;
			return function() {
				var i = this,
					s = arguments,
					o = function() {
						r = null, e.apply(i, s)
					};
				n && clearTimeout(r);
				if (n || !r) r = setTimeout(o, t)
			}
		};
		w.throttle = function(e, t) {
			return x(e, t, !1)
		}, w.debounce = function(e, t) {
			return x(e, t, !0)
		}, w.once = function(e) {
			var t = !1,
				n;
			return function() {
				return t ? n : (t = !0, n = e.apply(this, arguments))
			}
		}, w.wrap = function(e, t) {
			return function() {
				var n = [e].concat(s.call(arguments));
				return t.apply(this, n)
			}
		}, w.compose = function() {
			var e = s.call(arguments);
			return function() {
				for (var t = s.call(arguments), n = e.length - 1; n >= 0; n--) t = [e[n].apply(this, t)];
				return t[0]
			}
		}, w.after = function(e, t) {
			return function() {
				if (--e < 1) return t.apply(this, arguments)
			}
		}, w.keys = y || function(e) {
			if (e !== Object(e)) throw new TypeError("Invalid object");
			var t = [],
				n;
			for (n in e) a.call(e, n) && (t[t.length] = n);
			return t
		}, w.values = function(e) {
			return w.map(e, w.identity)
		}, w.functions = w.methods = function(e) {
			var t = [],
				n;
			for (n in e) w.isFunction(e[n]) && t.push(n);
			return t.sort()
		}, w.extend = function(e) {
			return E(s.call(arguments, 1), function(t) {
				for (var n in t) t[n] !== void 0 && (e[n] = t[n])
			}), e
		}, w.defaults = function(e) {
			return E(s.call(arguments, 1), function(t) {
				for (var n in t) e[n] == null && (e[n] = t[n])
			}), e
		}, w.clone = function(e) {
			return w.isArray(e) ? e.slice() : w.extend({}, e)
		}, w.tap = function(e, t) {
			return t(e), e
		}, w.isEqual = function(e, t) {
			if (e === t) return !0;
			var n = typeof e;
			if (n != typeof t) return !1;
			if (e == t) return !0;
			if (!e && t || e && !t) return !1;
			e._chain && (e = e._wrapped), t._chain && (t = t._wrapped);
			if (e.isEqual) return e.isEqual(t);
			if (t.isEqual) return t.isEqual(e);
			if (w.isDate(e) && w.isDate(t)) return e.getTime() === t.getTime();
			if (w.isNaN(e) && w.isNaN(t)) return !1;
			if (w.isRegExp(e) && w.isRegExp(t)) return e.source === t.source && e.global === t.global && e.ignoreCase === t.ignoreCase && e.multiline === t.multiline;
			if (n !== "object") return !1;
			if (e.length && e.length !== t.length) return !1;
			n = w.keys(e);
			var r = w.keys(t);
			if (n.length != r.length) return !1;
			for (var i in e)
				if (!(i in t) || !w.isEqual(e[i], t[i])) return !1;
			return !0
		}, w.isEmpty = function(e) {
			if (w.isArray(e) || w.isString(e)) return e.length === 0;
			for (var t in e)
				if (a.call(e, t)) return !1;
			return !0
		}, w.isElement = function(e) {
			return !!e && e.nodeType == 1
		}, w.isArray = i || function(e) {
			return u.call(e) === "[object Array]"
		}, w.isObject = function(e) {
			return e === Object(e)
		}, w.isArguments = function(e) {
			return !!e && !!a.call(e, "callee")
		}, w.isFunction = function(e) {
			return !(!e || !e.constructor || !e.call || !e.apply)
		}, w.isString = function(e) {
			return !!(e === "" || e && e.charCodeAt && e.substr)
		}, w.isNumber = function(e) {
			return !!(e === 0 || e && e.toExponential && e.toFixed)
		}, w.isNaN = function(e) {
			return e !== e
		}, w.isBoolean = function(e) {
			return e === !0 || e === !1
		}, w.isDate = function(e) {
			return !(!e || !e.getTimezoneOffset || !e.setUTCFullYear)
		}, w.isRegExp = function(e) {
			return !(!e || !e.test || !e.exec || !e.ignoreCase && e.ignoreCase !== !1)
		}, w.isNull = function(e) {
			return e === null
		}, w.isUndefined = function(e) {
			return e === void 0
		}, w.noConflict = function() {
			return e._ = t, this
		}, w.identity = function(e) {
			return e
		}, w.times = function(e, t, n) {
			for (var r = 0; r < e; r++) t.call(n, r)
		}, w.mixin = function(e) {
			E(w.functions(e), function(t) {
				k(t, w[t] = e[t])
			})
		};
		var T = 0;
		w.uniqueId = function(e) {
			var t = T++;
			return e ? e + t : t
		}, w.templateSettings = {
			evaluate: /<%([\s\S]+?)%>/g,
			interpolate: /<%=([\s\S]+?)%>/g
		}, w.template = function(e, t) {
			var n = w.templateSettings;
			return n = "var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('" + e.replace(/\\/g, "\\\\").replace(/'/g, "\\'").replace(n.interpolate, function(e, t) {
				return "'," + t.replace(/\\'/g, "'") + ",'"
			}).replace(n.evaluate || null, function(e, t) {
				return "');" + t.replace(/\\'/g, "'").replace(/[\r\n\t]/g, " ") + "__p.push('"
			}).replace(/\r/g, "\\r").replace(/\n/g, "\\n").replace(/\t/g, "\\t") + "');}return __p.join('');", n = new Function("obj", n), t ? n(t) : n
		};
		var N = function(e) {
			this._wrapped = e
		};
		w.prototype = N.prototype;
		var C = function(e, t) {
				return t ? w(e).chain() : e
			},
			k = function(e, t) {
				N.prototype[e] = function() {
					var e = s.call(arguments);
					return o.call(e, this._wrapped), C(t.apply(w, e), this._chain)
				}
			};
		w.mixin(w), E(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(e) {
			var t = r[e];
			N.prototype[e] = function() {
				return t.apply(this._wrapped, arguments), C(this._wrapped, this._chain)
			}
		}), E(["concat", "join", "slice"], function(e) {
			var t = r[e];
			N.prototype[e] = function() {
				return C(t.apply(this._wrapped, arguments), this._chain)
			}
		}), N.prototype.chain = function() {
			return this._chain = !0, this
		}, N.prototype.value = function() {
			return this._wrapped
		}
	}(), define("lib/underscore.min", function() {}),
	function(e) {
		function n() {
			var e = arguments[0],
				t = n.cache;
			if (!t[e] || !t.hasOwnProperty(e)) t[e] = n.parse(e);
			return n.format.call(null, t[e], arguments)
		}

		function i(e) {
			return Object.prototype.toString.call(e).slice(8, -1).toLowerCase()
		}

		function s(e, t) {
			return Array(t + 1).join(e)
		}
		var t = {
			not_string: /[^s]/,
			number: /[diefg]/,
			json: /[j]/,
			not_json: /[^j]/,
			text: /^[^\x25]+/,
			modulo: /^\x25{2}/,
			placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,
			key: /^([a-z_][a-z_\d]*)/i,
			key_access: /^\.([a-z_][a-z_\d]*)/i,
			index_access: /^\[(\d+)\]/,
			sign: /^[\+\-]/
		};
		n.format = function(e, r) {
			var o = 1,
				u = e.length,
				a = "",
				f, l = [],
				c, h, p, d, v, m, g = !0,
				y = "";
			for (c = 0; c < u; c++) {
				a = i(e[c]);
				if (a === "string") l[l.length] = e[c];
				else if (a === "array") {
					p = e[c];
					if (p[2]) {
						f = r[o];
						for (h = 0; h < p[2].length; h++) {
							if (!f.hasOwnProperty(p[2][h])) throw new Error(n("[sprintf] property '%s' does not exist", p[2][h]));
							f = f[p[2][h]]
						}
					} else p[1] ? f = r[p[1]] : f = r[o++];
					i(f) == "function" && (f = f());
					if (t.not_string.test(p[8]) && t.not_json.test(p[8]) && i(f) != "number" && isNaN(f)) throw new TypeError(n("[sprintf] expecting number but found %s", i(f)));
					t.number.test(p[8]) && (g = f >= 0);
					switch (p[8]) {
						case "b":
							f = f.toString(2);
							break;
						case "c":
							f = String.fromCharCode(f);
							break;
						case "d":
						case "i":
							f = parseInt(f, 10);
							break;
						case "j":
							f = JSON.stringify(f, null, p[6] ? parseInt(p[6]) : 0);
							break;
						case "e":
							f = p[7] ? f.toExponential(p[7]) : f.toExponential();
							break;
						case "f":
							f = p[7] ? parseFloat(f).toFixed(p[7]) : parseFloat(f);
							break;
						case "g":
							f = p[7] ? parseFloat(f).toPrecision(p[7]) : parseFloat(f);
							break;
						case "o":
							f = f.toString(8);
							break;
						case "s":
							f = (f = String(f)) && p[7] ? f.substring(0, p[7]) : f;
							break;
						case "u":
							f >>>= 0;
							break;
						case "x":
							f = f.toString(16);
							break;
						case "X":
							f = f.toString(16).toUpperCase()
					}
					t.json.test(p[8]) ? l[l.length] = f : (t.number.test(p[8]) && (!g || p[3]) ? (y = g ? "+" : "-", f = f.toString().replace(t.sign, "")) : y = "", v = p[4] ? p[4] === "0" ? "0" : p[4].charAt(1) : " ", m = p[6] - (y + f).length, d = p[6] ? m > 0 ? s(v, m) : "" : "", l[l.length] = p[5] ? y + f + d : v === "0" ? y + d + f : d + y + f)
				}
			}
			return l.join("")
		}, n.cache = {}, n.parse = function(e) {
			var n = e,
				r = [],
				i = [],
				s = 0;
			while (n) {
				if ((r = t.text.exec(n)) !== null) i[i.length] = r[0];
				else if ((r = t.modulo.exec(n)) !== null) i[i.length] = "%";
				else {
					if ((r = t.placeholder.exec(n)) === null) throw new SyntaxError("[sprintf] unexpected placeholder");
					if (r[2]) {
						s |= 1;
						var o = [],
							u = r[2],
							a = [];
						if ((a = t.key.exec(u)) === null) throw new SyntaxError("[sprintf] failed to parse named argument key");
						o[o.length] = a[1];
						while ((u = u.substring(a[0].length)) !== "")
							if ((a = t.key_access.exec(u)) !== null) o[o.length] = a[1];
							else {
								if ((a = t.index_access.exec(u)) === null) throw new SyntaxError("[sprintf] failed to parse named argument key");
								o[o.length] = a[1]
							}
						r[2] = o
					} else s |= 2;
					if (s === 3) throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
					i[i.length] = r
				}
				n = n.substring(r[0].length)
			}
			return i
		};
		var r = function(e, t, r) {
			return r = (t || []).slice(0), r.splice(0, 0, e), n.apply(null, r)
		};
		typeof exports != "undefined" ? (exports.sprintf = n, exports.vsprintf = r) : (e.sprintf = n, e.vsprintf = r, typeof define == "function" && define.amd && define("lib/sprintf", [], function() {
			return {
				sprintf: n,
				vsprintf: r
			}
		}))
	}(typeof window == "undefined" ? this : window);
var isInt = function(e) {
		return e % 1 === 0
	},
	requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(e, t) {
		window.setTimeout(e, 50)
	},
	translate = function(e, t) {
		if (e) {
			typeof translations != "undefined" && translations[e] && translations[e].length > 0 && (e = translations[e]);
			if (t && t.length > 0) try {
				e = vsprintf(e, t)
			} catch (n) {}
		}
		return e
	};
define("util", function() {});
var Guid = Guid || function() {
	var e = "00000000-0000-0000-0000-000000000000",
		t = function(e, n, r) {
			return e.length >= n ? e : t(r + e, n, r || " ")
		},
		n = function(e) {
			var n = e.toString(16);
			return t(n, 4, "0")
		},
		r = function() {
			var e = new window.Uint16Array(8);
			return window.crypto.getRandomValues(e), [n(e[0]) + n(e[1]), n(e[2]), n(e[3]), n(e[4]), n(e[5]) + n(e[6]) + n(e[7])].join("-")
		},
		i = function() {
			var e = (new Date).getTime();
			return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(t) {
				var n = (e + Math.random() * 16) % 16 | 0;
				return e = Math.floor(e / 16), (t === "x" ? n : n & 7 | 8).toString(16)
			})
		},
		s = function() {
			var e = typeof window.crypto != "undefined",
				t = e && typeof window.crypto.getRandomValues != "undefined";
			return e && t ? r() : i()
		};
	return {
		newGuid: s,
		empty: e
	}
}();
define("guid", function() {});
var gui = gui || function() {
	var e = function(e) {
			return typeof e == "string" ? e === "body" ? document.body : document.getElementById(e) : e
		},
		t = function(e) {
			return document.getElementById(e) != null
		},
		n = function(t) {
			var n = e(t);
			n && (n.style.display = "none")
		},
		r = function(t) {
			var n = e(t);
			n && (n.style.display = "block")
		},
		i = function(t, n) {
			var r = e(t);
			return r ? r.querySelectorAll(n) : null
		},
		s = function(t, n) {
			var r = e(t);
			if (!r) return;
			r.classList ? r.classList.add(n) : r.className += " " + n
		},
		o = function(t, n) {
			var r = e(t);
			if (!r) return;
			r.classList ? r.classList.remove(n) : r.className = r.className.replace(new RegExp("(^|\\b)" + n.split(" ").join("|") + "(\\b|$)", "gi"), " ")
		},
		u = function(t, n, r, i) {
			var u = e(t);
			if (!u) return;
			var a = u.querySelectorAll(r);
			for (var f in a) {
				var l = a[f];
				l == i ? s(l, n) : typeof l == "object" && o(l, n)
			}
		},
		a = function(t, n) {
			var r = e(t);
			return r ? r.classList ? r.classList.contains(n) : (new RegExp("(^| )" + n + "( |$)", "gi")).test(r.className) : !1
		},
		f = function(t, n) {
			var r = e(t);
			return r && (r.innerHTML = n), r
		},
		l = function(t, n, r) {
			var i = e(t);
			i && i.setAttribute(n, r)
		},
		c = function(t, n) {
			var r = e(t);
			r && (r.style.backgroundImage = n && n.length > 0 ? "url('" + n + "')" : "none")
		},
		h = function(t) {
			var n = e(t);
			n && n.parentNode && n.parentNode.removeChild(n)
		},
		p = function(t, n, r) {
			var i = e(t);
			if (!i) return null;
			var s = function(e) {
				r && !r(e) && e && (e.preventDefault(), e.stopPropagation())
			};
			return i.addEventListener(n, s, !1), s
		},
		d = function(t, n, r) {
			if (!r) return;
			var i = e(t);
			i && i.removeEventListener(n, r, !1)
		},
		v = function(t) {
			if (Config_Extern && Config_Extern.platform == "iphone") return;
			var n = e(t);
			n && n.focus()
		},
		m = function(t) {
			var n = e(t);
			n && n.blur()
		},
		g = function(t) {
			var n = e(t);
			return n ? n.offsetWidth : 0
		},
		y = function(t) {
			var n = e(t);
			return n ? n.offsetHeight : 0
		},
		b = function(t) {
			var n = e(t);
			if (!n) return {
				left: 0,
				top: 0
			};
			var r = n.getBoundingClientRect();
			return {
				top: r.top + document.body.scrollTop,
				left: r.left + document.body.scrollLeft
			}
		},
		w = function(t) {
			var n = e(t);
			return {
				left: n.offsetLeft,
				top: n.offsetTop
			}
		},
		E = function(t, n) {
			var r = n.changedTouches ? n.changedTouches : n.originalEvent ? n.originalEvent.changedTouches : null;
			r && r.length > 0 && (n = r[0]);
			if (n.pageX !== undefined) {
				var i = e(t).getBoundingClientRect();
				return {
					x: n.pageX - i.left,
					y: n.pageY - i.top
				}
			}
			return {
				x: n.offsetX ? n.offsetX : n.layerX,
				y: n.offsetY ? n.offsetY : n.layerY
			}
		},
		S = function(t) {
			var n = e(t);
			return n ? !!(n.offsetWidth || n.offsetHeight || n.getClientRects().length) : !1
		},
		x = function(t, n) {
			var r = e(t);
			if (!r) return;
			if (!n) {
				r.onclick = null;
				return
			}
			r.onclick = function(e) {
				if (e) {
					e.stopPropagation(), e.preventDefault();
					var t = E(r, e);
					n(e, t.x, t.y)
				} else n(e);
				return !1
			}, t != "identifyfacebookbutton" && t != "identifyforumsbutton" && p(r, "touchstart", function(e) {
				if (e) {
					e.stopPropagation(), e.preventDefault();
					var t = E(r, e);
					n(e, t.x, t.y)
				} else n(e);
				return !1
			})
		},
		T = function(t, n, r) {
			var i = e(t);
			if (!i) return;
			var s = i.querySelectorAll(n);
			for (var o in s) {
				var u = s[o];
				r ? u.onclick = function(e) {
					return e && (e.stopPropagation(), e.preventDefault()), r(e), !1
				} : u.onclick = null
			}
		},
		N = function(t, n, r) {
			var i = e(t);
			if (!i) return null;
			var s = i.querySelector(n);
			return s ? (s.innerHTML = r, s) : null
		},
		C = function(e, t) {
			if (t) {
				var n = !0;
				for (var r in t) e += (n ? "?" : "&") + r + "=" + encodeURIComponent(t[r]), n = !1
			}
			var i = new XMLHttpRequest;
			i.open("GET", e, !0), i.send()
		},
		k = function(t, n, r, i) {
			var s = e(t);
			if (!s) return null;
			var o = s.cloneNode(!0);
			o.style.display = "block", s.parentNode.appendChild(o), n && setTimeout(function() {
				o && o.parentNode && o.parentNode.removeChild(o)
			}, n * 1e3), i && (o.onclick = function(e) {
				i(o)
			}, o.ontouchstart = function(e) {
				e && (e.stopPropagation(), e.preventDefault()), i(o)
			});
			if (r) {
				var u = s.parentNode.childNodes;
				if (u.length > 1 + r) {
					var a = u.length - 1 - r,
						f = [];
					for (var l = 0; l < u.length && f.length < a; l++) {
						var c = s.parentNode.childNodes[l];
						c != s && c != o && f.push(c)
					}
					for (var l in f) s.parentNode.removeChild(f[l])
				}
			}
			return o
		},
		L = function(e, t, n, r, i) {
			var s = new XMLHttpRequest;
			n && (s.onload = function() {
				if (!s.responseText) return;
				try {
					n(t ? JSON.parse(s.responseText) : s.responseText)
				} catch (e) {
					r && r(s, null, e)
				}
			}), r && (s.onerror = function(e) {
				r(s, s.status, "file not found")
			}), s.open("GET", e, !0), i && s.overrideMimeType && s.overrideMimeType(i), s.send(null)
		},
		A = function(t, n) {
			for (var r in n) {
				var i = e(n[r]);
				if (i != null && i.contains(t)) return !0
			}
			return !1
		},
		O = function(t, n, r) {
			var i = e(t);
			if (!i) return;
			i.innerHTML += n + (r ? "<br>" : ""), i.scrollTop = i.scrollHeight
		},
		M = function(e) {
			p(window, "resize", e)
		},
		_ = function(e) {
			p(window, "unload", e)
		},
		D = function(t, n) {
			var r = e(t);
			if (!r) return;
			r.style.opacity = n
		},
		P = function(e, t) {
			j(e, 1, t)
		},
		H = function(e, t) {
			j(e, 0, t)
		},
		B = {},
		j = function(t, n, r, i) {
			var s = e(t);
			if (!s) return;
			var o = r && typeof r == "number" ? r : r == "fast" ? 200 : 400;
			s.style.transition = "opacity " + o / 1e3 + "s linear", s.style.opacity = n, n > 0 ? (s.style.display = "block", i && (B[t] = setTimeout(function() {
				delete B[t], s.style.transition = "", i()
			}, o))) : B[t] = setTimeout(function() {
				delete B[t], s && (s.style.display = "none", s.style.transition = "", s.style.opacity = 1), i && i()
			}, o)
		},
		F = function(e, t, n) {
			B[e] && (clearTimeout(B[e]), delete B[e])
		},
		I = function(e) {
			window.alert && window.alert(e)
		};
	return {
		addClass: s,
		alert: I,
		ajax: L,
		animate: j,
		appendAndScroll: O,
		bind: p,
		blur: m,
		callURL: C,
		cloneAndTimeout: k,
		exists: t,
		fadeIn: P,
		fadeOut: H,
		find: i,
		focus: v,
		getDom: e,
		getHeight: y,
		getOffset: b,
		getPosition: w,
		getWidth: g,
		hasClass: a,
		hide: n,
		isClose: A,
		isVisible: S,
		remove: h,
		removeClass: o,
		setAlpha: D,
		setAttribute: l,
		setBackgroundImage: c,
		setChildClick: T,
		setChildHTML: N,
		setChildClass: u,
		setClick: x,
		setHTML: f,
		setResize: M,
		setUnload: _,
		show: r,
		stop: F,
		unbind: d
	}
}();
define("gui", function() {});
var bitsToNum = function(e) {
		return e.reduce(function(e, t) {
			return e * 2 + t
		}, 0)
	},
	byteToBitArr = function(e) {
		var t = [];
		for (var n = 7; n >= 0; n--) t.push(!!(e & 1 << n));
		return t
	},
	Stream = function(e) {
		this.data = e, this.len = this.data.length, this.pos = 0, this.readByte = function() {
			if (this.pos >= this.data.length) throw new Error("Attempted to read past end of stream.");
			return e.charCodeAt(this.pos++) & 255
		}, this.readBytes = function(e) {
			var t = [];
			for (var n = 0; n < e; n++) t.push(this.readByte());
			return t
		}, this.read = function(e) {
			var t = "";
			for (var n = 0; n < e; n++) t += String.fromCharCode(this.readByte());
			return t
		}, this.readUnsigned = function() {
			var e = this.readBytes(2);
			return (e[1] << 8) + e[0]
		}
	},
	lzwDecode = function(e, t) {
		var n = 0,
			r = function(e) {
				var r = 0;
				for (var i = 0; i < e; i++) t.charCodeAt(n >> 3) & 1 << (n & 7) && (r |= 1 << i), n++;
				return r
			},
			i = [],
			s = 1 << e,
			o = s + 1,
			u = e + 1,
			a = [],
			f = function() {
				a = [], u = e + 1;
				for (var t = 0; t < s; t++) a[t] = [t];
				a[s] = [], a[o] = null
			},
			l, c;
		for (;;) {
			c = l, l = r(u);
			if (l === s) {
				f();
				continue
			}
			if (l === o) break;
			if (l < a.length) c !== s && a.push(a[c].concat(a[l][0]));
			else {
				if (l !== a.length) throw new Error("Invalid LZW code.");
				a.push(a[c].concat(a[c][0]))
			}
			i.push.apply(i, a[l]), a.length === 1 << u && u < 12 && u++
		}
		return i
	},
	parseGIF = function(e, t) {
		t || (t = {});
		var n = function(t) {
				var n = [];
				for (var r = 0; r < t; r++) n.push(e.readBytes(3));
				return n
			},
			r = function() {
				var t, n;
				n = "";
				do t = e.readByte(), n += e.read(t); while (t !== 0);
				return n
			},
			i = function() {
				var r = {};
				r.sig = e.read(3), r.ver = e.read(3);
				if (r.sig !== "GIF") throw new Error("Not a GIF file.");
				r.width = e.readUnsigned(), r.height = e.readUnsigned();
				var i = byteToBitArr(e.readByte());
				r.gctFlag = i.shift(), r.colorRes = bitsToNum(i.splice(0, 3)), r.sorted = i.shift(), r.gctSize = bitsToNum(i.splice(0, 3)), r.bgColor = e.readByte(), r.pixelAspectRatio = e.readByte(), r.gctFlag && (r.gct = n(1 << r.gctSize + 1)), t.hdr && t.hdr(r)
			},
			s = function(n) {
				var i = function(n) {
						var r = e.readByte(),
							i = byteToBitArr(e.readByte());
						n.reserved = i.splice(0, 3), n.disposalMethod = bitsToNum(i.splice(0, 3)), n.userInput = i.shift(), n.transparencyGiven = i.shift(), n.delayTime = e.readUnsigned(), n.transparencyIndex = e.readByte(), n.terminator = e.readByte(), t.gce && t.gce(n)
					},
					s = function(e) {
						e.comment = r(), t.com && t.com(e)
					},
					o = function(n) {
						var i = e.readByte();
						n.ptHeader = e.readBytes(12), n.ptData = r(), t.pte && t.pte(n)
					},
					u = function(n) {
						var i = e.readByte();
						n.identifier = e.read(8), n.authCode = e.read(3), i > 11 && e.read(i - 8 - 3), n.appData = r(), t.app && t.app[n.identifier] && t.app[n.identifier](n)
					},
					a = function(e) {
						e.data = r(), t.unknown && t.unknown(e)
					};
				n.label = e.readByte();
				switch (n.label) {
					case 249:
						n.extType = "gce", i(n);
						break;
					case 254:
						n.extType = "com", s(n);
						break;
					case 1:
						n.extType = "pte", o(n);
						break;
					case 255:
						n.extType = "app", u(n);
						break;
					default:
						n.extType = "unknown", a(n)
				}
			},
			o = function(i) {
				var s = function(e, t) {
					var n = new Array(e.length),
						r = e.length / t,
						i = function(r, i) {
							var s = e.slice(i * t, (i + 1) * t);
							n.splice.apply(n, [r * t, t].concat(s))
						},
						s = [0, 4, 2, 1],
						o = [8, 8, 4, 2],
						u = 0;
					for (var a = 0; a < 4; a++)
						for (var f = s[a]; f < r; f += o[a]) i(f, u), u++;
					return n
				};
				i.leftPos = e.readUnsigned(), i.topPos = e.readUnsigned(), i.width = e.readUnsigned(), i.height = e.readUnsigned();
				var o = byteToBitArr(e.readByte());
				i.lctFlag = o.shift(), i.interlaced = o.shift(), i.sorted = o.shift(), i.reserved = o.splice(0, 2), i.lctSize = bitsToNum(o.splice(0, 3)), i.lctFlag && (i.lct = n(1 << i.lctSize + 1)), i.lzwMinCodeSize = e.readByte();
				var u = r();
				i.pixels = lzwDecode(i.lzwMinCodeSize, u), i.interlaced && (i.pixels = s(i.pixels, i.width)), t.img && t.img(i)
			},
			u = function() {
				var n = {};
				n.sentinel = e.readByte();
				switch (String.fromCharCode(n.sentinel)) {
					case "!":
						n.type = "ext", s(n);
						break;
					case ",":
						n.type = "img", o(n);
						break;
					case ";":
						n.type = "eof", t.eof && t.eof(n);
						break;
					default:
						t.error && t.error("Unknown block: 0x" + n.sentinel.toString(16)), n.type = "eof", t.eof && t.eof(n)
				}
				n.type !== "eof" && (window.navigator ? setTimeout(u, 0) : u())
			},
			a = function() {
				i(), window.navigator ? setTimeout(u, 0) : u()
			};
		a()
	};
typeof exports != "undefined" && (exports.Stream = Stream, exports.parseGIF = parseGIF), define("lib/gif", function() {}), define("main", ["app", "config", "game", "lib/require", "lib/class", "lib/underscore.min", "lib/sprintf", "util", "guid", "gui", "lib/gif"], function(e, t, n) {
	function s(e) {
		document.readyState != "loading" ? e() : document.addEventListener ? document.addEventListener("DOMContentLoaded", e) : document.attachEvent("onreadystatechange", function() {
			document.readyState != "loading" && e()
		})
	}
	var r, i, o = function() {
			s(function() {
				r = new e, r.center(), I(), window.autoStartGame && r.tryStartGame()
			})
		},
		u = 0,
		a = 0,
		f = 300,
		l = function(e) {
			return newTime = (new Date).getTime(), u && newTime >= u + f && (a = 0), u = newTime, !e.pageX && !e.changedTouches && !e.originalEvent ? !0 : F(e) ? !0 : (r.center(), r.setMouseCoordinates(e), !gui.isVisible("deathscreen") && !gui.isVisible("reconnectscreen") && i && i.click() && e && (e.stopPropagation(), e.preventDefault()), r.hideWindows(), !1)
		},
		c = function() {
			if (!gui.getDom("movepad")) return;
			gui.bind("movepad", "touchstart", h), gui.bind("movepad", "touchmove", p), gui.bind("movepad", "touchend", d), gui.bind("movepad", "touchcancel", d), gui.bind("movepad", "touchleave", d)
		},
		h = function(e) {
			e && (e.stopPropagation(), e.preventDefault());
			var t = m(e, "movepad");
			r.movepadDown = !0, r.config.movepadalpha && gui.setAlpha("movepad", 1), v(t.x, t.y), i && (i.unlockSoundsOnMobile(), i.sounds && i.sounds.updateMusic())
		},
		p = function(e) {
			e && (e.stopPropagation(), e.preventDefault());
			if (!r.movepadDown) return;
			var t = m(e, "movepad");
			v(t.x, t.y)
		},
		d = function(e) {
			e && (e.stopPropagation(), e.preventDefault());
			if (!r.movepadDown) return;
			r.movepadDown = !1, r.config.movepadalpha && gui.setAlpha("movepad", r.config.movepadalpha)
		},
		v = function(e, t) {
			var n = e - gui.getWidth("movepad") / 2,
				i = t - gui.getHeight("movepad") / 2,
				s = Math.atan2(i, n),
				o = Math.PI / 4,
				u = Math.round(s / o),
				a = u == 2 || u == -2 ? 0 : Math.abs(u) < 2 ? 1 : -1,
				f = u > 0 && u < 4 ? 1 : u < 0 && u > -4 ? -1 : 0;
			r.movepadVector = {
				x: a,
				y: f
			}
		},
		m = function(e, t) {
			var n = e.changedTouches ? e.changedTouches : e.originalEvent ? e.originalEvent.changedTouches : null;
			return n && n.length > 0 && (e = n[0]), {
				x: e.pageX - gui.getPosition(t).left,
				y: e.pageY - gui.getPosition(t).top
			}
		},
		g = function() {
			if (!gui.getDom("weaponpad")) return;
			gui.bind("weaponpad", "touchstart", y), gui.bind("weaponpad", "touchmove", b), gui.bind("weaponpad", "touchend", w), gui.bind("weaponpad", "touchcancel", w), gui.bind("weaponpad", "touchleave", w), gui.bind("weaponpad", "mousedown", y), gui.bind("weaponpad", "mousemove", b), gui.bind("weaponpad", "mouseup", w), gui.bind("weaponpad", "mouseleave", w)
		},
		y = function(e) {
			e && (e.stopPropagation(), e.preventDefault());
			var t = m(e, "weaponpad");
			r.weaponpadDown = !0, r.config.movepadalpha && gui.setAlpha("weaponpad", 1), E(t.x, t.y), i && i.playerAttack(r.weaponpadDirection)
		},
		b = function(e) {
			e && (e.stopPropagation(), e.preventDefault());
			if (!r.weaponpadDown) return;
			var t = m(e, "weaponpad");
			t.x >= 0 && t.y >= 0 && E(t.x, t.y)
		},
		w = function(e) {
			e && (e.stopPropagation(), e.preventDefault());
			if (!r.weaponpadDown) return;
			r.weaponpadDown = !1, r.config.movepadalpha && gui.setAlpha("weaponpad", r.config.movepadalpha)
		},
		E = function(e, t) {
			var n = e - gui.getWidth("weaponpad") / 2,
				i = t - gui.getHeight("weaponpad") / 2;
			r.weaponpadDirection = Math.abs(n) >= Math.abs(i) ? n > 0 ? 4 : 3 : i > 0 ? 2 : 1
		},
		S = function() {
			gui.bind("bombbutton", "touchstart", x), gui.bind("bombbutton", "touchend", T), gui.bind("bombbutton", "touchcancel", T), gui.bind("bombbutton", "touchleave", T), gui.bind("bombbutton", "mousedown", x), gui.bind("bombbutton", "mouseup", T), gui.bind("bombbutton", "mouseleave", T), gui.bind("lightsbutton", "mousedown", N), gui.bind("lightsbutton", "touchstart", N), gui.bind("hornbutton", "mousedown", C), gui.bind("hornbutton", "touchstart", C), gui.bind("mode2button", "mousedown", k), gui.bind("mode2button", "touchstart", k)
		},
		x = function(e) {
			e && (e.stopPropagation(), e.preventDefault()), r.itemkeyDown = !0, i && i.player && i.player.useSecondaryWeapon(!0)
		},
		T = function(e) {
			e && (e.stopPropagation(), e.preventDefault()), r.itemkeyDown = !1
		},
		N = function(e) {
			e && (e.stopPropagation(), e.preventDefault()), i && i.player && i.player.useLightsButton()
		},
		C = function(e) {
			e && (e.stopPropagation(), e.preventDefault()), i && i.player && i.player.useHornButton()
		},
		k = function(e) {
			e && (e.stopPropagation(), e.preventDefault()), i && i.player && i.player.useMode2Button()
		},
		L = function(e) {
			gui.bind("hotkey" + e, "touchstart", function(t) {
				M(t, e)
			}), gui.bind("hotkey" + e, "touchend", function(t) {
				_(t, e)
			}), gui.bind("hotkey" + e, "touchcancel", function(t) {
				D(t, e)
			}), gui.bind("hotkey" + e, "touchleave", function(t) {
				D(t, e)
			}), gui.bind("hotkey" + e, "mousedown", function(t) {
				M(t, e)
			}), gui.bind("hotkey" + e, "mouseup", function(t) {
				_(t, e)
			}), gui.bind("hotkey" + e, "mouseleave", function(t) {
				D(t, e)
			})
		},
		A = {},
		O = null,
		M = function(e, t) {
			if (A[t]) return;
			A[t] = !0, O && clearTimeout(O), O = setTimeout(function() {
				A[t] && (A[t] = !1, i.activateHotkey(t, !1))
			}, 500)
		},
		_ = function(e, t) {
			O && (clearTimeout(O), O = null), A[t] && i.activateHotkey(t, !0), A[t] = !1
		},
		D = function(e, t) {
			O && (clearTimeout(O), O = null), A[t] = !1
		},
		P = function() {
			H() ? j() : B(gui.getDom("gamecontainer"))
		},
		H = function() {
			return document.fullscreenElement ? document.fullscreenElement : document.msFullscreenElement ? document.msFullscreenElement : document.mozFullScreenElement ? document.mozFullScreenElement : document.webkitFullscreenElement ? document.webkitFullscreenElement : null
		},
		B = function(e) {
			e.requestFullscreen ? e.requestFullscreen() : e.msRequestFullscreen ? e.msRequestFullscreen() : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.webkitRequestFullScreen && (e.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT), document.webkitFullscreenElement || e.webkitRequestFullscreen())
		},
		j = function() {
			document.exitFullscreen ? document.exitFullscreen() : document.msExitFullscreen ? document.msExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen && document.webkitCancelFullScreen()
		},
		F = function(e) {
			return gui.isVisible("deathscreen") || gui.isVisible("reconnectscreen") || gui.isVisible("startscreen") || gui.isVisible("modal_background") || gui.isVisible("newpopup") || gui.isVisible("identifyscreen") ? !0 : gui.isClose(e.target, ["adminconsole", "resizablewindow"]) ? !0 : e.target.href ? !0 : !1
		},
		I = function() {
			var e = gui.getDom("entities"),
				t = gui.getDom("background"),
				s = gui.getDom("minimapcanvas"),
				o = gui.getDom("chatinput"),
				h = gui.getDom("winnercanvas");
			if (!e) return;
			i = new n(r), i.setup(e, t, s, o, h), r.setGame(i), i.preloadMaps(), i.preloadAnimations(), gui.setClick("movementhelp", function(e, t, n) {
				if (n >= gui.getHeight("movementhelp") / 2 && r.config.gameads && r.config.gameads.length > 0 && r.config.gameads[0].showinmovementhelp) return;
				gui.fadeOut("movementhelp")
			}), gui.setClick("chatbutton", function() {
				gui.isVisible("chatbox") ? r.hideChat() : r.showChat()
			}), gui.setClick("clanchatbutton", function() {
				i.menu.writeClanMessage()
			}), gui.setClick("minimap", function() {
				i.minimap.onClick()
			}), gui.setClick("invitebutton", function() {
				i.menu.inviteFriends()
			}), gui.setClick("furniturebutton", function() {
				i.shop.showFurnitureShops()
			}), gui.setClick("menubutton", function() {
				i.menu.showMainMenu()
			}), gui.setClick("homebutton", function() {
				i.menu.showHomeMenu()
			}), gui.setClick("coinsbutton", function() {
				i.shop.showBuyCoinsDialog(null, "game")
			}), gui.setClick("postpicturebutton", function() {
				i.storymanager.showStoryInterface()
			}), gui.setClick("fullscreenbutton", function() {
				P()
			}), gui.setClick("logoutbutton", function() {
				i.menu.showConfirmLogout()
			}), gui.setClick("recordclosebutton", function() {
				i.storymanager.closeRecordStory()
			}), gui.setClick("recordstartbutton", function() {
				i.storymanager.startRecordStory()
			}), gui.setClick("recordstopbutton", function() {
				i.storymanager.stopRecordStory()
			}), c(), g(), S(), gui.getDom("hotkeys") && (L(1), L(2), L(3), L(4), L(5)), gui.setClick("winnercanvas", function() {
				i && i.requestWinnerProfile()
			}), gui.setClick("playbutton", function() {
				r.startGame()
			}), gui.setClick("identifyforumsbutton", function() {
				i.shop.showURL(i.app.config.forumurl, "inside")
			}), gui.setClick("identifydevicebutton", function() {
				i.identifyByDevice()
			}), gui.setClick("identifyemailbutton", function() {
				i.showIdentifyByEmail()
			}), gui.setClick("identifyemailbackbutton", function() {
				i.closeIdentifyByEmail()
			}), gui.setClick("identifyemailsendbutton", function() {
				i.sendIdentifyByEmail()
			}), gui.setClick("identifynewuserbutton", function() {
				i.showIdentifyNewUser()
			}), gui.setClick("identifynewuserbackbutton", function() {
				i.closeIdentifyNewUser()
			}), gui.setClick("identifynewusersendbutton", function() {
				i.sendIdentifyNewUser()
			}), gui.setClick("identifyfacebookbutton", function() {
				FB.login(function(e) {
					i.loginWithFacebookResponse(e)
				}, {
					scope: "public_profile,email,user_gender"
				})
			}), gui.getDom("adminconsoleinput").onkeydown = function(e) {
				if (e.which == 13) {
					e.preventDefault();
					var t = this.value.trim();
					this.value = "";
					switch (t) {
						case "/clear":
							gui.getDom("adminconsoletext").innerHTML = "";
							break;
						default:
							i && i.client && t.length > 0 && i.client.sendConsoleChat("chat", t)
					}
				}
			}, gui.setClick("adminconsoleclose", function() {
				gui.hide("adminconsole"), i && i.client && i.client.sendConsoleChat("unfollowchannel", "chat")
			}), gui.setClick("leaveshipbutton", function() {
				i.player && i.say("/leave")
			});
			var p = function(e) {
				if (i.player) {
					var t = i.player.getAttachedToObject();
					t && t.sendTrigger("setdir", {
						dir: e
					})
				}
			};
			gui.setClick("shipupbutton", function() {
				p(Types.Directions.UP)
			}), gui.setClick("shipleftbutton", function() {
				p(Types.Directions.LEFT)
			}), gui.setClick("shipdownbutton", function() {
				p(Types.Directions.DOWN)
			}), gui.setClick("shiprightbutton", function() {
				p(Types.Directions.RIGHT)
			}), document.addEventListener("touchstart", function() {}, !1), document.addEventListener("touchmove", function(e) {
				if (e.target && (gui.hasClass(e.target, "scrollable") || e.target.parentNode && gui.hasClass(e.target.parentNode, "scrollable"))) return;
				e.preventDefault()
			}), gui.setHTML("underconstruction", translate("Avalonia allows you to build a house, fight monsters and conquer castles! It's fresh and new, so we hope you will have fun and support us. Press play and Enjoy! :-)")), gui.setAttribute("coinsbutton", "help", translate("Get coins for cool items!")), gui.setAttribute("invitebutton", "help", translate("Invite friends to the game to build your clan!")), gui.setAttribute("furniturebutton", "help", translate("Get furniture for your house!")), gui.setAttribute("postpicturebutton", "help", translate("Share a story on Facebook or Twitter!")), gui.setAttribute("logoutbutton", "help", translate("Logout from Account!")), gui.setAttribute("fullscreenbutton", "help", translate("Switch to Fullscreen!")), gui.setAttribute("clanchatbutton", "help", translate("Click to send messages to your clan!")), gui.setAttribute("chatbutton", "help", translate("Click to chat with people!")), gui.setAttribute("menubutton", "help", translate("Open the menu!")), gui.setAttribute("homebutton", "help", translate("Go back to start!")), gui.setAttribute("pmbutton", "help", translate("View the message!")), i.onPlayerDeath(function(e) {
				if (gui.isVisible("reconnectscreen")) return;
				var t;
				e && e.name ? t = '<div style="margin-left:80px;">' + translate("You've been killed by %s!", [e.name]) + (e.hitPoints && e.maxHitPoints ? "<br>" + translate("Health of %s:", [e.name]) + " " + e.hitPoints + "/" + e.maxHitPoints : "") + "</div>" : t = translate("You died!");
				var n = gui.setHTML("deathmessage", t);
				if (n && e) {
					if (e.head) {
						var r = n.appendChild(i.menu.getImageDivForMenuItem({
							itemtype: "head",
							head: i.animationmanager.expandGameFilename("head", e.head)
						}));
						r.style.left = "44px", r.style.top = "38px"
					}
					if (e.hat) {
						var r = n.appendChild(i.menu.getImageDivForMenuItem({
							itemtype: "hat",
							hat: i.animationmanager.expandGameFilename("hat", e.hat)
						}));
						r.style.left = "44px", r.style.top = "22px"
					}
				}
				gui.fadeIn("deathscreen")
			}), gui.setClick("pmbutton", function() {
				i.showNextPM()
			}), gui.setClick("foreground", l);
			var d = function(e) {
				if (!i.player || !i.mapmanager.currentmap) return !0;
				if (!i.player.allowClickWarp()) return !0;
				if (F(e)) return !0;
				r.setMouseCoordinates(e);
				var t = i.getMouseGridPosition();
				return i.client.sendMapMove(i.mapmanager.currentmap.mapname, t.x, t.y), !1
			};
			gui.getDom("gamecontainer").oncontextmenu = d, gui.setResize(function(e) {
				i.resize()
			}), gui.setClick(document.body, null), gui.bind("body", "touchstart", l), gui.bind("body", "touchend", function(e) {
				if (F(e)) return !0;
				var t = (new Date).getTime();
				return u && t > u && t < u + f ? (u = t, a++, a == 2 && d(e)) : a = 0, !1
			}), gui.bind("body", "click", function(e) {
				return F(e) ? !0 : (gui.isVisible("movementhelp") && gui.fadeOut("movementhelp"), i.started && i.player && i.click(), !1)
			}), gui.setClick("deathscreen", function() {
				r.revive()
			}), gui.setClick("reconnectscreen", function() {
				r.reconnect()
			}), gui.bind(document, "mousemove", function(e) {
				r.setMouseCoordinates(e)
			});
			var v = [],
				m = v.concat([""]),
				y = v.length;
			gui.getDom("chatinput").onkeydown = function(e) {
				switch (e.which) {
					case 13:
						var t = this.value.trim();
						return this.value = "", t.length > 0 ? (i.player && i.say(t, !0), this.placeholder = "", r.hideChat(), gui.focus("foreground"), y < v.length && (m[y] = v[y]), y >= 0 && y >= v.length - 1 && v[v.length - 1] === t ? m[v.length] = "" : (m[v.length] = t, m.push(""), v.push(t), v.length > 100 && (m.shift(), v.shift())), y = v.length) : r.hideChat(), !1;
					case 27:
						return r.hideChat(), !1;
					case 38:
						return y > 0 && (m[y--] = this.value, this.value = m[y]), !1;
					case 40:
						return y < v.length && (m[y++] = this.value, this.value = m[y]), !1
				}
			}, gui.bind(document, "keydown", function(e) {
				if (i.player && i.player.ghost) return !0;
				var t = e.which,
					n = e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;
				if (gui.exists("modal_background") || gui.exists("newpopup")) {
					r.hideChat();
					switch (t) {
						case 77:
							i.menu.getCurrentMenu() == "map" && i.menu.closePopUp();
							break;
						case 81:
							(i.menu.getCurrentMenu() == "inventory" || i.menu.getCurrentMenu() == "category") && i.menu.closePopUp();
							break;
						case 49:
						case 50:
						case 51:
						case 52:
						case 53:
							if (gui.getDom("hotkeys")) {
								var s = t - 48;
								if (i.menu.getCurrentMenu() == "category" && i.menu.inventoryCategory.fromhotkey != s) return i.menu.closePopUp(), i.activateHotkey(s, !1), !1
							}
					}
					return !0
				}
				if (t === 13) {
					if (gui.isVisible("chatbox")) return r.hideChat(), !1;
					if (e.target.tagName.toLowerCase() == "body") return i.ready && r.showChat(), !1
				}
				if (e.target.tagName.toLowerCase() == "input" || e.target.tagName.toLowerCase() == "textarea") return !0;
				if (e.shiftKey) {
					switch (t) {
						case 65:
							return i.say("X-("), !1;
						case 70:
							return i.say(":-("), !1;
						case 72:
							return i.say("<3"), !1;
						case 73:
							return i.say("(i)"), !1;
						case 75:
							return i.say(":-*"), !1;
						case 77:
							return i.say(":-|"), !1;
						case 78:
							return i.say("D-)"), !1;
						case 79:
							return i.say("o.o"), !1;
						case 80:
							return i.say(":-p"), !1;
						case 81:
							return i.say(":)]"), !1;
						case 68:
						case 83:
							return i.say(":-)"), !1;
						case 84:
							return i.say(":_("), !1;
						case 86:
							return i.say("?-("), !1;
						case 87:
							return i.say(";-)"), !1;
						case 88:
							return i.say("x-x"), !1;
						case 90:
							return i.say("z_z"), !1
					}
					if (r.config.extendedemoticons) switch (t) {
						case 66:
							return i.say(":brb:"), !1;
						case 69:
							return i.say(":help:"), !1;
						case 71:
							return i.say(":go:"), !1;
						case 82:
							return i.say(":afk:"), !1;
						case 89:
							return i.say(":ok:"), !1
					}
				}
				if (t != 17 && n) return !0;
				if (t >= 65 && i.player && i.player.weaponnpc) {
					if (r.keyScript == t && e.repeat) return !1;
					if (i.scriptmanager.runScript(i.player.weaponnpc, i.player, "keydown", [e.which, e.key, e.code])) return r.keyScript = t, !1
				}
				r.keyScript = null;
				var o = r.keyPressed[t];
				r.keyPressed[t] = !0;
				switch (t) {
					case 27:
						return r.hideWindows(), !1;
					case 37:
					case 38:
					case 39:
					case 40:
					case 65:
					case 87:
					case 68:
					case 83:
						return r.keyPressedLast = t, !1;
					case 32:
					case 69:
						return r.keyPressedLast = t, !o && i.player && i.playerAttack(i.player.dir), !1;
					case 73:
						return r.keyPressedLast = t, !o && i.player && i.playerAttack(Types.Orientations.UP), !1;
					case 74:
						return r.keyPressedLast = t, !o && i.player && i.playerAttack(Types.Orientations.LEFT), !1;
					case 75:
						return r.keyPressedLast = t, !o && i.player && i.playerAttack(Types.Orientations.DOWN), !1;
					case 76:
						return r.keyPressedLast = t, !o && i.player && i.playerAttack(Types.Orientations.RIGHT), !1;
					case 77:
						return i.menu.getCurrentMenu() == "map" ? i.menu.closePopUp() : i.menu.showMap(), !1;
					case 17:
					case 66:
						return i.player && i.player.useSecondaryWeapon(!1), !1;
					case 81:
						return i.menu.getCurrentMenu() == "inventory" || i.menu.getCurrentMenu() == "category" ? i.menu.closePopUp() : i.player && i.menu.showInventory(!0, !0), !1;
					case 84:
						return i.client && i.player && i.player.isGameAdmin() && (i.player.stealth ? i.client.sendChat("/stealth off") : i.client.sendChat("/stealth on")), !1;
					case 88:
						return i.player && i.player.useMode2Button(), !1;
					case 90:
						return i.client && i.player && i.player.isGameAdmin() && (i.player.zoom > 1 ? i.client.sendChat("/zoom off") : i.client.sendChat("/zoom on")), !1;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
						return gui.getDom("hotkeys") && M(e, t - 48), !1
				}
			}), gui.bind(document, "keyup", function(e) {
				var t = e.which;
				if (r.keyPressed[t]) switch (t) {
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
						gui.getDom("hotkeys") && _(e, t - 48)
				}
				r.keyPressed[t] = !1
			}), window.console && console.log("Initialized game")
		};
	o()
});
if (typeof window.onerror == "object") {
	var lastErrorLogTime = null;
	window.onerror = function(e, t, n, r, i) {
		var s = (new Date).getTime();
		return lastErrorLogTime && s < lastErrorLogTime + 5e3 ? !1 : (lastErrorLogTime = s, gui.callURL("errorlog.php", {
			message: e,
			url: t,
			linenr: n,
			column: r,
			error: JSON.stringify(i)
		}), !1)
	}
};
